type User {
  id: ID! @unique
  email: String! @unique
  name: String!
  countryCode: String
  phoneNumber: String
  favoriteTeam: Team
  country: Country
  displayName: String! @unique
  isPrivate: Boolean! @default(value: "false")
  password: String!
  photos: [UserPhoto]!
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean! @default(value: "false")
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  subscriptions: [Subscription!]!
  userRoles: [UserRole!]!
  status: [UserStatus]!
  followers: UserFollower!
  influencers: UserInfluencer!
}

type UserPhoto {
  id: ID! @unique
  user: User!
  photo: Photo!
  isProfile: Boolean
}

type Photo {
  id: ID! @unique
  image: String!
  largeImage: String
  smallImage: String
}

type Status {
  id: ID! @unique
  author: UserStatus
  content: String!
  likes: [User]!
}

type UserStatus {
  id: ID! @unique
  status: Status
  currentStatus: Boolean
}

type Follower {
  id: ID! @unique
  user: User!
  blocked: Boolean! @default(value: "false")
  accepted: Boolean! @default(value: "false")
}

type UserFollower {
  id: ID! @unique
  followers: [Follower]!
  user: User!
}

type Influencer {
  id: ID! @unique
  user: User!
}

type UserInfluencer {
  id: ID! @unique
  user: User!
  influencers: [Influencer]!
}

type UserRole {
  id: ID! @unique
  name: String!
  description: String!
}

type UserAssignedRole {
  id: ID! @unique
  user: User!
  userRole: UserRole!
}

type ActiveSubscriptions {
  id: ID! @unique
  user: User!
  subscription: UserRole!
  startDate: DateTime!
  endDate: DateTime!
}

type Subscription {
  id: ID! @unique
  name: String!
  description: String!
}

type Country {
  id: ID! @unique
  iso: String!
  name: String!
  code: String!
}

type Team {
  id: ID! @unique
  code: Int! @unique
  fplTeamId: Int!
  name: String!
  shortName: String!
  strength: Int!
  strengthAttackAway: Int!
  strengthAttackHome: Int!
  strengthDefenceAway: Int!
  strengthDefenceHome: Int!
  strengthOverallAway: Int!
  strengthOverallHome: Int!
  teamDivision: Int!
  homeFixtures: [HomeTeamFixture]!
  awayFixtures: [AwayTeamFixture]!
}

type Season {
  id: ID! @unique
  fplId: Int! @unique
  competition: String!
  startYear: Int!
  endYear: Int!
  isCurrent: Boolean!
  isPrevious: Boolean!
  isNext: boolean!
}

type Gameweek {
  id: ID! @unique
  fplEventId: Int! @unique
  season: Season!
  averageEntryScore: Int
  dataChecked: Boolean!
  deadlineTime: DateTime!
  deadlineTimeEpoch: Int!
  deadlineTimeFormatted: String!
  deadlineTimeGameOffset: Int!
  finished: Boolean!
  highestScore: Int
  highestScoringEntry: Int
  isCurrent: Boolean!
  isNext: Boolean!
  isPrevious: Boolean!
  name: String!
}

type HomeTeamFixture {
  id: ID! @unique
  fixture: Fixture!
  homeTeam: Team!
}

type AwayTeamFixture {
  id: ID! @unique
  fixture: Fixture!
  awayTeam: Team!
}

type Fixture {
  id: ID! @unique
  fplCode: Int! @unique
  event: Gameweek!
  finished: Boolean!
  finishedProvisional: Boolean!
  fixtureId: Int!
  kickoffTime: DateTime
  minutes: Int!
  provisionalStartTime: Boolean!
  started: Boolean!
  teamA: AwayTeam!
  teamADifficulty: Int!
  teamAScore: Int
  teamH: HomeTeam!
  teamHDifficulty: Int!
  teamHScore: Int
}
