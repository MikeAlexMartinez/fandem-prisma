# source: http://localhost:6464
# timestamp: Sat Jul 27 2019 03:08:51 GMT+0100 (BST)

type ActiveSubscriptions implements Node {
  id: ID!
  user: User!
  subscription: UserRole!
  startDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ActiveSubscriptionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActiveSubscriptionsEdge]!
  aggregate: AggregateActiveSubscriptions!
}

input ActiveSubscriptionsCreateInput {
  id: ID
  startDate: DateTime!
  endDate: DateTime!
  user: UserCreateOneInput!
  subscription: UserRoleCreateOneInput!
}

"""An edge in a connection."""
type ActiveSubscriptionsEdge {
  """The item at the end of the edge."""
  node: ActiveSubscriptions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActiveSubscriptionsOrderByInput {
  id_ASC
  id_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ActiveSubscriptionsPreviousValues {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ActiveSubscriptionsSubscriptionPayload {
  mutation: MutationType!
  node: ActiveSubscriptions
  updatedFields: [String!]
  previousValues: ActiveSubscriptionsPreviousValues
}

input ActiveSubscriptionsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActiveSubscriptionsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActiveSubscriptionsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActiveSubscriptionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActiveSubscriptionsWhereInput
}

input ActiveSubscriptionsUpdateInput {
  startDate: DateTime
  endDate: DateTime
  user: UserUpdateOneRequiredInput
  subscription: UserRoleUpdateOneRequiredInput
}

input ActiveSubscriptionsUpdateManyMutationInput {
  startDate: DateTime
  endDate: DateTime
}

input ActiveSubscriptionsWhereInput {
  """Logical AND on all given filters."""
  AND: [ActiveSubscriptionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActiveSubscriptionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActiveSubscriptionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  subscription: UserRoleWhereInput
}

input ActiveSubscriptionsWhereUniqueInput {
  id: ID
}

type AggregateActiveSubscriptions {
  count: Int!
}

type AggregateAwayTeamFixture {
  count: Int!
}

type AggregateContest {
  count: Int!
}

type AggregateContestCreator {
  count: Int!
}

type AggregateContestInviter {
  count: Int!
}

type AggregateContestOwner {
  count: Int!
}

type AggregateContestPrediction {
  count: Int!
}

type AggregateContestPredictionScore {
  count: Int!
}

type AggregateContestSlate {
  count: Int!
}

type AggregateContestSlateEntry {
  count: Int!
}

type AggregateContestType {
  count: Int!
}

type AggregateContestUser {
  count: Int!
}

type AggregateContestUserType {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateDefaultScoringSystemDetail {
  count: Int!
}

type AggregateDefaultScoringSystemHeader {
  count: Int!
}

type AggregateFandemSubscription {
  count: Int!
}

type AggregateFixture {
  count: Int!
}

type AggregateFollower {
  count: Int!
}

type AggregateGameweek {
  count: Int!
}

type AggregateHomeTeamFixture {
  count: Int!
}

type AggregateInfluencer {
  count: Int!
}

type AggregatePhoto {
  count: Int!
}

type AggregateScoringSystemDetail {
  count: Int!
}

type AggregateScoringSystemHeader {
  count: Int!
}

type AggregateScoringType {
  count: Int!
}

type AggregateSeason {
  count: Int!
}

type AggregateStatus {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserAssignedRole {
  count: Int!
}

type AggregateUserFollowers {
  count: Int!
}

type AggregateUserInfluencers {
  count: Int!
}

type AggregateUserPhoto {
  count: Int!
}

type AggregateUserRole {
  count: Int!
}

type AggregateUserStatus {
  count: Int!
}

type AwayTeamFixture implements Node {
  id: ID!
  fixture: Fixture!
  awayTeam: Team!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type AwayTeamFixtureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AwayTeamFixtureEdge]!
  aggregate: AggregateAwayTeamFixture!
}

input AwayTeamFixtureCreateInput {
  id: ID
  fixture: FixtureCreateOneWithoutTeamAInput!
  awayTeam: TeamCreateOneWithoutAwayFixturesInput!
}

input AwayTeamFixtureCreateManyWithoutAwayTeamInput {
  create: [AwayTeamFixtureCreateWithoutAwayTeamInput!]
  connect: [AwayTeamFixtureWhereUniqueInput!]
}

input AwayTeamFixtureCreateOneWithoutFixtureInput {
  create: AwayTeamFixtureCreateWithoutFixtureInput
  connect: AwayTeamFixtureWhereUniqueInput
}

input AwayTeamFixtureCreateWithoutAwayTeamInput {
  id: ID
  fixture: FixtureCreateOneWithoutTeamAInput!
}

input AwayTeamFixtureCreateWithoutFixtureInput {
  id: ID
  awayTeam: TeamCreateOneWithoutAwayFixturesInput!
}

"""An edge in a connection."""
type AwayTeamFixtureEdge {
  """The item at the end of the edge."""
  node: AwayTeamFixture!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AwayTeamFixtureOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AwayTeamFixturePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AwayTeamFixtureScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AwayTeamFixtureScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AwayTeamFixtureScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AwayTeamFixtureScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type AwayTeamFixtureSubscriptionPayload {
  mutation: MutationType!
  node: AwayTeamFixture
  updatedFields: [String!]
  previousValues: AwayTeamFixturePreviousValues
}

input AwayTeamFixtureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AwayTeamFixtureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AwayTeamFixtureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AwayTeamFixtureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AwayTeamFixtureWhereInput
}

input AwayTeamFixtureUpdateInput {
  fixture: FixtureUpdateOneRequiredWithoutTeamAInput
  awayTeam: TeamUpdateOneRequiredWithoutAwayFixturesInput
}

input AwayTeamFixtureUpdateManyWithoutAwayTeamInput {
  create: [AwayTeamFixtureCreateWithoutAwayTeamInput!]
  connect: [AwayTeamFixtureWhereUniqueInput!]
  set: [AwayTeamFixtureWhereUniqueInput!]
  disconnect: [AwayTeamFixtureWhereUniqueInput!]
  delete: [AwayTeamFixtureWhereUniqueInput!]
  update: [AwayTeamFixtureUpdateWithWhereUniqueWithoutAwayTeamInput!]
  deleteMany: [AwayTeamFixtureScalarWhereInput!]
  upsert: [AwayTeamFixtureUpsertWithWhereUniqueWithoutAwayTeamInput!]
}

input AwayTeamFixtureUpdateOneRequiredWithoutFixtureInput {
  create: AwayTeamFixtureCreateWithoutFixtureInput
  connect: AwayTeamFixtureWhereUniqueInput
  update: AwayTeamFixtureUpdateWithoutFixtureDataInput
  upsert: AwayTeamFixtureUpsertWithoutFixtureInput
}

input AwayTeamFixtureUpdateWithoutAwayTeamDataInput {
  fixture: FixtureUpdateOneRequiredWithoutTeamAInput
}

input AwayTeamFixtureUpdateWithoutFixtureDataInput {
  awayTeam: TeamUpdateOneRequiredWithoutAwayFixturesInput
}

input AwayTeamFixtureUpdateWithWhereUniqueWithoutAwayTeamInput {
  where: AwayTeamFixtureWhereUniqueInput!
  data: AwayTeamFixtureUpdateWithoutAwayTeamDataInput!
}

input AwayTeamFixtureUpsertWithoutFixtureInput {
  update: AwayTeamFixtureUpdateWithoutFixtureDataInput!
  create: AwayTeamFixtureCreateWithoutFixtureInput!
}

input AwayTeamFixtureUpsertWithWhereUniqueWithoutAwayTeamInput {
  where: AwayTeamFixtureWhereUniqueInput!
  update: AwayTeamFixtureUpdateWithoutAwayTeamDataInput!
  create: AwayTeamFixtureCreateWithoutAwayTeamInput!
}

input AwayTeamFixtureWhereInput {
  """Logical AND on all given filters."""
  AND: [AwayTeamFixtureWhereInput!]

  """Logical OR on all given filters."""
  OR: [AwayTeamFixtureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AwayTeamFixtureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  fixture: FixtureWhereInput
  awayTeam: TeamWhereInput
}

input AwayTeamFixtureWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Contest implements Node {
  id: ID!
  contestName: String!
  isActive: Boolean!
  isDefault: Boolean!
  isPublic: Boolean!
  createdBy: ContestCreator!
  currentOwner: ContestOwner!
  contestTypeId: ContestType!
  invitationCode: String!
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean!
  playerLimit: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  users(where: ContestUserWhereInput, orderBy: ContestUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestUser!]
  scoringSystem: ScoringSystemHeader!
}

"""A connection to a list of items."""
type ContestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestEdge]!
  aggregate: AggregateContest!
}

input ContestCreateInput {
  id: ID
  contestName: String!
  isActive: Boolean
  isDefault: Boolean
  isPublic: Boolean!
  invitationCode: String!
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean
  playerLimit: Int
  createdBy: ContestCreatorCreateOneInput!
  currentOwner: ContestOwnerCreateOneInput!
  contestTypeId: ContestTypeCreateOneInput!
  users: ContestUserCreateManyWithoutContestInput
  scoringSystem: ScoringSystemHeaderCreateOneWithoutContestInput!
}

input ContestCreateOneInput {
  create: ContestCreateInput
  connect: ContestWhereUniqueInput
}

input ContestCreateOneWithoutScoringSystemInput {
  create: ContestCreateWithoutScoringSystemInput
  connect: ContestWhereUniqueInput
}

input ContestCreateOneWithoutUsersInput {
  create: ContestCreateWithoutUsersInput
  connect: ContestWhereUniqueInput
}

input ContestCreateWithoutScoringSystemInput {
  id: ID
  contestName: String!
  isActive: Boolean
  isDefault: Boolean
  isPublic: Boolean!
  invitationCode: String!
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean
  playerLimit: Int
  createdBy: ContestCreatorCreateOneInput!
  currentOwner: ContestOwnerCreateOneInput!
  contestTypeId: ContestTypeCreateOneInput!
  users: ContestUserCreateManyWithoutContestInput
}

input ContestCreateWithoutUsersInput {
  id: ID
  contestName: String!
  isActive: Boolean
  isDefault: Boolean
  isPublic: Boolean!
  invitationCode: String!
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean
  playerLimit: Int
  createdBy: ContestCreatorCreateOneInput!
  currentOwner: ContestOwnerCreateOneInput!
  contestTypeId: ContestTypeCreateOneInput!
  scoringSystem: ScoringSystemHeaderCreateOneWithoutContestInput!
}

type ContestCreator implements Node {
  id: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContestCreatorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestCreatorEdge]!
  aggregate: AggregateContestCreator!
}

input ContestCreatorCreateInput {
  id: ID
  user: UserCreateOneInput!
}

input ContestCreatorCreateOneInput {
  create: ContestCreatorCreateInput
  connect: ContestCreatorWhereUniqueInput
}

"""An edge in a connection."""
type ContestCreatorEdge {
  """The item at the end of the edge."""
  node: ContestCreator!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestCreatorOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestCreatorPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContestCreatorSubscriptionPayload {
  mutation: MutationType!
  node: ContestCreator
  updatedFields: [String!]
  previousValues: ContestCreatorPreviousValues
}

input ContestCreatorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestCreatorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestCreatorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestCreatorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestCreatorWhereInput
}

input ContestCreatorUpdateDataInput {
  user: UserUpdateOneRequiredInput
}

input ContestCreatorUpdateInput {
  user: UserUpdateOneRequiredInput
}

input ContestCreatorUpdateOneRequiredInput {
  create: ContestCreatorCreateInput
  connect: ContestCreatorWhereUniqueInput
  update: ContestCreatorUpdateDataInput
  upsert: ContestCreatorUpsertNestedInput
}

input ContestCreatorUpsertNestedInput {
  update: ContestCreatorUpdateDataInput!
  create: ContestCreatorCreateInput!
}

input ContestCreatorWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestCreatorWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestCreatorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestCreatorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input ContestCreatorWhereUniqueInput {
  id: ID
}

"""An edge in a connection."""
type ContestEdge {
  """The item at the end of the edge."""
  node: Contest!

  """A cursor for use in pagination."""
  cursor: String!
}

type ContestInviter implements Node {
  id: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContestInviterConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestInviterEdge]!
  aggregate: AggregateContestInviter!
}

input ContestInviterCreateInput {
  id: ID
  user: UserCreateOneInput!
}

input ContestInviterCreateOneInput {
  create: ContestInviterCreateInput
  connect: ContestInviterWhereUniqueInput
}

"""An edge in a connection."""
type ContestInviterEdge {
  """The item at the end of the edge."""
  node: ContestInviter!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestInviterOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestInviterPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContestInviterSubscriptionPayload {
  mutation: MutationType!
  node: ContestInviter
  updatedFields: [String!]
  previousValues: ContestInviterPreviousValues
}

input ContestInviterSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestInviterSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestInviterSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestInviterSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestInviterWhereInput
}

input ContestInviterUpdateDataInput {
  user: UserUpdateOneRequiredInput
}

input ContestInviterUpdateInput {
  user: UserUpdateOneRequiredInput
}

input ContestInviterUpdateOneInput {
  create: ContestInviterCreateInput
  connect: ContestInviterWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ContestInviterUpdateDataInput
  upsert: ContestInviterUpsertNestedInput
}

input ContestInviterUpsertNestedInput {
  update: ContestInviterUpdateDataInput!
  create: ContestInviterCreateInput!
}

input ContestInviterWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestInviterWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestInviterWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestInviterWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input ContestInviterWhereUniqueInput {
  id: ID
}

enum ContestOrderByInput {
  id_ASC
  id_DESC
  contestName_ASC
  contestName_DESC
  isActive_ASC
  isActive_DESC
  isDefault_ASC
  isDefault_DESC
  isPublic_ASC
  isPublic_DESC
  invitationCode_ASC
  invitationCode_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  nextEvent_ASC
  nextEvent_DESC
  currentEvent_ASC
  currentEvent_DESC
  totalEvents_ASC
  totalEvents_DESC
  isPremium_ASC
  isPremium_DESC
  playerLimit_ASC
  playerLimit_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestOwner implements Node {
  id: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContestOwnerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestOwnerEdge]!
  aggregate: AggregateContestOwner!
}

input ContestOwnerCreateInput {
  id: ID
  user: UserCreateOneInput!
}

input ContestOwnerCreateOneInput {
  create: ContestOwnerCreateInput
  connect: ContestOwnerWhereUniqueInput
}

"""An edge in a connection."""
type ContestOwnerEdge {
  """The item at the end of the edge."""
  node: ContestOwner!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestOwnerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestOwnerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContestOwnerSubscriptionPayload {
  mutation: MutationType!
  node: ContestOwner
  updatedFields: [String!]
  previousValues: ContestOwnerPreviousValues
}

input ContestOwnerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestOwnerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestOwnerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestOwnerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestOwnerWhereInput
}

input ContestOwnerUpdateDataInput {
  user: UserUpdateOneRequiredInput
}

input ContestOwnerUpdateInput {
  user: UserUpdateOneRequiredInput
}

input ContestOwnerUpdateOneRequiredInput {
  create: ContestOwnerCreateInput
  connect: ContestOwnerWhereUniqueInput
  update: ContestOwnerUpdateDataInput
  upsert: ContestOwnerUpsertNestedInput
}

input ContestOwnerUpsertNestedInput {
  update: ContestOwnerUpdateDataInput!
  create: ContestOwnerCreateInput!
}

input ContestOwnerWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestOwnerWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestOwnerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestOwnerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input ContestOwnerWhereUniqueInput {
  id: ID
}

type ContestPrediction {
  id: Int!
  contestSlateEntryId: ContestSlateEntry!
  contestUser: ContestUser!
  homeScore: Int!
  awayScore: Int!
  expectedResult: String!
  homeScoreMatches: Boolean!
  awayScoreMatches: Boolean!
  scoresMatch: Boolean!
  resultMatches: Boolean!
  isBanker: Boolean!
  hasFinished: Boolean!
  deadlineTime: DateTime!
  predictionResult(where: ContestPredictionScoreWhereInput, orderBy: ContestPredictionScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestPredictionScore!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContestPredictionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestPredictionEdge]!
  aggregate: AggregateContestPrediction!
}

input ContestPredictionCreateInput {
  homeScore: Int!
  awayScore: Int!
  expectedResult: String!
  homeScoreMatches: Boolean
  awayScoreMatches: Boolean
  scoresMatch: Boolean
  resultMatches: Boolean
  isBanker: Boolean
  hasFinished: Boolean
  deadlineTime: DateTime!
  contestSlateEntryId: ContestSlateEntryCreateOneWithoutPredictionInput!
  contestUser: ContestUserCreateOneInput!
  predictionResult: ContestPredictionScoreCreateManyWithoutContestPredicitonInput
}

input ContestPredictionCreateOneWithoutContestSlateEntryIdInput {
  create: ContestPredictionCreateWithoutContestSlateEntryIdInput
  connect: ContestPredictionWhereUniqueInput
}

input ContestPredictionCreateOneWithoutPredictionResultInput {
  create: ContestPredictionCreateWithoutPredictionResultInput
  connect: ContestPredictionWhereUniqueInput
}

input ContestPredictionCreateWithoutContestSlateEntryIdInput {
  homeScore: Int!
  awayScore: Int!
  expectedResult: String!
  homeScoreMatches: Boolean
  awayScoreMatches: Boolean
  scoresMatch: Boolean
  resultMatches: Boolean
  isBanker: Boolean
  hasFinished: Boolean
  deadlineTime: DateTime!
  contestUser: ContestUserCreateOneInput!
  predictionResult: ContestPredictionScoreCreateManyWithoutContestPredicitonInput
}

input ContestPredictionCreateWithoutPredictionResultInput {
  homeScore: Int!
  awayScore: Int!
  expectedResult: String!
  homeScoreMatches: Boolean
  awayScoreMatches: Boolean
  scoresMatch: Boolean
  resultMatches: Boolean
  isBanker: Boolean
  hasFinished: Boolean
  deadlineTime: DateTime!
  contestSlateEntryId: ContestSlateEntryCreateOneWithoutPredictionInput!
  contestUser: ContestUserCreateOneInput!
}

"""An edge in a connection."""
type ContestPredictionEdge {
  """The item at the end of the edge."""
  node: ContestPrediction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestPredictionOrderByInput {
  id_ASC
  id_DESC
  homeScore_ASC
  homeScore_DESC
  awayScore_ASC
  awayScore_DESC
  expectedResult_ASC
  expectedResult_DESC
  homeScoreMatches_ASC
  homeScoreMatches_DESC
  awayScoreMatches_ASC
  awayScoreMatches_DESC
  scoresMatch_ASC
  scoresMatch_DESC
  resultMatches_ASC
  resultMatches_DESC
  isBanker_ASC
  isBanker_DESC
  hasFinished_ASC
  hasFinished_DESC
  deadlineTime_ASC
  deadlineTime_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestPredictionPreviousValues {
  id: Int!
  homeScore: Int!
  awayScore: Int!
  expectedResult: String!
  homeScoreMatches: Boolean!
  awayScoreMatches: Boolean!
  scoresMatch: Boolean!
  resultMatches: Boolean!
  isBanker: Boolean!
  hasFinished: Boolean!
  deadlineTime: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContestPredictionScore implements Node {
  id: ID!
  scoringDetail: ScoringSystemDetail!
  contestPrediciton: ContestPrediction!
  pointsAvailable: Int!
  pointsScored: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContestPredictionScoreConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestPredictionScoreEdge]!
  aggregate: AggregateContestPredictionScore!
}

input ContestPredictionScoreCreateInput {
  id: ID
  pointsAvailable: Int
  pointsScored: Int
  scoringDetail: ScoringSystemDetailCreateOneInput!
  contestPrediciton: ContestPredictionCreateOneWithoutPredictionResultInput!
}

input ContestPredictionScoreCreateManyWithoutContestPredicitonInput {
  create: [ContestPredictionScoreCreateWithoutContestPredicitonInput!]
  connect: [ContestPredictionScoreWhereUniqueInput!]
}

input ContestPredictionScoreCreateWithoutContestPredicitonInput {
  id: ID
  pointsAvailable: Int
  pointsScored: Int
  scoringDetail: ScoringSystemDetailCreateOneInput!
}

"""An edge in a connection."""
type ContestPredictionScoreEdge {
  """The item at the end of the edge."""
  node: ContestPredictionScore!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestPredictionScoreOrderByInput {
  id_ASC
  id_DESC
  pointsAvailable_ASC
  pointsAvailable_DESC
  pointsScored_ASC
  pointsScored_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestPredictionScorePreviousValues {
  id: ID!
  pointsAvailable: Int!
  pointsScored: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ContestPredictionScoreScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestPredictionScoreScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestPredictionScoreScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestPredictionScoreScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  pointsAvailable: Int

  """All values that are not equal to given value."""
  pointsAvailable_not: Int

  """All values that are contained in given list."""
  pointsAvailable_in: [Int!]

  """All values that are not contained in given list."""
  pointsAvailable_not_in: [Int!]

  """All values less than the given value."""
  pointsAvailable_lt: Int

  """All values less than or equal the given value."""
  pointsAvailable_lte: Int

  """All values greater than the given value."""
  pointsAvailable_gt: Int

  """All values greater than or equal the given value."""
  pointsAvailable_gte: Int
  pointsScored: Int

  """All values that are not equal to given value."""
  pointsScored_not: Int

  """All values that are contained in given list."""
  pointsScored_in: [Int!]

  """All values that are not contained in given list."""
  pointsScored_not_in: [Int!]

  """All values less than the given value."""
  pointsScored_lt: Int

  """All values less than or equal the given value."""
  pointsScored_lte: Int

  """All values greater than the given value."""
  pointsScored_gt: Int

  """All values greater than or equal the given value."""
  pointsScored_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ContestPredictionScoreSubscriptionPayload {
  mutation: MutationType!
  node: ContestPredictionScore
  updatedFields: [String!]
  previousValues: ContestPredictionScorePreviousValues
}

input ContestPredictionScoreSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestPredictionScoreSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestPredictionScoreSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestPredictionScoreSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestPredictionScoreWhereInput
}

input ContestPredictionScoreUpdateInput {
  pointsAvailable: Int
  pointsScored: Int
  scoringDetail: ScoringSystemDetailUpdateOneRequiredInput
  contestPrediciton: ContestPredictionUpdateOneRequiredWithoutPredictionResultInput
}

input ContestPredictionScoreUpdateManyDataInput {
  pointsAvailable: Int
  pointsScored: Int
}

input ContestPredictionScoreUpdateManyMutationInput {
  pointsAvailable: Int
  pointsScored: Int
}

input ContestPredictionScoreUpdateManyWithoutContestPredicitonInput {
  create: [ContestPredictionScoreCreateWithoutContestPredicitonInput!]
  connect: [ContestPredictionScoreWhereUniqueInput!]
  set: [ContestPredictionScoreWhereUniqueInput!]
  disconnect: [ContestPredictionScoreWhereUniqueInput!]
  delete: [ContestPredictionScoreWhereUniqueInput!]
  update: [ContestPredictionScoreUpdateWithWhereUniqueWithoutContestPredicitonInput!]
  updateMany: [ContestPredictionScoreUpdateManyWithWhereNestedInput!]
  deleteMany: [ContestPredictionScoreScalarWhereInput!]
  upsert: [ContestPredictionScoreUpsertWithWhereUniqueWithoutContestPredicitonInput!]
}

input ContestPredictionScoreUpdateManyWithWhereNestedInput {
  where: ContestPredictionScoreScalarWhereInput!
  data: ContestPredictionScoreUpdateManyDataInput!
}

input ContestPredictionScoreUpdateWithoutContestPredicitonDataInput {
  pointsAvailable: Int
  pointsScored: Int
  scoringDetail: ScoringSystemDetailUpdateOneRequiredInput
}

input ContestPredictionScoreUpdateWithWhereUniqueWithoutContestPredicitonInput {
  where: ContestPredictionScoreWhereUniqueInput!
  data: ContestPredictionScoreUpdateWithoutContestPredicitonDataInput!
}

input ContestPredictionScoreUpsertWithWhereUniqueWithoutContestPredicitonInput {
  where: ContestPredictionScoreWhereUniqueInput!
  update: ContestPredictionScoreUpdateWithoutContestPredicitonDataInput!
  create: ContestPredictionScoreCreateWithoutContestPredicitonInput!
}

input ContestPredictionScoreWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestPredictionScoreWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestPredictionScoreWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestPredictionScoreWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  pointsAvailable: Int

  """All values that are not equal to given value."""
  pointsAvailable_not: Int

  """All values that are contained in given list."""
  pointsAvailable_in: [Int!]

  """All values that are not contained in given list."""
  pointsAvailable_not_in: [Int!]

  """All values less than the given value."""
  pointsAvailable_lt: Int

  """All values less than or equal the given value."""
  pointsAvailable_lte: Int

  """All values greater than the given value."""
  pointsAvailable_gt: Int

  """All values greater than or equal the given value."""
  pointsAvailable_gte: Int
  pointsScored: Int

  """All values that are not equal to given value."""
  pointsScored_not: Int

  """All values that are contained in given list."""
  pointsScored_in: [Int!]

  """All values that are not contained in given list."""
  pointsScored_not_in: [Int!]

  """All values less than the given value."""
  pointsScored_lt: Int

  """All values less than or equal the given value."""
  pointsScored_lte: Int

  """All values greater than the given value."""
  pointsScored_gt: Int

  """All values greater than or equal the given value."""
  pointsScored_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  scoringDetail: ScoringSystemDetailWhereInput
  contestPrediciton: ContestPredictionWhereInput
}

input ContestPredictionScoreWhereUniqueInput {
  id: ID
}

type ContestPredictionSubscriptionPayload {
  mutation: MutationType!
  node: ContestPrediction
  updatedFields: [String!]
  previousValues: ContestPredictionPreviousValues
}

input ContestPredictionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestPredictionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestPredictionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestPredictionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestPredictionWhereInput
}

input ContestPredictionUpdateInput {
  homeScore: Int
  awayScore: Int
  expectedResult: String
  homeScoreMatches: Boolean
  awayScoreMatches: Boolean
  scoresMatch: Boolean
  resultMatches: Boolean
  isBanker: Boolean
  hasFinished: Boolean
  deadlineTime: DateTime
  contestSlateEntryId: ContestSlateEntryUpdateOneRequiredWithoutPredictionInput
  contestUser: ContestUserUpdateOneRequiredInput
  predictionResult: ContestPredictionScoreUpdateManyWithoutContestPredicitonInput
}

input ContestPredictionUpdateManyMutationInput {
  homeScore: Int
  awayScore: Int
  expectedResult: String
  homeScoreMatches: Boolean
  awayScoreMatches: Boolean
  scoresMatch: Boolean
  resultMatches: Boolean
  isBanker: Boolean
  hasFinished: Boolean
  deadlineTime: DateTime
}

input ContestPredictionUpdateOneRequiredWithoutContestSlateEntryIdInput {
  create: ContestPredictionCreateWithoutContestSlateEntryIdInput
  connect: ContestPredictionWhereUniqueInput
  update: ContestPredictionUpdateWithoutContestSlateEntryIdDataInput
  upsert: ContestPredictionUpsertWithoutContestSlateEntryIdInput
}

input ContestPredictionUpdateOneRequiredWithoutPredictionResultInput {
  create: ContestPredictionCreateWithoutPredictionResultInput
  connect: ContestPredictionWhereUniqueInput
  update: ContestPredictionUpdateWithoutPredictionResultDataInput
  upsert: ContestPredictionUpsertWithoutPredictionResultInput
}

input ContestPredictionUpdateWithoutContestSlateEntryIdDataInput {
  homeScore: Int
  awayScore: Int
  expectedResult: String
  homeScoreMatches: Boolean
  awayScoreMatches: Boolean
  scoresMatch: Boolean
  resultMatches: Boolean
  isBanker: Boolean
  hasFinished: Boolean
  deadlineTime: DateTime
  contestUser: ContestUserUpdateOneRequiredInput
  predictionResult: ContestPredictionScoreUpdateManyWithoutContestPredicitonInput
}

input ContestPredictionUpdateWithoutPredictionResultDataInput {
  homeScore: Int
  awayScore: Int
  expectedResult: String
  homeScoreMatches: Boolean
  awayScoreMatches: Boolean
  scoresMatch: Boolean
  resultMatches: Boolean
  isBanker: Boolean
  hasFinished: Boolean
  deadlineTime: DateTime
  contestSlateEntryId: ContestSlateEntryUpdateOneRequiredWithoutPredictionInput
  contestUser: ContestUserUpdateOneRequiredInput
}

input ContestPredictionUpsertWithoutContestSlateEntryIdInput {
  update: ContestPredictionUpdateWithoutContestSlateEntryIdDataInput!
  create: ContestPredictionCreateWithoutContestSlateEntryIdInput!
}

input ContestPredictionUpsertWithoutPredictionResultInput {
  update: ContestPredictionUpdateWithoutPredictionResultDataInput!
  create: ContestPredictionCreateWithoutPredictionResultInput!
}

input ContestPredictionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestPredictionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestPredictionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestPredictionWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  homeScore: Int

  """All values that are not equal to given value."""
  homeScore_not: Int

  """All values that are contained in given list."""
  homeScore_in: [Int!]

  """All values that are not contained in given list."""
  homeScore_not_in: [Int!]

  """All values less than the given value."""
  homeScore_lt: Int

  """All values less than or equal the given value."""
  homeScore_lte: Int

  """All values greater than the given value."""
  homeScore_gt: Int

  """All values greater than or equal the given value."""
  homeScore_gte: Int
  awayScore: Int

  """All values that are not equal to given value."""
  awayScore_not: Int

  """All values that are contained in given list."""
  awayScore_in: [Int!]

  """All values that are not contained in given list."""
  awayScore_not_in: [Int!]

  """All values less than the given value."""
  awayScore_lt: Int

  """All values less than or equal the given value."""
  awayScore_lte: Int

  """All values greater than the given value."""
  awayScore_gt: Int

  """All values greater than or equal the given value."""
  awayScore_gte: Int
  expectedResult: String

  """All values that are not equal to given value."""
  expectedResult_not: String

  """All values that are contained in given list."""
  expectedResult_in: [String!]

  """All values that are not contained in given list."""
  expectedResult_not_in: [String!]

  """All values less than the given value."""
  expectedResult_lt: String

  """All values less than or equal the given value."""
  expectedResult_lte: String

  """All values greater than the given value."""
  expectedResult_gt: String

  """All values greater than or equal the given value."""
  expectedResult_gte: String

  """All values containing the given string."""
  expectedResult_contains: String

  """All values not containing the given string."""
  expectedResult_not_contains: String

  """All values starting with the given string."""
  expectedResult_starts_with: String

  """All values not starting with the given string."""
  expectedResult_not_starts_with: String

  """All values ending with the given string."""
  expectedResult_ends_with: String

  """All values not ending with the given string."""
  expectedResult_not_ends_with: String
  homeScoreMatches: Boolean

  """All values that are not equal to given value."""
  homeScoreMatches_not: Boolean
  awayScoreMatches: Boolean

  """All values that are not equal to given value."""
  awayScoreMatches_not: Boolean
  scoresMatch: Boolean

  """All values that are not equal to given value."""
  scoresMatch_not: Boolean
  resultMatches: Boolean

  """All values that are not equal to given value."""
  resultMatches_not: Boolean
  isBanker: Boolean

  """All values that are not equal to given value."""
  isBanker_not: Boolean
  hasFinished: Boolean

  """All values that are not equal to given value."""
  hasFinished_not: Boolean
  deadlineTime: DateTime

  """All values that are not equal to given value."""
  deadlineTime_not: DateTime

  """All values that are contained in given list."""
  deadlineTime_in: [DateTime!]

  """All values that are not contained in given list."""
  deadlineTime_not_in: [DateTime!]

  """All values less than the given value."""
  deadlineTime_lt: DateTime

  """All values less than or equal the given value."""
  deadlineTime_lte: DateTime

  """All values greater than the given value."""
  deadlineTime_gt: DateTime

  """All values greater than or equal the given value."""
  deadlineTime_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contestSlateEntryId: ContestSlateEntryWhereInput
  contestUser: ContestUserWhereInput
  predictionResult_every: ContestPredictionScoreWhereInput
  predictionResult_some: ContestPredictionScoreWhereInput
  predictionResult_none: ContestPredictionScoreWhereInput
}

input ContestPredictionWhereUniqueInput {
  id: Int
}

type ContestPreviousValues {
  id: ID!
  contestName: String!
  isActive: Boolean!
  isDefault: Boolean!
  isPublic: Boolean!
  invitationCode: String!
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean!
  playerLimit: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContestSlate {
  id: Int!
  contest: Contest!
  gameweekId: Gameweek
  fromDefault: Boolean!
  isActive: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  hasStarted: Boolean!
  hasFinished: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  entries(where: ContestSlateEntryWhereInput, orderBy: ContestSlateEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestSlateEntry!]
}

"""A connection to a list of items."""
type ContestSlateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestSlateEdge]!
  aggregate: AggregateContestSlate!
}

input ContestSlateCreateInput {
  fromDefault: Boolean!
  isActive: Boolean
  startDate: DateTime!
  endDate: DateTime!
  hasStarted: Boolean
  hasFinished: Boolean
  contest: ContestCreateOneInput!
  gameweekId: GameweekCreateOneInput
  entries: ContestSlateEntryCreateManyWithoutSlateInput
}

input ContestSlateCreateOneWithoutEntriesInput {
  create: ContestSlateCreateWithoutEntriesInput
  connect: ContestSlateWhereUniqueInput
}

input ContestSlateCreateWithoutEntriesInput {
  fromDefault: Boolean!
  isActive: Boolean
  startDate: DateTime!
  endDate: DateTime!
  hasStarted: Boolean
  hasFinished: Boolean
  contest: ContestCreateOneInput!
  gameweekId: GameweekCreateOneInput
}

"""An edge in a connection."""
type ContestSlateEdge {
  """The item at the end of the edge."""
  node: ContestSlate!

  """A cursor for use in pagination."""
  cursor: String!
}

type ContestSlateEntry {
  id: Int!
  slate: ContestSlate!
  prediction: ContestPrediction!
  fixture: Fixture!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContestSlateEntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestSlateEntryEdge]!
  aggregate: AggregateContestSlateEntry!
}

input ContestSlateEntryCreateInput {
  slate: ContestSlateCreateOneWithoutEntriesInput!
  prediction: ContestPredictionCreateOneWithoutContestSlateEntryIdInput!
  fixture: FixtureCreateOneInput!
}

input ContestSlateEntryCreateManyWithoutSlateInput {
  create: [ContestSlateEntryCreateWithoutSlateInput!]
  connect: [ContestSlateEntryWhereUniqueInput!]
}

input ContestSlateEntryCreateOneWithoutPredictionInput {
  create: ContestSlateEntryCreateWithoutPredictionInput
  connect: ContestSlateEntryWhereUniqueInput
}

input ContestSlateEntryCreateWithoutPredictionInput {
  slate: ContestSlateCreateOneWithoutEntriesInput!
  fixture: FixtureCreateOneInput!
}

input ContestSlateEntryCreateWithoutSlateInput {
  prediction: ContestPredictionCreateOneWithoutContestSlateEntryIdInput!
  fixture: FixtureCreateOneInput!
}

"""An edge in a connection."""
type ContestSlateEntryEdge {
  """The item at the end of the edge."""
  node: ContestSlateEntry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestSlateEntryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestSlateEntryPreviousValues {
  id: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ContestSlateEntryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestSlateEntryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestSlateEntryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestSlateEntryScalarWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ContestSlateEntrySubscriptionPayload {
  mutation: MutationType!
  node: ContestSlateEntry
  updatedFields: [String!]
  previousValues: ContestSlateEntryPreviousValues
}

input ContestSlateEntrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestSlateEntrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestSlateEntrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestSlateEntrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestSlateEntryWhereInput
}

input ContestSlateEntryUpdateInput {
  slate: ContestSlateUpdateOneRequiredWithoutEntriesInput
  prediction: ContestPredictionUpdateOneRequiredWithoutContestSlateEntryIdInput
  fixture: FixtureUpdateOneRequiredInput
}

input ContestSlateEntryUpdateManyWithoutSlateInput {
  create: [ContestSlateEntryCreateWithoutSlateInput!]
  connect: [ContestSlateEntryWhereUniqueInput!]
  set: [ContestSlateEntryWhereUniqueInput!]
  disconnect: [ContestSlateEntryWhereUniqueInput!]
  delete: [ContestSlateEntryWhereUniqueInput!]
  update: [ContestSlateEntryUpdateWithWhereUniqueWithoutSlateInput!]
  deleteMany: [ContestSlateEntryScalarWhereInput!]
  upsert: [ContestSlateEntryUpsertWithWhereUniqueWithoutSlateInput!]
}

input ContestSlateEntryUpdateOneRequiredWithoutPredictionInput {
  create: ContestSlateEntryCreateWithoutPredictionInput
  connect: ContestSlateEntryWhereUniqueInput
  update: ContestSlateEntryUpdateWithoutPredictionDataInput
  upsert: ContestSlateEntryUpsertWithoutPredictionInput
}

input ContestSlateEntryUpdateWithoutPredictionDataInput {
  slate: ContestSlateUpdateOneRequiredWithoutEntriesInput
  fixture: FixtureUpdateOneRequiredInput
}

input ContestSlateEntryUpdateWithoutSlateDataInput {
  prediction: ContestPredictionUpdateOneRequiredWithoutContestSlateEntryIdInput
  fixture: FixtureUpdateOneRequiredInput
}

input ContestSlateEntryUpdateWithWhereUniqueWithoutSlateInput {
  where: ContestSlateEntryWhereUniqueInput!
  data: ContestSlateEntryUpdateWithoutSlateDataInput!
}

input ContestSlateEntryUpsertWithoutPredictionInput {
  update: ContestSlateEntryUpdateWithoutPredictionDataInput!
  create: ContestSlateEntryCreateWithoutPredictionInput!
}

input ContestSlateEntryUpsertWithWhereUniqueWithoutSlateInput {
  where: ContestSlateEntryWhereUniqueInput!
  update: ContestSlateEntryUpdateWithoutSlateDataInput!
  create: ContestSlateEntryCreateWithoutSlateInput!
}

input ContestSlateEntryWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestSlateEntryWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestSlateEntryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestSlateEntryWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  slate: ContestSlateWhereInput
  prediction: ContestPredictionWhereInput
  fixture: FixtureWhereInput
}

input ContestSlateEntryWhereUniqueInput {
  id: Int
}

enum ContestSlateOrderByInput {
  id_ASC
  id_DESC
  fromDefault_ASC
  fromDefault_DESC
  isActive_ASC
  isActive_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  hasStarted_ASC
  hasStarted_DESC
  hasFinished_ASC
  hasFinished_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestSlatePreviousValues {
  id: Int!
  fromDefault: Boolean!
  isActive: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  hasStarted: Boolean!
  hasFinished: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContestSlateSubscriptionPayload {
  mutation: MutationType!
  node: ContestSlate
  updatedFields: [String!]
  previousValues: ContestSlatePreviousValues
}

input ContestSlateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestSlateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestSlateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestSlateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestSlateWhereInput
}

input ContestSlateUpdateInput {
  fromDefault: Boolean
  isActive: Boolean
  startDate: DateTime
  endDate: DateTime
  hasStarted: Boolean
  hasFinished: Boolean
  contest: ContestUpdateOneRequiredInput
  gameweekId: GameweekUpdateOneInput
  entries: ContestSlateEntryUpdateManyWithoutSlateInput
}

input ContestSlateUpdateManyMutationInput {
  fromDefault: Boolean
  isActive: Boolean
  startDate: DateTime
  endDate: DateTime
  hasStarted: Boolean
  hasFinished: Boolean
}

input ContestSlateUpdateOneRequiredWithoutEntriesInput {
  create: ContestSlateCreateWithoutEntriesInput
  connect: ContestSlateWhereUniqueInput
  update: ContestSlateUpdateWithoutEntriesDataInput
  upsert: ContestSlateUpsertWithoutEntriesInput
}

input ContestSlateUpdateWithoutEntriesDataInput {
  fromDefault: Boolean
  isActive: Boolean
  startDate: DateTime
  endDate: DateTime
  hasStarted: Boolean
  hasFinished: Boolean
  contest: ContestUpdateOneRequiredInput
  gameweekId: GameweekUpdateOneInput
}

input ContestSlateUpsertWithoutEntriesInput {
  update: ContestSlateUpdateWithoutEntriesDataInput!
  create: ContestSlateCreateWithoutEntriesInput!
}

input ContestSlateWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestSlateWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestSlateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestSlateWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  fromDefault: Boolean

  """All values that are not equal to given value."""
  fromDefault_not: Boolean
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  hasStarted: Boolean

  """All values that are not equal to given value."""
  hasStarted_not: Boolean
  hasFinished: Boolean

  """All values that are not equal to given value."""
  hasFinished_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contest: ContestWhereInput
  gameweekId: GameweekWhereInput
  entries_every: ContestSlateEntryWhereInput
  entries_some: ContestSlateEntryWhereInput
  entries_none: ContestSlateEntryWhereInput
}

input ContestSlateWhereUniqueInput {
  id: Int
}

type ContestSubscriptionPayload {
  mutation: MutationType!
  node: Contest
  updatedFields: [String!]
  previousValues: ContestPreviousValues
}

input ContestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestWhereInput
}

type ContestType implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContestTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestTypeEdge]!
  aggregate: AggregateContestType!
}

input ContestTypeCreateInput {
  id: ID
  name: String!
}

input ContestTypeCreateOneInput {
  create: ContestTypeCreateInput
  connect: ContestTypeWhereUniqueInput
}

"""An edge in a connection."""
type ContestTypeEdge {
  """The item at the end of the edge."""
  node: ContestType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestTypePreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContestTypeSubscriptionPayload {
  mutation: MutationType!
  node: ContestType
  updatedFields: [String!]
  previousValues: ContestTypePreviousValues
}

input ContestTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestTypeWhereInput
}

input ContestTypeUpdateDataInput {
  name: String
}

input ContestTypeUpdateInput {
  name: String
}

input ContestTypeUpdateManyMutationInput {
  name: String
}

input ContestTypeUpdateOneRequiredInput {
  create: ContestTypeCreateInput
  connect: ContestTypeWhereUniqueInput
  update: ContestTypeUpdateDataInput
  upsert: ContestTypeUpsertNestedInput
}

input ContestTypeUpsertNestedInput {
  update: ContestTypeUpdateDataInput!
  create: ContestTypeCreateInput!
}

input ContestTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input ContestTypeWhereUniqueInput {
  id: ID
  name: String
}

input ContestUpdateDataInput {
  contestName: String
  isActive: Boolean
  isDefault: Boolean
  isPublic: Boolean
  invitationCode: String
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean
  playerLimit: Int
  createdBy: ContestCreatorUpdateOneRequiredInput
  currentOwner: ContestOwnerUpdateOneRequiredInput
  contestTypeId: ContestTypeUpdateOneRequiredInput
  users: ContestUserUpdateManyWithoutContestInput
  scoringSystem: ScoringSystemHeaderUpdateOneRequiredWithoutContestInput
}

input ContestUpdateInput {
  contestName: String
  isActive: Boolean
  isDefault: Boolean
  isPublic: Boolean
  invitationCode: String
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean
  playerLimit: Int
  createdBy: ContestCreatorUpdateOneRequiredInput
  currentOwner: ContestOwnerUpdateOneRequiredInput
  contestTypeId: ContestTypeUpdateOneRequiredInput
  users: ContestUserUpdateManyWithoutContestInput
  scoringSystem: ScoringSystemHeaderUpdateOneRequiredWithoutContestInput
}

input ContestUpdateManyMutationInput {
  contestName: String
  isActive: Boolean
  isDefault: Boolean
  isPublic: Boolean
  invitationCode: String
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean
  playerLimit: Int
}

input ContestUpdateOneRequiredInput {
  create: ContestCreateInput
  connect: ContestWhereUniqueInput
  update: ContestUpdateDataInput
  upsert: ContestUpsertNestedInput
}

input ContestUpdateOneRequiredWithoutScoringSystemInput {
  create: ContestCreateWithoutScoringSystemInput
  connect: ContestWhereUniqueInput
  update: ContestUpdateWithoutScoringSystemDataInput
  upsert: ContestUpsertWithoutScoringSystemInput
}

input ContestUpdateOneRequiredWithoutUsersInput {
  create: ContestCreateWithoutUsersInput
  connect: ContestWhereUniqueInput
  update: ContestUpdateWithoutUsersDataInput
  upsert: ContestUpsertWithoutUsersInput
}

input ContestUpdateWithoutScoringSystemDataInput {
  contestName: String
  isActive: Boolean
  isDefault: Boolean
  isPublic: Boolean
  invitationCode: String
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean
  playerLimit: Int
  createdBy: ContestCreatorUpdateOneRequiredInput
  currentOwner: ContestOwnerUpdateOneRequiredInput
  contestTypeId: ContestTypeUpdateOneRequiredInput
  users: ContestUserUpdateManyWithoutContestInput
}

input ContestUpdateWithoutUsersDataInput {
  contestName: String
  isActive: Boolean
  isDefault: Boolean
  isPublic: Boolean
  invitationCode: String
  startDate: DateTime
  endDate: DateTime
  nextEvent: Int
  currentEvent: Int
  totalEvents: Int
  isPremium: Boolean
  playerLimit: Int
  createdBy: ContestCreatorUpdateOneRequiredInput
  currentOwner: ContestOwnerUpdateOneRequiredInput
  contestTypeId: ContestTypeUpdateOneRequiredInput
  scoringSystem: ScoringSystemHeaderUpdateOneRequiredWithoutContestInput
}

input ContestUpsertNestedInput {
  update: ContestUpdateDataInput!
  create: ContestCreateInput!
}

input ContestUpsertWithoutScoringSystemInput {
  update: ContestUpdateWithoutScoringSystemDataInput!
  create: ContestCreateWithoutScoringSystemInput!
}

input ContestUpsertWithoutUsersInput {
  update: ContestUpdateWithoutUsersDataInput!
  create: ContestCreateWithoutUsersInput!
}

type ContestUser {
  id: Int!
  contest: Contest!
  userType: ContestUserType!
  user: User!
  isInvited: Boolean!
  isActive: Boolean!
  isBlocked: Boolean!
  balance: Int!
  invitedBy: ContestInviter
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContestUserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestUserEdge]!
  aggregate: AggregateContestUser!
}

input ContestUserCreateInput {
  isInvited: Boolean
  isActive: Boolean
  isBlocked: Boolean
  balance: Int
  contest: ContestCreateOneWithoutUsersInput!
  userType: ContestUserTypeCreateOneInput!
  user: UserCreateOneInput!
  invitedBy: ContestInviterCreateOneInput
}

input ContestUserCreateManyWithoutContestInput {
  create: [ContestUserCreateWithoutContestInput!]
  connect: [ContestUserWhereUniqueInput!]
}

input ContestUserCreateOneInput {
  create: ContestUserCreateInput
  connect: ContestUserWhereUniqueInput
}

input ContestUserCreateWithoutContestInput {
  isInvited: Boolean
  isActive: Boolean
  isBlocked: Boolean
  balance: Int
  userType: ContestUserTypeCreateOneInput!
  user: UserCreateOneInput!
  invitedBy: ContestInviterCreateOneInput
}

"""An edge in a connection."""
type ContestUserEdge {
  """The item at the end of the edge."""
  node: ContestUser!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestUserOrderByInput {
  id_ASC
  id_DESC
  isInvited_ASC
  isInvited_DESC
  isActive_ASC
  isActive_DESC
  isBlocked_ASC
  isBlocked_DESC
  balance_ASC
  balance_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestUserPreviousValues {
  id: Int!
  isInvited: Boolean!
  isActive: Boolean!
  isBlocked: Boolean!
  balance: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ContestUserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestUserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestUserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestUserScalarWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  isInvited: Boolean

  """All values that are not equal to given value."""
  isInvited_not: Boolean
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isBlocked: Boolean

  """All values that are not equal to given value."""
  isBlocked_not: Boolean
  balance: Int

  """All values that are not equal to given value."""
  balance_not: Int

  """All values that are contained in given list."""
  balance_in: [Int!]

  """All values that are not contained in given list."""
  balance_not_in: [Int!]

  """All values less than the given value."""
  balance_lt: Int

  """All values less than or equal the given value."""
  balance_lte: Int

  """All values greater than the given value."""
  balance_gt: Int

  """All values greater than or equal the given value."""
  balance_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ContestUserSubscriptionPayload {
  mutation: MutationType!
  node: ContestUser
  updatedFields: [String!]
  previousValues: ContestUserPreviousValues
}

input ContestUserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestUserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestUserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestUserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestUserWhereInput
}

type ContestUserType implements Node {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ContestUserTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ContestUserTypeEdge]!
  aggregate: AggregateContestUserType!
}

input ContestUserTypeCreateInput {
  id: ID
  name: String!
  description: String
}

input ContestUserTypeCreateOneInput {
  create: ContestUserTypeCreateInput
  connect: ContestUserTypeWhereUniqueInput
}

"""An edge in a connection."""
type ContestUserTypeEdge {
  """The item at the end of the edge."""
  node: ContestUserType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ContestUserTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContestUserTypePreviousValues {
  id: ID!
  name: String!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContestUserTypeSubscriptionPayload {
  mutation: MutationType!
  node: ContestUserType
  updatedFields: [String!]
  previousValues: ContestUserTypePreviousValues
}

input ContestUserTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestUserTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestUserTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestUserTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContestUserTypeWhereInput
}

input ContestUserTypeUpdateDataInput {
  name: String
  description: String
}

input ContestUserTypeUpdateInput {
  name: String
  description: String
}

input ContestUserTypeUpdateManyMutationInput {
  name: String
  description: String
}

input ContestUserTypeUpdateOneRequiredInput {
  create: ContestUserTypeCreateInput
  connect: ContestUserTypeWhereUniqueInput
  update: ContestUserTypeUpdateDataInput
  upsert: ContestUserTypeUpsertNestedInput
}

input ContestUserTypeUpsertNestedInput {
  update: ContestUserTypeUpdateDataInput!
  create: ContestUserTypeCreateInput!
}

input ContestUserTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestUserTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestUserTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestUserTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input ContestUserTypeWhereUniqueInput {
  id: ID
}

input ContestUserUpdateDataInput {
  isInvited: Boolean
  isActive: Boolean
  isBlocked: Boolean
  balance: Int
  contest: ContestUpdateOneRequiredWithoutUsersInput
  userType: ContestUserTypeUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  invitedBy: ContestInviterUpdateOneInput
}

input ContestUserUpdateInput {
  isInvited: Boolean
  isActive: Boolean
  isBlocked: Boolean
  balance: Int
  contest: ContestUpdateOneRequiredWithoutUsersInput
  userType: ContestUserTypeUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  invitedBy: ContestInviterUpdateOneInput
}

input ContestUserUpdateManyDataInput {
  isInvited: Boolean
  isActive: Boolean
  isBlocked: Boolean
  balance: Int
}

input ContestUserUpdateManyMutationInput {
  isInvited: Boolean
  isActive: Boolean
  isBlocked: Boolean
  balance: Int
}

input ContestUserUpdateManyWithoutContestInput {
  create: [ContestUserCreateWithoutContestInput!]
  connect: [ContestUserWhereUniqueInput!]
  set: [ContestUserWhereUniqueInput!]
  disconnect: [ContestUserWhereUniqueInput!]
  delete: [ContestUserWhereUniqueInput!]
  update: [ContestUserUpdateWithWhereUniqueWithoutContestInput!]
  updateMany: [ContestUserUpdateManyWithWhereNestedInput!]
  deleteMany: [ContestUserScalarWhereInput!]
  upsert: [ContestUserUpsertWithWhereUniqueWithoutContestInput!]
}

input ContestUserUpdateManyWithWhereNestedInput {
  where: ContestUserScalarWhereInput!
  data: ContestUserUpdateManyDataInput!
}

input ContestUserUpdateOneRequiredInput {
  create: ContestUserCreateInput
  connect: ContestUserWhereUniqueInput
  update: ContestUserUpdateDataInput
  upsert: ContestUserUpsertNestedInput
}

input ContestUserUpdateWithoutContestDataInput {
  isInvited: Boolean
  isActive: Boolean
  isBlocked: Boolean
  balance: Int
  userType: ContestUserTypeUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  invitedBy: ContestInviterUpdateOneInput
}

input ContestUserUpdateWithWhereUniqueWithoutContestInput {
  where: ContestUserWhereUniqueInput!
  data: ContestUserUpdateWithoutContestDataInput!
}

input ContestUserUpsertNestedInput {
  update: ContestUserUpdateDataInput!
  create: ContestUserCreateInput!
}

input ContestUserUpsertWithWhereUniqueWithoutContestInput {
  where: ContestUserWhereUniqueInput!
  update: ContestUserUpdateWithoutContestDataInput!
  create: ContestUserCreateWithoutContestInput!
}

input ContestUserWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestUserWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestUserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestUserWhereInput!]
  id: Int

  """All values that are not equal to given value."""
  id_not: Int

  """All values that are contained in given list."""
  id_in: [Int!]

  """All values that are not contained in given list."""
  id_not_in: [Int!]

  """All values less than the given value."""
  id_lt: Int

  """All values less than or equal the given value."""
  id_lte: Int

  """All values greater than the given value."""
  id_gt: Int

  """All values greater than or equal the given value."""
  id_gte: Int
  isInvited: Boolean

  """All values that are not equal to given value."""
  isInvited_not: Boolean
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isBlocked: Boolean

  """All values that are not equal to given value."""
  isBlocked_not: Boolean
  balance: Int

  """All values that are not equal to given value."""
  balance_not: Int

  """All values that are contained in given list."""
  balance_in: [Int!]

  """All values that are not contained in given list."""
  balance_not_in: [Int!]

  """All values less than the given value."""
  balance_lt: Int

  """All values less than or equal the given value."""
  balance_lte: Int

  """All values greater than the given value."""
  balance_gt: Int

  """All values greater than or equal the given value."""
  balance_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contest: ContestWhereInput
  userType: ContestUserTypeWhereInput
  user: UserWhereInput
  invitedBy: ContestInviterWhereInput
}

input ContestUserWhereUniqueInput {
  id: Int
}

input ContestWhereInput {
  """Logical AND on all given filters."""
  AND: [ContestWhereInput!]

  """Logical OR on all given filters."""
  OR: [ContestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ContestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  contestName: String

  """All values that are not equal to given value."""
  contestName_not: String

  """All values that are contained in given list."""
  contestName_in: [String!]

  """All values that are not contained in given list."""
  contestName_not_in: [String!]

  """All values less than the given value."""
  contestName_lt: String

  """All values less than or equal the given value."""
  contestName_lte: String

  """All values greater than the given value."""
  contestName_gt: String

  """All values greater than or equal the given value."""
  contestName_gte: String

  """All values containing the given string."""
  contestName_contains: String

  """All values not containing the given string."""
  contestName_not_contains: String

  """All values starting with the given string."""
  contestName_starts_with: String

  """All values not starting with the given string."""
  contestName_not_starts_with: String

  """All values ending with the given string."""
  contestName_ends_with: String

  """All values not ending with the given string."""
  contestName_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isDefault: Boolean

  """All values that are not equal to given value."""
  isDefault_not: Boolean
  isPublic: Boolean

  """All values that are not equal to given value."""
  isPublic_not: Boolean
  invitationCode: String

  """All values that are not equal to given value."""
  invitationCode_not: String

  """All values that are contained in given list."""
  invitationCode_in: [String!]

  """All values that are not contained in given list."""
  invitationCode_not_in: [String!]

  """All values less than the given value."""
  invitationCode_lt: String

  """All values less than or equal the given value."""
  invitationCode_lte: String

  """All values greater than the given value."""
  invitationCode_gt: String

  """All values greater than or equal the given value."""
  invitationCode_gte: String

  """All values containing the given string."""
  invitationCode_contains: String

  """All values not containing the given string."""
  invitationCode_not_contains: String

  """All values starting with the given string."""
  invitationCode_starts_with: String

  """All values not starting with the given string."""
  invitationCode_not_starts_with: String

  """All values ending with the given string."""
  invitationCode_ends_with: String

  """All values not ending with the given string."""
  invitationCode_not_ends_with: String
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  nextEvent: Int

  """All values that are not equal to given value."""
  nextEvent_not: Int

  """All values that are contained in given list."""
  nextEvent_in: [Int!]

  """All values that are not contained in given list."""
  nextEvent_not_in: [Int!]

  """All values less than the given value."""
  nextEvent_lt: Int

  """All values less than or equal the given value."""
  nextEvent_lte: Int

  """All values greater than the given value."""
  nextEvent_gt: Int

  """All values greater than or equal the given value."""
  nextEvent_gte: Int
  currentEvent: Int

  """All values that are not equal to given value."""
  currentEvent_not: Int

  """All values that are contained in given list."""
  currentEvent_in: [Int!]

  """All values that are not contained in given list."""
  currentEvent_not_in: [Int!]

  """All values less than the given value."""
  currentEvent_lt: Int

  """All values less than or equal the given value."""
  currentEvent_lte: Int

  """All values greater than the given value."""
  currentEvent_gt: Int

  """All values greater than or equal the given value."""
  currentEvent_gte: Int
  totalEvents: Int

  """All values that are not equal to given value."""
  totalEvents_not: Int

  """All values that are contained in given list."""
  totalEvents_in: [Int!]

  """All values that are not contained in given list."""
  totalEvents_not_in: [Int!]

  """All values less than the given value."""
  totalEvents_lt: Int

  """All values less than or equal the given value."""
  totalEvents_lte: Int

  """All values greater than the given value."""
  totalEvents_gt: Int

  """All values greater than or equal the given value."""
  totalEvents_gte: Int
  isPremium: Boolean

  """All values that are not equal to given value."""
  isPremium_not: Boolean
  playerLimit: Int

  """All values that are not equal to given value."""
  playerLimit_not: Int

  """All values that are contained in given list."""
  playerLimit_in: [Int!]

  """All values that are not contained in given list."""
  playerLimit_not_in: [Int!]

  """All values less than the given value."""
  playerLimit_lt: Int

  """All values less than or equal the given value."""
  playerLimit_lte: Int

  """All values greater than the given value."""
  playerLimit_gt: Int

  """All values greater than or equal the given value."""
  playerLimit_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdBy: ContestCreatorWhereInput
  currentOwner: ContestOwnerWhereInput
  contestTypeId: ContestTypeWhereInput
  users_every: ContestUserWhereInput
  users_some: ContestUserWhereInput
  users_none: ContestUserWhereInput
  scoringSystem: ScoringSystemHeaderWhereInput
}

input ContestWhereUniqueInput {
  id: ID
  invitationCode: String
}

type Country implements Node {
  id: ID!
  iso: String!
  name: String!
  code: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CountryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  id: ID
  iso: String!
  name: String!
  code: String!
}

input CountryCreateOneInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

"""An edge in a connection."""
type CountryEdge {
  """The item at the end of the edge."""
  node: Country!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  iso_ASC
  iso_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CountryPreviousValues {
  id: ID!
  iso: String!
  name: String!
  code: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CountrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
}

input CountryUpdateDataInput {
  iso: String
  name: String
  code: String
}

input CountryUpdateInput {
  iso: String
  name: String
  code: String
}

input CountryUpdateManyMutationInput {
  iso: String
  name: String
  code: String
}

input CountryUpdateOneInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CountryUpdateDataInput
  upsert: CountryUpsertNestedInput
}

input CountryUpsertNestedInput {
  update: CountryUpdateDataInput!
  create: CountryCreateInput!
}

input CountryWhereInput {
  """Logical AND on all given filters."""
  AND: [CountryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  iso: String

  """All values that are not equal to given value."""
  iso_not: String

  """All values that are contained in given list."""
  iso_in: [String!]

  """All values that are not contained in given list."""
  iso_not_in: [String!]

  """All values less than the given value."""
  iso_lt: String

  """All values less than or equal the given value."""
  iso_lte: String

  """All values greater than the given value."""
  iso_gt: String

  """All values greater than or equal the given value."""
  iso_gte: String

  """All values containing the given string."""
  iso_contains: String

  """All values not containing the given string."""
  iso_not_contains: String

  """All values starting with the given string."""
  iso_starts_with: String

  """All values not starting with the given string."""
  iso_not_starts_with: String

  """All values ending with the given string."""
  iso_ends_with: String

  """All values not ending with the given string."""
  iso_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input CountryWhereUniqueInput {
  id: ID
}

scalar DateTime

type DefaultScoringSystemDetail implements Node {
  id: ID!
  scoringSystem: DefaultScoringSystemHeader!
  name: String!
  description: String!
  scoringType: ScoringType!
  isActive: Boolean!
  isDefault: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  points: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DefaultScoringSystemDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DefaultScoringSystemDetailEdge]!
  aggregate: AggregateDefaultScoringSystemDetail!
}

input DefaultScoringSystemDetailCreateInput {
  id: ID
  name: String!
  description: String!
  isActive: Boolean!
  isDefault: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  points: Int!
  scoringSystem: DefaultScoringSystemHeaderCreateOneWithoutSystemDetailInput!
  scoringType: ScoringTypeCreateOneInput!
}

input DefaultScoringSystemDetailCreateManyWithoutScoringSystemInput {
  create: [DefaultScoringSystemDetailCreateWithoutScoringSystemInput!]
  connect: [DefaultScoringSystemDetailWhereUniqueInput!]
}

input DefaultScoringSystemDetailCreateOneInput {
  create: DefaultScoringSystemDetailCreateInput
  connect: DefaultScoringSystemDetailWhereUniqueInput
}

input DefaultScoringSystemDetailCreateWithoutScoringSystemInput {
  id: ID
  name: String!
  description: String!
  isActive: Boolean!
  isDefault: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  points: Int!
  scoringType: ScoringTypeCreateOneInput!
}

"""An edge in a connection."""
type DefaultScoringSystemDetailEdge {
  """The item at the end of the edge."""
  node: DefaultScoringSystemDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DefaultScoringSystemDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  isDefault_ASC
  isDefault_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  points_ASC
  points_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DefaultScoringSystemDetailPreviousValues {
  id: ID!
  name: String!
  description: String!
  isActive: Boolean!
  isDefault: Boolean!
  startDate: DateTime!
  endDate: DateTime!
  points: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input DefaultScoringSystemDetailScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [DefaultScoringSystemDetailScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [DefaultScoringSystemDetailScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DefaultScoringSystemDetailScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isDefault: Boolean

  """All values that are not equal to given value."""
  isDefault_not: Boolean
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  points: Int

  """All values that are not equal to given value."""
  points_not: Int

  """All values that are contained in given list."""
  points_in: [Int!]

  """All values that are not contained in given list."""
  points_not_in: [Int!]

  """All values less than the given value."""
  points_lt: Int

  """All values less than or equal the given value."""
  points_lte: Int

  """All values greater than the given value."""
  points_gt: Int

  """All values greater than or equal the given value."""
  points_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type DefaultScoringSystemDetailSubscriptionPayload {
  mutation: MutationType!
  node: DefaultScoringSystemDetail
  updatedFields: [String!]
  previousValues: DefaultScoringSystemDetailPreviousValues
}

input DefaultScoringSystemDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DefaultScoringSystemDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DefaultScoringSystemDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DefaultScoringSystemDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DefaultScoringSystemDetailWhereInput
}

input DefaultScoringSystemDetailUpdateDataInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
  scoringSystem: DefaultScoringSystemHeaderUpdateOneRequiredWithoutSystemDetailInput
  scoringType: ScoringTypeUpdateOneRequiredInput
}

input DefaultScoringSystemDetailUpdateInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
  scoringSystem: DefaultScoringSystemHeaderUpdateOneRequiredWithoutSystemDetailInput
  scoringType: ScoringTypeUpdateOneRequiredInput
}

input DefaultScoringSystemDetailUpdateManyDataInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
}

input DefaultScoringSystemDetailUpdateManyMutationInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
}

input DefaultScoringSystemDetailUpdateManyWithoutScoringSystemInput {
  create: [DefaultScoringSystemDetailCreateWithoutScoringSystemInput!]
  connect: [DefaultScoringSystemDetailWhereUniqueInput!]
  set: [DefaultScoringSystemDetailWhereUniqueInput!]
  disconnect: [DefaultScoringSystemDetailWhereUniqueInput!]
  delete: [DefaultScoringSystemDetailWhereUniqueInput!]
  update: [DefaultScoringSystemDetailUpdateWithWhereUniqueWithoutScoringSystemInput!]
  updateMany: [DefaultScoringSystemDetailUpdateManyWithWhereNestedInput!]
  deleteMany: [DefaultScoringSystemDetailScalarWhereInput!]
  upsert: [DefaultScoringSystemDetailUpsertWithWhereUniqueWithoutScoringSystemInput!]
}

input DefaultScoringSystemDetailUpdateManyWithWhereNestedInput {
  where: DefaultScoringSystemDetailScalarWhereInput!
  data: DefaultScoringSystemDetailUpdateManyDataInput!
}

input DefaultScoringSystemDetailUpdateOneRequiredInput {
  create: DefaultScoringSystemDetailCreateInput
  connect: DefaultScoringSystemDetailWhereUniqueInput
  update: DefaultScoringSystemDetailUpdateDataInput
  upsert: DefaultScoringSystemDetailUpsertNestedInput
}

input DefaultScoringSystemDetailUpdateWithoutScoringSystemDataInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
  scoringType: ScoringTypeUpdateOneRequiredInput
}

input DefaultScoringSystemDetailUpdateWithWhereUniqueWithoutScoringSystemInput {
  where: DefaultScoringSystemDetailWhereUniqueInput!
  data: DefaultScoringSystemDetailUpdateWithoutScoringSystemDataInput!
}

input DefaultScoringSystemDetailUpsertNestedInput {
  update: DefaultScoringSystemDetailUpdateDataInput!
  create: DefaultScoringSystemDetailCreateInput!
}

input DefaultScoringSystemDetailUpsertWithWhereUniqueWithoutScoringSystemInput {
  where: DefaultScoringSystemDetailWhereUniqueInput!
  update: DefaultScoringSystemDetailUpdateWithoutScoringSystemDataInput!
  create: DefaultScoringSystemDetailCreateWithoutScoringSystemInput!
}

input DefaultScoringSystemDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [DefaultScoringSystemDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [DefaultScoringSystemDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DefaultScoringSystemDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isDefault: Boolean

  """All values that are not equal to given value."""
  isDefault_not: Boolean
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  points: Int

  """All values that are not equal to given value."""
  points_not: Int

  """All values that are contained in given list."""
  points_in: [Int!]

  """All values that are not contained in given list."""
  points_not_in: [Int!]

  """All values less than the given value."""
  points_lt: Int

  """All values less than or equal the given value."""
  points_lte: Int

  """All values greater than the given value."""
  points_gt: Int

  """All values greater than or equal the given value."""
  points_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  scoringSystem: DefaultScoringSystemHeaderWhereInput
  scoringType: ScoringTypeWhereInput
}

input DefaultScoringSystemDetailWhereUniqueInput {
  id: ID
}

type DefaultScoringSystemHeader implements Node {
  id: ID!
  name: String!
  description: String
  isCustom: Boolean!
  systemDetail(where: DefaultScoringSystemDetailWhereInput, orderBy: DefaultScoringSystemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DefaultScoringSystemDetail!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DefaultScoringSystemHeaderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DefaultScoringSystemHeaderEdge]!
  aggregate: AggregateDefaultScoringSystemHeader!
}

input DefaultScoringSystemHeaderCreateInput {
  id: ID
  name: String!
  description: String
  isCustom: Boolean
  systemDetail: DefaultScoringSystemDetailCreateManyWithoutScoringSystemInput
}

input DefaultScoringSystemHeaderCreateOneInput {
  create: DefaultScoringSystemHeaderCreateInput
  connect: DefaultScoringSystemHeaderWhereUniqueInput
}

input DefaultScoringSystemHeaderCreateOneWithoutSystemDetailInput {
  create: DefaultScoringSystemHeaderCreateWithoutSystemDetailInput
  connect: DefaultScoringSystemHeaderWhereUniqueInput
}

input DefaultScoringSystemHeaderCreateWithoutSystemDetailInput {
  id: ID
  name: String!
  description: String
  isCustom: Boolean
}

"""An edge in a connection."""
type DefaultScoringSystemHeaderEdge {
  """The item at the end of the edge."""
  node: DefaultScoringSystemHeader!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DefaultScoringSystemHeaderOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isCustom_ASC
  isCustom_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DefaultScoringSystemHeaderPreviousValues {
  id: ID!
  name: String!
  description: String
  isCustom: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DefaultScoringSystemHeaderSubscriptionPayload {
  mutation: MutationType!
  node: DefaultScoringSystemHeader
  updatedFields: [String!]
  previousValues: DefaultScoringSystemHeaderPreviousValues
}

input DefaultScoringSystemHeaderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DefaultScoringSystemHeaderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DefaultScoringSystemHeaderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DefaultScoringSystemHeaderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DefaultScoringSystemHeaderWhereInput
}

input DefaultScoringSystemHeaderUpdateDataInput {
  name: String
  description: String
  isCustom: Boolean
  systemDetail: DefaultScoringSystemDetailUpdateManyWithoutScoringSystemInput
}

input DefaultScoringSystemHeaderUpdateInput {
  name: String
  description: String
  isCustom: Boolean
  systemDetail: DefaultScoringSystemDetailUpdateManyWithoutScoringSystemInput
}

input DefaultScoringSystemHeaderUpdateManyMutationInput {
  name: String
  description: String
  isCustom: Boolean
}

input DefaultScoringSystemHeaderUpdateOneInput {
  create: DefaultScoringSystemHeaderCreateInput
  connect: DefaultScoringSystemHeaderWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: DefaultScoringSystemHeaderUpdateDataInput
  upsert: DefaultScoringSystemHeaderUpsertNestedInput
}

input DefaultScoringSystemHeaderUpdateOneRequiredWithoutSystemDetailInput {
  create: DefaultScoringSystemHeaderCreateWithoutSystemDetailInput
  connect: DefaultScoringSystemHeaderWhereUniqueInput
  update: DefaultScoringSystemHeaderUpdateWithoutSystemDetailDataInput
  upsert: DefaultScoringSystemHeaderUpsertWithoutSystemDetailInput
}

input DefaultScoringSystemHeaderUpdateWithoutSystemDetailDataInput {
  name: String
  description: String
  isCustom: Boolean
}

input DefaultScoringSystemHeaderUpsertNestedInput {
  update: DefaultScoringSystemHeaderUpdateDataInput!
  create: DefaultScoringSystemHeaderCreateInput!
}

input DefaultScoringSystemHeaderUpsertWithoutSystemDetailInput {
  update: DefaultScoringSystemHeaderUpdateWithoutSystemDetailDataInput!
  create: DefaultScoringSystemHeaderCreateWithoutSystemDetailInput!
}

input DefaultScoringSystemHeaderWhereInput {
  """Logical AND on all given filters."""
  AND: [DefaultScoringSystemHeaderWhereInput!]

  """Logical OR on all given filters."""
  OR: [DefaultScoringSystemHeaderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DefaultScoringSystemHeaderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isCustom: Boolean

  """All values that are not equal to given value."""
  isCustom_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  systemDetail_every: DefaultScoringSystemDetailWhereInput
  systemDetail_some: DefaultScoringSystemDetailWhereInput
  systemDetail_none: DefaultScoringSystemDetailWhereInput
}

input DefaultScoringSystemHeaderWhereUniqueInput {
  id: ID
}

type FandemSubscription implements Node {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FandemSubscriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FandemSubscriptionEdge]!
  aggregate: AggregateFandemSubscription!
}

input FandemSubscriptionCreateInput {
  id: ID
  name: String!
  description: String!
}

input FandemSubscriptionCreateManyInput {
  create: [FandemSubscriptionCreateInput!]
  connect: [FandemSubscriptionWhereUniqueInput!]
}

"""An edge in a connection."""
type FandemSubscriptionEdge {
  """The item at the end of the edge."""
  node: FandemSubscription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FandemSubscriptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FandemSubscriptionPreviousValues {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FandemSubscriptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FandemSubscriptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FandemSubscriptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FandemSubscriptionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type FandemSubscriptionSubscriptionPayload {
  mutation: MutationType!
  node: FandemSubscription
  updatedFields: [String!]
  previousValues: FandemSubscriptionPreviousValues
}

input FandemSubscriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FandemSubscriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FandemSubscriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FandemSubscriptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FandemSubscriptionWhereInput
}

input FandemSubscriptionUpdateDataInput {
  name: String
  description: String
}

input FandemSubscriptionUpdateInput {
  name: String
  description: String
}

input FandemSubscriptionUpdateManyDataInput {
  name: String
  description: String
}

input FandemSubscriptionUpdateManyInput {
  create: [FandemSubscriptionCreateInput!]
  connect: [FandemSubscriptionWhereUniqueInput!]
  set: [FandemSubscriptionWhereUniqueInput!]
  disconnect: [FandemSubscriptionWhereUniqueInput!]
  delete: [FandemSubscriptionWhereUniqueInput!]
  update: [FandemSubscriptionUpdateWithWhereUniqueNestedInput!]
  updateMany: [FandemSubscriptionUpdateManyWithWhereNestedInput!]
  deleteMany: [FandemSubscriptionScalarWhereInput!]
  upsert: [FandemSubscriptionUpsertWithWhereUniqueNestedInput!]
}

input FandemSubscriptionUpdateManyMutationInput {
  name: String
  description: String
}

input FandemSubscriptionUpdateManyWithWhereNestedInput {
  where: FandemSubscriptionScalarWhereInput!
  data: FandemSubscriptionUpdateManyDataInput!
}

input FandemSubscriptionUpdateWithWhereUniqueNestedInput {
  where: FandemSubscriptionWhereUniqueInput!
  data: FandemSubscriptionUpdateDataInput!
}

input FandemSubscriptionUpsertWithWhereUniqueNestedInput {
  where: FandemSubscriptionWhereUniqueInput!
  update: FandemSubscriptionUpdateDataInput!
  create: FandemSubscriptionCreateInput!
}

input FandemSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FandemSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FandemSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FandemSubscriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input FandemSubscriptionWhereUniqueInput {
  id: ID
}

type Fixture implements Node {
  id: ID!
  fplCode: Int!
  event: Gameweek!
  finished: Boolean!
  finishedProvisional: Boolean!
  fixtureId: Int!
  kickoffTime: DateTime
  minutes: Int!
  provisionalStartTime: Boolean!
  started: Boolean!
  teamA: AwayTeamFixture!
  teamADifficulty: Int!
  teamAScore: Int
  teamH: HomeTeamFixture!
  teamHDifficulty: Int!
  teamHScore: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FixtureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FixtureEdge]!
  aggregate: AggregateFixture!
}

input FixtureCreateInput {
  id: ID
  fplCode: Int!
  finished: Boolean!
  finishedProvisional: Boolean!
  fixtureId: Int!
  kickoffTime: DateTime
  minutes: Int!
  provisionalStartTime: Boolean!
  started: Boolean!
  teamADifficulty: Int!
  teamAScore: Int
  teamHDifficulty: Int!
  teamHScore: Int
  event: GameweekCreateOneWithoutFixturesInput!
  teamA: AwayTeamFixtureCreateOneWithoutFixtureInput!
  teamH: HomeTeamFixtureCreateOneWithoutFixtureInput!
}

input FixtureCreateManyWithoutEventInput {
  create: [FixtureCreateWithoutEventInput!]
  connect: [FixtureWhereUniqueInput!]
}

input FixtureCreateOneInput {
  create: FixtureCreateInput
  connect: FixtureWhereUniqueInput
}

input FixtureCreateOneWithoutTeamAInput {
  create: FixtureCreateWithoutTeamAInput
  connect: FixtureWhereUniqueInput
}

input FixtureCreateOneWithoutTeamHInput {
  create: FixtureCreateWithoutTeamHInput
  connect: FixtureWhereUniqueInput
}

input FixtureCreateWithoutEventInput {
  id: ID
  fplCode: Int!
  finished: Boolean!
  finishedProvisional: Boolean!
  fixtureId: Int!
  kickoffTime: DateTime
  minutes: Int!
  provisionalStartTime: Boolean!
  started: Boolean!
  teamADifficulty: Int!
  teamAScore: Int
  teamHDifficulty: Int!
  teamHScore: Int
  teamA: AwayTeamFixtureCreateOneWithoutFixtureInput!
  teamH: HomeTeamFixtureCreateOneWithoutFixtureInput!
}

input FixtureCreateWithoutTeamAInput {
  id: ID
  fplCode: Int!
  finished: Boolean!
  finishedProvisional: Boolean!
  fixtureId: Int!
  kickoffTime: DateTime
  minutes: Int!
  provisionalStartTime: Boolean!
  started: Boolean!
  teamADifficulty: Int!
  teamAScore: Int
  teamHDifficulty: Int!
  teamHScore: Int
  event: GameweekCreateOneWithoutFixturesInput!
  teamH: HomeTeamFixtureCreateOneWithoutFixtureInput!
}

input FixtureCreateWithoutTeamHInput {
  id: ID
  fplCode: Int!
  finished: Boolean!
  finishedProvisional: Boolean!
  fixtureId: Int!
  kickoffTime: DateTime
  minutes: Int!
  provisionalStartTime: Boolean!
  started: Boolean!
  teamADifficulty: Int!
  teamAScore: Int
  teamHDifficulty: Int!
  teamHScore: Int
  event: GameweekCreateOneWithoutFixturesInput!
  teamA: AwayTeamFixtureCreateOneWithoutFixtureInput!
}

"""An edge in a connection."""
type FixtureEdge {
  """The item at the end of the edge."""
  node: Fixture!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FixtureOrderByInput {
  id_ASC
  id_DESC
  fplCode_ASC
  fplCode_DESC
  finished_ASC
  finished_DESC
  finishedProvisional_ASC
  finishedProvisional_DESC
  fixtureId_ASC
  fixtureId_DESC
  kickoffTime_ASC
  kickoffTime_DESC
  minutes_ASC
  minutes_DESC
  provisionalStartTime_ASC
  provisionalStartTime_DESC
  started_ASC
  started_DESC
  teamADifficulty_ASC
  teamADifficulty_DESC
  teamAScore_ASC
  teamAScore_DESC
  teamHDifficulty_ASC
  teamHDifficulty_DESC
  teamHScore_ASC
  teamHScore_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FixturePreviousValues {
  id: ID!
  fplCode: Int!
  finished: Boolean!
  finishedProvisional: Boolean!
  fixtureId: Int!
  kickoffTime: DateTime
  minutes: Int!
  provisionalStartTime: Boolean!
  started: Boolean!
  teamADifficulty: Int!
  teamAScore: Int
  teamHDifficulty: Int!
  teamHScore: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FixtureScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FixtureScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FixtureScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FixtureScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fplCode: Int

  """All values that are not equal to given value."""
  fplCode_not: Int

  """All values that are contained in given list."""
  fplCode_in: [Int!]

  """All values that are not contained in given list."""
  fplCode_not_in: [Int!]

  """All values less than the given value."""
  fplCode_lt: Int

  """All values less than or equal the given value."""
  fplCode_lte: Int

  """All values greater than the given value."""
  fplCode_gt: Int

  """All values greater than or equal the given value."""
  fplCode_gte: Int
  finished: Boolean

  """All values that are not equal to given value."""
  finished_not: Boolean
  finishedProvisional: Boolean

  """All values that are not equal to given value."""
  finishedProvisional_not: Boolean
  fixtureId: Int

  """All values that are not equal to given value."""
  fixtureId_not: Int

  """All values that are contained in given list."""
  fixtureId_in: [Int!]

  """All values that are not contained in given list."""
  fixtureId_not_in: [Int!]

  """All values less than the given value."""
  fixtureId_lt: Int

  """All values less than or equal the given value."""
  fixtureId_lte: Int

  """All values greater than the given value."""
  fixtureId_gt: Int

  """All values greater than or equal the given value."""
  fixtureId_gte: Int
  kickoffTime: DateTime

  """All values that are not equal to given value."""
  kickoffTime_not: DateTime

  """All values that are contained in given list."""
  kickoffTime_in: [DateTime!]

  """All values that are not contained in given list."""
  kickoffTime_not_in: [DateTime!]

  """All values less than the given value."""
  kickoffTime_lt: DateTime

  """All values less than or equal the given value."""
  kickoffTime_lte: DateTime

  """All values greater than the given value."""
  kickoffTime_gt: DateTime

  """All values greater than or equal the given value."""
  kickoffTime_gte: DateTime
  minutes: Int

  """All values that are not equal to given value."""
  minutes_not: Int

  """All values that are contained in given list."""
  minutes_in: [Int!]

  """All values that are not contained in given list."""
  minutes_not_in: [Int!]

  """All values less than the given value."""
  minutes_lt: Int

  """All values less than or equal the given value."""
  minutes_lte: Int

  """All values greater than the given value."""
  minutes_gt: Int

  """All values greater than or equal the given value."""
  minutes_gte: Int
  provisionalStartTime: Boolean

  """All values that are not equal to given value."""
  provisionalStartTime_not: Boolean
  started: Boolean

  """All values that are not equal to given value."""
  started_not: Boolean
  teamADifficulty: Int

  """All values that are not equal to given value."""
  teamADifficulty_not: Int

  """All values that are contained in given list."""
  teamADifficulty_in: [Int!]

  """All values that are not contained in given list."""
  teamADifficulty_not_in: [Int!]

  """All values less than the given value."""
  teamADifficulty_lt: Int

  """All values less than or equal the given value."""
  teamADifficulty_lte: Int

  """All values greater than the given value."""
  teamADifficulty_gt: Int

  """All values greater than or equal the given value."""
  teamADifficulty_gte: Int
  teamAScore: Int

  """All values that are not equal to given value."""
  teamAScore_not: Int

  """All values that are contained in given list."""
  teamAScore_in: [Int!]

  """All values that are not contained in given list."""
  teamAScore_not_in: [Int!]

  """All values less than the given value."""
  teamAScore_lt: Int

  """All values less than or equal the given value."""
  teamAScore_lte: Int

  """All values greater than the given value."""
  teamAScore_gt: Int

  """All values greater than or equal the given value."""
  teamAScore_gte: Int
  teamHDifficulty: Int

  """All values that are not equal to given value."""
  teamHDifficulty_not: Int

  """All values that are contained in given list."""
  teamHDifficulty_in: [Int!]

  """All values that are not contained in given list."""
  teamHDifficulty_not_in: [Int!]

  """All values less than the given value."""
  teamHDifficulty_lt: Int

  """All values less than or equal the given value."""
  teamHDifficulty_lte: Int

  """All values greater than the given value."""
  teamHDifficulty_gt: Int

  """All values greater than or equal the given value."""
  teamHDifficulty_gte: Int
  teamHScore: Int

  """All values that are not equal to given value."""
  teamHScore_not: Int

  """All values that are contained in given list."""
  teamHScore_in: [Int!]

  """All values that are not contained in given list."""
  teamHScore_not_in: [Int!]

  """All values less than the given value."""
  teamHScore_lt: Int

  """All values less than or equal the given value."""
  teamHScore_lte: Int

  """All values greater than the given value."""
  teamHScore_gt: Int

  """All values greater than or equal the given value."""
  teamHScore_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type FixtureSubscriptionPayload {
  mutation: MutationType!
  node: Fixture
  updatedFields: [String!]
  previousValues: FixturePreviousValues
}

input FixtureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FixtureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FixtureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FixtureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FixtureWhereInput
}

input FixtureUpdateDataInput {
  fplCode: Int
  finished: Boolean
  finishedProvisional: Boolean
  fixtureId: Int
  kickoffTime: DateTime
  minutes: Int
  provisionalStartTime: Boolean
  started: Boolean
  teamADifficulty: Int
  teamAScore: Int
  teamHDifficulty: Int
  teamHScore: Int
  event: GameweekUpdateOneRequiredWithoutFixturesInput
  teamA: AwayTeamFixtureUpdateOneRequiredWithoutFixtureInput
  teamH: HomeTeamFixtureUpdateOneRequiredWithoutFixtureInput
}

input FixtureUpdateInput {
  fplCode: Int
  finished: Boolean
  finishedProvisional: Boolean
  fixtureId: Int
  kickoffTime: DateTime
  minutes: Int
  provisionalStartTime: Boolean
  started: Boolean
  teamADifficulty: Int
  teamAScore: Int
  teamHDifficulty: Int
  teamHScore: Int
  event: GameweekUpdateOneRequiredWithoutFixturesInput
  teamA: AwayTeamFixtureUpdateOneRequiredWithoutFixtureInput
  teamH: HomeTeamFixtureUpdateOneRequiredWithoutFixtureInput
}

input FixtureUpdateManyDataInput {
  fplCode: Int
  finished: Boolean
  finishedProvisional: Boolean
  fixtureId: Int
  kickoffTime: DateTime
  minutes: Int
  provisionalStartTime: Boolean
  started: Boolean
  teamADifficulty: Int
  teamAScore: Int
  teamHDifficulty: Int
  teamHScore: Int
}

input FixtureUpdateManyMutationInput {
  fplCode: Int
  finished: Boolean
  finishedProvisional: Boolean
  fixtureId: Int
  kickoffTime: DateTime
  minutes: Int
  provisionalStartTime: Boolean
  started: Boolean
  teamADifficulty: Int
  teamAScore: Int
  teamHDifficulty: Int
  teamHScore: Int
}

input FixtureUpdateManyWithoutEventInput {
  create: [FixtureCreateWithoutEventInput!]
  connect: [FixtureWhereUniqueInput!]
  set: [FixtureWhereUniqueInput!]
  disconnect: [FixtureWhereUniqueInput!]
  delete: [FixtureWhereUniqueInput!]
  update: [FixtureUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [FixtureUpdateManyWithWhereNestedInput!]
  deleteMany: [FixtureScalarWhereInput!]
  upsert: [FixtureUpsertWithWhereUniqueWithoutEventInput!]
}

input FixtureUpdateManyWithWhereNestedInput {
  where: FixtureScalarWhereInput!
  data: FixtureUpdateManyDataInput!
}

input FixtureUpdateOneRequiredInput {
  create: FixtureCreateInput
  connect: FixtureWhereUniqueInput
  update: FixtureUpdateDataInput
  upsert: FixtureUpsertNestedInput
}

input FixtureUpdateOneRequiredWithoutTeamAInput {
  create: FixtureCreateWithoutTeamAInput
  connect: FixtureWhereUniqueInput
  update: FixtureUpdateWithoutTeamADataInput
  upsert: FixtureUpsertWithoutTeamAInput
}

input FixtureUpdateOneRequiredWithoutTeamHInput {
  create: FixtureCreateWithoutTeamHInput
  connect: FixtureWhereUniqueInput
  update: FixtureUpdateWithoutTeamHDataInput
  upsert: FixtureUpsertWithoutTeamHInput
}

input FixtureUpdateWithoutEventDataInput {
  fplCode: Int
  finished: Boolean
  finishedProvisional: Boolean
  fixtureId: Int
  kickoffTime: DateTime
  minutes: Int
  provisionalStartTime: Boolean
  started: Boolean
  teamADifficulty: Int
  teamAScore: Int
  teamHDifficulty: Int
  teamHScore: Int
  teamA: AwayTeamFixtureUpdateOneRequiredWithoutFixtureInput
  teamH: HomeTeamFixtureUpdateOneRequiredWithoutFixtureInput
}

input FixtureUpdateWithoutTeamADataInput {
  fplCode: Int
  finished: Boolean
  finishedProvisional: Boolean
  fixtureId: Int
  kickoffTime: DateTime
  minutes: Int
  provisionalStartTime: Boolean
  started: Boolean
  teamADifficulty: Int
  teamAScore: Int
  teamHDifficulty: Int
  teamHScore: Int
  event: GameweekUpdateOneRequiredWithoutFixturesInput
  teamH: HomeTeamFixtureUpdateOneRequiredWithoutFixtureInput
}

input FixtureUpdateWithoutTeamHDataInput {
  fplCode: Int
  finished: Boolean
  finishedProvisional: Boolean
  fixtureId: Int
  kickoffTime: DateTime
  minutes: Int
  provisionalStartTime: Boolean
  started: Boolean
  teamADifficulty: Int
  teamAScore: Int
  teamHDifficulty: Int
  teamHScore: Int
  event: GameweekUpdateOneRequiredWithoutFixturesInput
  teamA: AwayTeamFixtureUpdateOneRequiredWithoutFixtureInput
}

input FixtureUpdateWithWhereUniqueWithoutEventInput {
  where: FixtureWhereUniqueInput!
  data: FixtureUpdateWithoutEventDataInput!
}

input FixtureUpsertNestedInput {
  update: FixtureUpdateDataInput!
  create: FixtureCreateInput!
}

input FixtureUpsertWithoutTeamAInput {
  update: FixtureUpdateWithoutTeamADataInput!
  create: FixtureCreateWithoutTeamAInput!
}

input FixtureUpsertWithoutTeamHInput {
  update: FixtureUpdateWithoutTeamHDataInput!
  create: FixtureCreateWithoutTeamHInput!
}

input FixtureUpsertWithWhereUniqueWithoutEventInput {
  where: FixtureWhereUniqueInput!
  update: FixtureUpdateWithoutEventDataInput!
  create: FixtureCreateWithoutEventInput!
}

input FixtureWhereInput {
  """Logical AND on all given filters."""
  AND: [FixtureWhereInput!]

  """Logical OR on all given filters."""
  OR: [FixtureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FixtureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fplCode: Int

  """All values that are not equal to given value."""
  fplCode_not: Int

  """All values that are contained in given list."""
  fplCode_in: [Int!]

  """All values that are not contained in given list."""
  fplCode_not_in: [Int!]

  """All values less than the given value."""
  fplCode_lt: Int

  """All values less than or equal the given value."""
  fplCode_lte: Int

  """All values greater than the given value."""
  fplCode_gt: Int

  """All values greater than or equal the given value."""
  fplCode_gte: Int
  finished: Boolean

  """All values that are not equal to given value."""
  finished_not: Boolean
  finishedProvisional: Boolean

  """All values that are not equal to given value."""
  finishedProvisional_not: Boolean
  fixtureId: Int

  """All values that are not equal to given value."""
  fixtureId_not: Int

  """All values that are contained in given list."""
  fixtureId_in: [Int!]

  """All values that are not contained in given list."""
  fixtureId_not_in: [Int!]

  """All values less than the given value."""
  fixtureId_lt: Int

  """All values less than or equal the given value."""
  fixtureId_lte: Int

  """All values greater than the given value."""
  fixtureId_gt: Int

  """All values greater than or equal the given value."""
  fixtureId_gte: Int
  kickoffTime: DateTime

  """All values that are not equal to given value."""
  kickoffTime_not: DateTime

  """All values that are contained in given list."""
  kickoffTime_in: [DateTime!]

  """All values that are not contained in given list."""
  kickoffTime_not_in: [DateTime!]

  """All values less than the given value."""
  kickoffTime_lt: DateTime

  """All values less than or equal the given value."""
  kickoffTime_lte: DateTime

  """All values greater than the given value."""
  kickoffTime_gt: DateTime

  """All values greater than or equal the given value."""
  kickoffTime_gte: DateTime
  minutes: Int

  """All values that are not equal to given value."""
  minutes_not: Int

  """All values that are contained in given list."""
  minutes_in: [Int!]

  """All values that are not contained in given list."""
  minutes_not_in: [Int!]

  """All values less than the given value."""
  minutes_lt: Int

  """All values less than or equal the given value."""
  minutes_lte: Int

  """All values greater than the given value."""
  minutes_gt: Int

  """All values greater than or equal the given value."""
  minutes_gte: Int
  provisionalStartTime: Boolean

  """All values that are not equal to given value."""
  provisionalStartTime_not: Boolean
  started: Boolean

  """All values that are not equal to given value."""
  started_not: Boolean
  teamADifficulty: Int

  """All values that are not equal to given value."""
  teamADifficulty_not: Int

  """All values that are contained in given list."""
  teamADifficulty_in: [Int!]

  """All values that are not contained in given list."""
  teamADifficulty_not_in: [Int!]

  """All values less than the given value."""
  teamADifficulty_lt: Int

  """All values less than or equal the given value."""
  teamADifficulty_lte: Int

  """All values greater than the given value."""
  teamADifficulty_gt: Int

  """All values greater than or equal the given value."""
  teamADifficulty_gte: Int
  teamAScore: Int

  """All values that are not equal to given value."""
  teamAScore_not: Int

  """All values that are contained in given list."""
  teamAScore_in: [Int!]

  """All values that are not contained in given list."""
  teamAScore_not_in: [Int!]

  """All values less than the given value."""
  teamAScore_lt: Int

  """All values less than or equal the given value."""
  teamAScore_lte: Int

  """All values greater than the given value."""
  teamAScore_gt: Int

  """All values greater than or equal the given value."""
  teamAScore_gte: Int
  teamHDifficulty: Int

  """All values that are not equal to given value."""
  teamHDifficulty_not: Int

  """All values that are contained in given list."""
  teamHDifficulty_in: [Int!]

  """All values that are not contained in given list."""
  teamHDifficulty_not_in: [Int!]

  """All values less than the given value."""
  teamHDifficulty_lt: Int

  """All values less than or equal the given value."""
  teamHDifficulty_lte: Int

  """All values greater than the given value."""
  teamHDifficulty_gt: Int

  """All values greater than or equal the given value."""
  teamHDifficulty_gte: Int
  teamHScore: Int

  """All values that are not equal to given value."""
  teamHScore_not: Int

  """All values that are contained in given list."""
  teamHScore_in: [Int!]

  """All values that are not contained in given list."""
  teamHScore_not_in: [Int!]

  """All values less than the given value."""
  teamHScore_lt: Int

  """All values less than or equal the given value."""
  teamHScore_lte: Int

  """All values greater than the given value."""
  teamHScore_gt: Int

  """All values greater than or equal the given value."""
  teamHScore_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  event: GameweekWhereInput
  teamA: AwayTeamFixtureWhereInput
  teamH: HomeTeamFixtureWhereInput
}

input FixtureWhereUniqueInput {
  id: ID
  fplCode: Int
}

type Follower implements Node {
  id: ID!
  user: User!
  blocked: Boolean!
  accepted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type FollowerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FollowerEdge]!
  aggregate: AggregateFollower!
}

input FollowerCreateInput {
  id: ID
  blocked: Boolean
  accepted: Boolean
  user: UserCreateOneInput!
}

input FollowerCreateManyInput {
  create: [FollowerCreateInput!]
  connect: [FollowerWhereUniqueInput!]
}

"""An edge in a connection."""
type FollowerEdge {
  """The item at the end of the edge."""
  node: Follower!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FollowerOrderByInput {
  id_ASC
  id_DESC
  blocked_ASC
  blocked_DESC
  accepted_ASC
  accepted_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FollowerPreviousValues {
  id: ID!
  blocked: Boolean!
  accepted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FollowerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FollowerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FollowerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FollowerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  blocked: Boolean

  """All values that are not equal to given value."""
  blocked_not: Boolean
  accepted: Boolean

  """All values that are not equal to given value."""
  accepted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type FollowerSubscriptionPayload {
  mutation: MutationType!
  node: Follower
  updatedFields: [String!]
  previousValues: FollowerPreviousValues
}

input FollowerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FollowerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FollowerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FollowerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FollowerWhereInput
}

input FollowerUpdateDataInput {
  blocked: Boolean
  accepted: Boolean
  user: UserUpdateOneRequiredInput
}

input FollowerUpdateInput {
  blocked: Boolean
  accepted: Boolean
  user: UserUpdateOneRequiredInput
}

input FollowerUpdateManyDataInput {
  blocked: Boolean
  accepted: Boolean
}

input FollowerUpdateManyInput {
  create: [FollowerCreateInput!]
  connect: [FollowerWhereUniqueInput!]
  set: [FollowerWhereUniqueInput!]
  disconnect: [FollowerWhereUniqueInput!]
  delete: [FollowerWhereUniqueInput!]
  update: [FollowerUpdateWithWhereUniqueNestedInput!]
  updateMany: [FollowerUpdateManyWithWhereNestedInput!]
  deleteMany: [FollowerScalarWhereInput!]
  upsert: [FollowerUpsertWithWhereUniqueNestedInput!]
}

input FollowerUpdateManyMutationInput {
  blocked: Boolean
  accepted: Boolean
}

input FollowerUpdateManyWithWhereNestedInput {
  where: FollowerScalarWhereInput!
  data: FollowerUpdateManyDataInput!
}

input FollowerUpdateWithWhereUniqueNestedInput {
  where: FollowerWhereUniqueInput!
  data: FollowerUpdateDataInput!
}

input FollowerUpsertWithWhereUniqueNestedInput {
  where: FollowerWhereUniqueInput!
  update: FollowerUpdateDataInput!
  create: FollowerCreateInput!
}

input FollowerWhereInput {
  """Logical AND on all given filters."""
  AND: [FollowerWhereInput!]

  """Logical OR on all given filters."""
  OR: [FollowerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FollowerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  blocked: Boolean

  """All values that are not equal to given value."""
  blocked_not: Boolean
  accepted: Boolean

  """All values that are not equal to given value."""
  accepted_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input FollowerWhereUniqueInput {
  id: ID
}

type Gameweek implements Node {
  id: ID!
  season: Season!
  averageEntryScore: Int
  dataChecked: Boolean!
  deadlineTime: DateTime!
  deadlineTimeEpoch: Int!
  deadlineTimeGameOffset: Int!
  finished: Boolean!
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int!
  isCurrent: Boolean!
  isNext: Boolean!
  isPrevious: Boolean!
  name: String!
  fixtures(where: FixtureWhereInput, orderBy: FixtureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fixture!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type GameweekConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GameweekEdge]!
  aggregate: AggregateGameweek!
}

input GameweekCreateInput {
  id: ID
  averageEntryScore: Int
  dataChecked: Boolean!
  deadlineTime: DateTime!
  deadlineTimeEpoch: Int!
  deadlineTimeGameOffset: Int!
  finished: Boolean!
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int!
  isCurrent: Boolean!
  isNext: Boolean!
  isPrevious: Boolean!
  name: String!
  season: SeasonCreateOneWithoutEventsInput!
  fixtures: FixtureCreateManyWithoutEventInput
}

input GameweekCreateManyWithoutSeasonInput {
  create: [GameweekCreateWithoutSeasonInput!]
  connect: [GameweekWhereUniqueInput!]
}

input GameweekCreateOneInput {
  create: GameweekCreateInput
  connect: GameweekWhereUniqueInput
}

input GameweekCreateOneWithoutFixturesInput {
  create: GameweekCreateWithoutFixturesInput
  connect: GameweekWhereUniqueInput
}

input GameweekCreateWithoutFixturesInput {
  id: ID
  averageEntryScore: Int
  dataChecked: Boolean!
  deadlineTime: DateTime!
  deadlineTimeEpoch: Int!
  deadlineTimeGameOffset: Int!
  finished: Boolean!
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int!
  isCurrent: Boolean!
  isNext: Boolean!
  isPrevious: Boolean!
  name: String!
  season: SeasonCreateOneWithoutEventsInput!
}

input GameweekCreateWithoutSeasonInput {
  id: ID
  averageEntryScore: Int
  dataChecked: Boolean!
  deadlineTime: DateTime!
  deadlineTimeEpoch: Int!
  deadlineTimeGameOffset: Int!
  finished: Boolean!
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int!
  isCurrent: Boolean!
  isNext: Boolean!
  isPrevious: Boolean!
  name: String!
  fixtures: FixtureCreateManyWithoutEventInput
}

"""An edge in a connection."""
type GameweekEdge {
  """The item at the end of the edge."""
  node: Gameweek!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GameweekOrderByInput {
  id_ASC
  id_DESC
  averageEntryScore_ASC
  averageEntryScore_DESC
  dataChecked_ASC
  dataChecked_DESC
  deadlineTime_ASC
  deadlineTime_DESC
  deadlineTimeEpoch_ASC
  deadlineTimeEpoch_DESC
  deadlineTimeGameOffset_ASC
  deadlineTimeGameOffset_DESC
  finished_ASC
  finished_DESC
  highestScore_ASC
  highestScore_DESC
  highestScoringEntry_ASC
  highestScoringEntry_DESC
  fplEventId_ASC
  fplEventId_DESC
  isCurrent_ASC
  isCurrent_DESC
  isNext_ASC
  isNext_DESC
  isPrevious_ASC
  isPrevious_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GameweekPreviousValues {
  id: ID!
  averageEntryScore: Int
  dataChecked: Boolean!
  deadlineTime: DateTime!
  deadlineTimeEpoch: Int!
  deadlineTimeGameOffset: Int!
  finished: Boolean!
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int!
  isCurrent: Boolean!
  isNext: Boolean!
  isPrevious: Boolean!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input GameweekScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GameweekScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameweekScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameweekScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  averageEntryScore: Int

  """All values that are not equal to given value."""
  averageEntryScore_not: Int

  """All values that are contained in given list."""
  averageEntryScore_in: [Int!]

  """All values that are not contained in given list."""
  averageEntryScore_not_in: [Int!]

  """All values less than the given value."""
  averageEntryScore_lt: Int

  """All values less than or equal the given value."""
  averageEntryScore_lte: Int

  """All values greater than the given value."""
  averageEntryScore_gt: Int

  """All values greater than or equal the given value."""
  averageEntryScore_gte: Int
  dataChecked: Boolean

  """All values that are not equal to given value."""
  dataChecked_not: Boolean
  deadlineTime: DateTime

  """All values that are not equal to given value."""
  deadlineTime_not: DateTime

  """All values that are contained in given list."""
  deadlineTime_in: [DateTime!]

  """All values that are not contained in given list."""
  deadlineTime_not_in: [DateTime!]

  """All values less than the given value."""
  deadlineTime_lt: DateTime

  """All values less than or equal the given value."""
  deadlineTime_lte: DateTime

  """All values greater than the given value."""
  deadlineTime_gt: DateTime

  """All values greater than or equal the given value."""
  deadlineTime_gte: DateTime
  deadlineTimeEpoch: Int

  """All values that are not equal to given value."""
  deadlineTimeEpoch_not: Int

  """All values that are contained in given list."""
  deadlineTimeEpoch_in: [Int!]

  """All values that are not contained in given list."""
  deadlineTimeEpoch_not_in: [Int!]

  """All values less than the given value."""
  deadlineTimeEpoch_lt: Int

  """All values less than or equal the given value."""
  deadlineTimeEpoch_lte: Int

  """All values greater than the given value."""
  deadlineTimeEpoch_gt: Int

  """All values greater than or equal the given value."""
  deadlineTimeEpoch_gte: Int
  deadlineTimeGameOffset: Int

  """All values that are not equal to given value."""
  deadlineTimeGameOffset_not: Int

  """All values that are contained in given list."""
  deadlineTimeGameOffset_in: [Int!]

  """All values that are not contained in given list."""
  deadlineTimeGameOffset_not_in: [Int!]

  """All values less than the given value."""
  deadlineTimeGameOffset_lt: Int

  """All values less than or equal the given value."""
  deadlineTimeGameOffset_lte: Int

  """All values greater than the given value."""
  deadlineTimeGameOffset_gt: Int

  """All values greater than or equal the given value."""
  deadlineTimeGameOffset_gte: Int
  finished: Boolean

  """All values that are not equal to given value."""
  finished_not: Boolean
  highestScore: Int

  """All values that are not equal to given value."""
  highestScore_not: Int

  """All values that are contained in given list."""
  highestScore_in: [Int!]

  """All values that are not contained in given list."""
  highestScore_not_in: [Int!]

  """All values less than the given value."""
  highestScore_lt: Int

  """All values less than or equal the given value."""
  highestScore_lte: Int

  """All values greater than the given value."""
  highestScore_gt: Int

  """All values greater than or equal the given value."""
  highestScore_gte: Int
  highestScoringEntry: Int

  """All values that are not equal to given value."""
  highestScoringEntry_not: Int

  """All values that are contained in given list."""
  highestScoringEntry_in: [Int!]

  """All values that are not contained in given list."""
  highestScoringEntry_not_in: [Int!]

  """All values less than the given value."""
  highestScoringEntry_lt: Int

  """All values less than or equal the given value."""
  highestScoringEntry_lte: Int

  """All values greater than the given value."""
  highestScoringEntry_gt: Int

  """All values greater than or equal the given value."""
  highestScoringEntry_gte: Int
  fplEventId: Int

  """All values that are not equal to given value."""
  fplEventId_not: Int

  """All values that are contained in given list."""
  fplEventId_in: [Int!]

  """All values that are not contained in given list."""
  fplEventId_not_in: [Int!]

  """All values less than the given value."""
  fplEventId_lt: Int

  """All values less than or equal the given value."""
  fplEventId_lte: Int

  """All values greater than the given value."""
  fplEventId_gt: Int

  """All values greater than or equal the given value."""
  fplEventId_gte: Int
  isCurrent: Boolean

  """All values that are not equal to given value."""
  isCurrent_not: Boolean
  isNext: Boolean

  """All values that are not equal to given value."""
  isNext_not: Boolean
  isPrevious: Boolean

  """All values that are not equal to given value."""
  isPrevious_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type GameweekSubscriptionPayload {
  mutation: MutationType!
  node: Gameweek
  updatedFields: [String!]
  previousValues: GameweekPreviousValues
}

input GameweekSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GameweekSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameweekSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameweekSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GameweekWhereInput
}

input GameweekUpdateDataInput {
  averageEntryScore: Int
  dataChecked: Boolean
  deadlineTime: DateTime
  deadlineTimeEpoch: Int
  deadlineTimeGameOffset: Int
  finished: Boolean
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int
  isCurrent: Boolean
  isNext: Boolean
  isPrevious: Boolean
  name: String
  season: SeasonUpdateOneRequiredWithoutEventsInput
  fixtures: FixtureUpdateManyWithoutEventInput
}

input GameweekUpdateInput {
  averageEntryScore: Int
  dataChecked: Boolean
  deadlineTime: DateTime
  deadlineTimeEpoch: Int
  deadlineTimeGameOffset: Int
  finished: Boolean
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int
  isCurrent: Boolean
  isNext: Boolean
  isPrevious: Boolean
  name: String
  season: SeasonUpdateOneRequiredWithoutEventsInput
  fixtures: FixtureUpdateManyWithoutEventInput
}

input GameweekUpdateManyDataInput {
  averageEntryScore: Int
  dataChecked: Boolean
  deadlineTime: DateTime
  deadlineTimeEpoch: Int
  deadlineTimeGameOffset: Int
  finished: Boolean
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int
  isCurrent: Boolean
  isNext: Boolean
  isPrevious: Boolean
  name: String
}

input GameweekUpdateManyMutationInput {
  averageEntryScore: Int
  dataChecked: Boolean
  deadlineTime: DateTime
  deadlineTimeEpoch: Int
  deadlineTimeGameOffset: Int
  finished: Boolean
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int
  isCurrent: Boolean
  isNext: Boolean
  isPrevious: Boolean
  name: String
}

input GameweekUpdateManyWithoutSeasonInput {
  create: [GameweekCreateWithoutSeasonInput!]
  connect: [GameweekWhereUniqueInput!]
  set: [GameweekWhereUniqueInput!]
  disconnect: [GameweekWhereUniqueInput!]
  delete: [GameweekWhereUniqueInput!]
  update: [GameweekUpdateWithWhereUniqueWithoutSeasonInput!]
  updateMany: [GameweekUpdateManyWithWhereNestedInput!]
  deleteMany: [GameweekScalarWhereInput!]
  upsert: [GameweekUpsertWithWhereUniqueWithoutSeasonInput!]
}

input GameweekUpdateManyWithWhereNestedInput {
  where: GameweekScalarWhereInput!
  data: GameweekUpdateManyDataInput!
}

input GameweekUpdateOneInput {
  create: GameweekCreateInput
  connect: GameweekWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GameweekUpdateDataInput
  upsert: GameweekUpsertNestedInput
}

input GameweekUpdateOneRequiredWithoutFixturesInput {
  create: GameweekCreateWithoutFixturesInput
  connect: GameweekWhereUniqueInput
  update: GameweekUpdateWithoutFixturesDataInput
  upsert: GameweekUpsertWithoutFixturesInput
}

input GameweekUpdateWithoutFixturesDataInput {
  averageEntryScore: Int
  dataChecked: Boolean
  deadlineTime: DateTime
  deadlineTimeEpoch: Int
  deadlineTimeGameOffset: Int
  finished: Boolean
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int
  isCurrent: Boolean
  isNext: Boolean
  isPrevious: Boolean
  name: String
  season: SeasonUpdateOneRequiredWithoutEventsInput
}

input GameweekUpdateWithoutSeasonDataInput {
  averageEntryScore: Int
  dataChecked: Boolean
  deadlineTime: DateTime
  deadlineTimeEpoch: Int
  deadlineTimeGameOffset: Int
  finished: Boolean
  highestScore: Int
  highestScoringEntry: Int
  fplEventId: Int
  isCurrent: Boolean
  isNext: Boolean
  isPrevious: Boolean
  name: String
  fixtures: FixtureUpdateManyWithoutEventInput
}

input GameweekUpdateWithWhereUniqueWithoutSeasonInput {
  where: GameweekWhereUniqueInput!
  data: GameweekUpdateWithoutSeasonDataInput!
}

input GameweekUpsertNestedInput {
  update: GameweekUpdateDataInput!
  create: GameweekCreateInput!
}

input GameweekUpsertWithoutFixturesInput {
  update: GameweekUpdateWithoutFixturesDataInput!
  create: GameweekCreateWithoutFixturesInput!
}

input GameweekUpsertWithWhereUniqueWithoutSeasonInput {
  where: GameweekWhereUniqueInput!
  update: GameweekUpdateWithoutSeasonDataInput!
  create: GameweekCreateWithoutSeasonInput!
}

input GameweekWhereInput {
  """Logical AND on all given filters."""
  AND: [GameweekWhereInput!]

  """Logical OR on all given filters."""
  OR: [GameweekWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GameweekWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  averageEntryScore: Int

  """All values that are not equal to given value."""
  averageEntryScore_not: Int

  """All values that are contained in given list."""
  averageEntryScore_in: [Int!]

  """All values that are not contained in given list."""
  averageEntryScore_not_in: [Int!]

  """All values less than the given value."""
  averageEntryScore_lt: Int

  """All values less than or equal the given value."""
  averageEntryScore_lte: Int

  """All values greater than the given value."""
  averageEntryScore_gt: Int

  """All values greater than or equal the given value."""
  averageEntryScore_gte: Int
  dataChecked: Boolean

  """All values that are not equal to given value."""
  dataChecked_not: Boolean
  deadlineTime: DateTime

  """All values that are not equal to given value."""
  deadlineTime_not: DateTime

  """All values that are contained in given list."""
  deadlineTime_in: [DateTime!]

  """All values that are not contained in given list."""
  deadlineTime_not_in: [DateTime!]

  """All values less than the given value."""
  deadlineTime_lt: DateTime

  """All values less than or equal the given value."""
  deadlineTime_lte: DateTime

  """All values greater than the given value."""
  deadlineTime_gt: DateTime

  """All values greater than or equal the given value."""
  deadlineTime_gte: DateTime
  deadlineTimeEpoch: Int

  """All values that are not equal to given value."""
  deadlineTimeEpoch_not: Int

  """All values that are contained in given list."""
  deadlineTimeEpoch_in: [Int!]

  """All values that are not contained in given list."""
  deadlineTimeEpoch_not_in: [Int!]

  """All values less than the given value."""
  deadlineTimeEpoch_lt: Int

  """All values less than or equal the given value."""
  deadlineTimeEpoch_lte: Int

  """All values greater than the given value."""
  deadlineTimeEpoch_gt: Int

  """All values greater than or equal the given value."""
  deadlineTimeEpoch_gte: Int
  deadlineTimeGameOffset: Int

  """All values that are not equal to given value."""
  deadlineTimeGameOffset_not: Int

  """All values that are contained in given list."""
  deadlineTimeGameOffset_in: [Int!]

  """All values that are not contained in given list."""
  deadlineTimeGameOffset_not_in: [Int!]

  """All values less than the given value."""
  deadlineTimeGameOffset_lt: Int

  """All values less than or equal the given value."""
  deadlineTimeGameOffset_lte: Int

  """All values greater than the given value."""
  deadlineTimeGameOffset_gt: Int

  """All values greater than or equal the given value."""
  deadlineTimeGameOffset_gte: Int
  finished: Boolean

  """All values that are not equal to given value."""
  finished_not: Boolean
  highestScore: Int

  """All values that are not equal to given value."""
  highestScore_not: Int

  """All values that are contained in given list."""
  highestScore_in: [Int!]

  """All values that are not contained in given list."""
  highestScore_not_in: [Int!]

  """All values less than the given value."""
  highestScore_lt: Int

  """All values less than or equal the given value."""
  highestScore_lte: Int

  """All values greater than the given value."""
  highestScore_gt: Int

  """All values greater than or equal the given value."""
  highestScore_gte: Int
  highestScoringEntry: Int

  """All values that are not equal to given value."""
  highestScoringEntry_not: Int

  """All values that are contained in given list."""
  highestScoringEntry_in: [Int!]

  """All values that are not contained in given list."""
  highestScoringEntry_not_in: [Int!]

  """All values less than the given value."""
  highestScoringEntry_lt: Int

  """All values less than or equal the given value."""
  highestScoringEntry_lte: Int

  """All values greater than the given value."""
  highestScoringEntry_gt: Int

  """All values greater than or equal the given value."""
  highestScoringEntry_gte: Int
  fplEventId: Int

  """All values that are not equal to given value."""
  fplEventId_not: Int

  """All values that are contained in given list."""
  fplEventId_in: [Int!]

  """All values that are not contained in given list."""
  fplEventId_not_in: [Int!]

  """All values less than the given value."""
  fplEventId_lt: Int

  """All values less than or equal the given value."""
  fplEventId_lte: Int

  """All values greater than the given value."""
  fplEventId_gt: Int

  """All values greater than or equal the given value."""
  fplEventId_gte: Int
  isCurrent: Boolean

  """All values that are not equal to given value."""
  isCurrent_not: Boolean
  isNext: Boolean

  """All values that are not equal to given value."""
  isNext_not: Boolean
  isPrevious: Boolean

  """All values that are not equal to given value."""
  isPrevious_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  season: SeasonWhereInput
  fixtures_every: FixtureWhereInput
  fixtures_some: FixtureWhereInput
  fixtures_none: FixtureWhereInput
}

input GameweekWhereUniqueInput {
  id: ID
  fplEventId: Int
}

type HomeTeamFixture implements Node {
  id: ID!
  fixture: Fixture!
  homeTeam: Team!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type HomeTeamFixtureConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [HomeTeamFixtureEdge]!
  aggregate: AggregateHomeTeamFixture!
}

input HomeTeamFixtureCreateInput {
  id: ID
  fixture: FixtureCreateOneWithoutTeamHInput!
  homeTeam: TeamCreateOneWithoutHomeFixturesInput!
}

input HomeTeamFixtureCreateManyWithoutHomeTeamInput {
  create: [HomeTeamFixtureCreateWithoutHomeTeamInput!]
  connect: [HomeTeamFixtureWhereUniqueInput!]
}

input HomeTeamFixtureCreateOneWithoutFixtureInput {
  create: HomeTeamFixtureCreateWithoutFixtureInput
  connect: HomeTeamFixtureWhereUniqueInput
}

input HomeTeamFixtureCreateWithoutFixtureInput {
  id: ID
  homeTeam: TeamCreateOneWithoutHomeFixturesInput!
}

input HomeTeamFixtureCreateWithoutHomeTeamInput {
  id: ID
  fixture: FixtureCreateOneWithoutTeamHInput!
}

"""An edge in a connection."""
type HomeTeamFixtureEdge {
  """The item at the end of the edge."""
  node: HomeTeamFixture!

  """A cursor for use in pagination."""
  cursor: String!
}

enum HomeTeamFixtureOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HomeTeamFixturePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input HomeTeamFixtureScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [HomeTeamFixtureScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [HomeTeamFixtureScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HomeTeamFixtureScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type HomeTeamFixtureSubscriptionPayload {
  mutation: MutationType!
  node: HomeTeamFixture
  updatedFields: [String!]
  previousValues: HomeTeamFixturePreviousValues
}

input HomeTeamFixtureSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [HomeTeamFixtureSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [HomeTeamFixtureSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HomeTeamFixtureSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HomeTeamFixtureWhereInput
}

input HomeTeamFixtureUpdateInput {
  fixture: FixtureUpdateOneRequiredWithoutTeamHInput
  homeTeam: TeamUpdateOneRequiredWithoutHomeFixturesInput
}

input HomeTeamFixtureUpdateManyWithoutHomeTeamInput {
  create: [HomeTeamFixtureCreateWithoutHomeTeamInput!]
  connect: [HomeTeamFixtureWhereUniqueInput!]
  set: [HomeTeamFixtureWhereUniqueInput!]
  disconnect: [HomeTeamFixtureWhereUniqueInput!]
  delete: [HomeTeamFixtureWhereUniqueInput!]
  update: [HomeTeamFixtureUpdateWithWhereUniqueWithoutHomeTeamInput!]
  deleteMany: [HomeTeamFixtureScalarWhereInput!]
  upsert: [HomeTeamFixtureUpsertWithWhereUniqueWithoutHomeTeamInput!]
}

input HomeTeamFixtureUpdateOneRequiredWithoutFixtureInput {
  create: HomeTeamFixtureCreateWithoutFixtureInput
  connect: HomeTeamFixtureWhereUniqueInput
  update: HomeTeamFixtureUpdateWithoutFixtureDataInput
  upsert: HomeTeamFixtureUpsertWithoutFixtureInput
}

input HomeTeamFixtureUpdateWithoutFixtureDataInput {
  homeTeam: TeamUpdateOneRequiredWithoutHomeFixturesInput
}

input HomeTeamFixtureUpdateWithoutHomeTeamDataInput {
  fixture: FixtureUpdateOneRequiredWithoutTeamHInput
}

input HomeTeamFixtureUpdateWithWhereUniqueWithoutHomeTeamInput {
  where: HomeTeamFixtureWhereUniqueInput!
  data: HomeTeamFixtureUpdateWithoutHomeTeamDataInput!
}

input HomeTeamFixtureUpsertWithoutFixtureInput {
  update: HomeTeamFixtureUpdateWithoutFixtureDataInput!
  create: HomeTeamFixtureCreateWithoutFixtureInput!
}

input HomeTeamFixtureUpsertWithWhereUniqueWithoutHomeTeamInput {
  where: HomeTeamFixtureWhereUniqueInput!
  update: HomeTeamFixtureUpdateWithoutHomeTeamDataInput!
  create: HomeTeamFixtureCreateWithoutHomeTeamInput!
}

input HomeTeamFixtureWhereInput {
  """Logical AND on all given filters."""
  AND: [HomeTeamFixtureWhereInput!]

  """Logical OR on all given filters."""
  OR: [HomeTeamFixtureWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [HomeTeamFixtureWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  fixture: FixtureWhereInput
  homeTeam: TeamWhereInput
}

input HomeTeamFixtureWhereUniqueInput {
  id: ID
}

type Influencer implements Node {
  id: ID!
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type InfluencerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InfluencerEdge]!
  aggregate: AggregateInfluencer!
}

input InfluencerCreateInput {
  id: ID
  user: UserCreateOneInput!
}

input InfluencerCreateManyInput {
  create: [InfluencerCreateInput!]
  connect: [InfluencerWhereUniqueInput!]
}

"""An edge in a connection."""
type InfluencerEdge {
  """The item at the end of the edge."""
  node: Influencer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InfluencerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InfluencerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input InfluencerScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [InfluencerScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [InfluencerScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InfluencerScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type InfluencerSubscriptionPayload {
  mutation: MutationType!
  node: Influencer
  updatedFields: [String!]
  previousValues: InfluencerPreviousValues
}

input InfluencerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InfluencerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InfluencerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InfluencerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InfluencerWhereInput
}

input InfluencerUpdateDataInput {
  user: UserUpdateOneRequiredInput
}

input InfluencerUpdateInput {
  user: UserUpdateOneRequiredInput
}

input InfluencerUpdateManyInput {
  create: [InfluencerCreateInput!]
  connect: [InfluencerWhereUniqueInput!]
  set: [InfluencerWhereUniqueInput!]
  disconnect: [InfluencerWhereUniqueInput!]
  delete: [InfluencerWhereUniqueInput!]
  update: [InfluencerUpdateWithWhereUniqueNestedInput!]
  deleteMany: [InfluencerScalarWhereInput!]
  upsert: [InfluencerUpsertWithWhereUniqueNestedInput!]
}

input InfluencerUpdateWithWhereUniqueNestedInput {
  where: InfluencerWhereUniqueInput!
  data: InfluencerUpdateDataInput!
}

input InfluencerUpsertWithWhereUniqueNestedInput {
  where: InfluencerWhereUniqueInput!
  update: InfluencerUpdateDataInput!
  create: InfluencerCreateInput!
}

input InfluencerWhereInput {
  """Logical AND on all given filters."""
  AND: [InfluencerWhereInput!]

  """Logical OR on all given filters."""
  OR: [InfluencerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InfluencerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
}

input InfluencerWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUserPhoto(data: UserPhotoCreateInput!): UserPhoto!
  createStatus(data: StatusCreateInput!): Status!
  createUserFollowers(data: UserFollowersCreateInput!): UserFollowers!
  createUserInfluencers(data: UserInfluencersCreateInput!): UserInfluencers!
  createUserAssignedRole(data: UserAssignedRoleCreateInput!): UserAssignedRole!
  createActiveSubscriptions(data: ActiveSubscriptionsCreateInput!): ActiveSubscriptions!
  createHomeTeamFixture(data: HomeTeamFixtureCreateInput!): HomeTeamFixture!
  createAwayTeamFixture(data: AwayTeamFixtureCreateInput!): AwayTeamFixture!
  createContestSlate(data: ContestSlateCreateInput!): ContestSlate!
  createContestSlateEntry(data: ContestSlateEntryCreateInput!): ContestSlateEntry!
  createContestPrediction(data: ContestPredictionCreateInput!): ContestPrediction!
  createScoringSystemHeader(data: ScoringSystemHeaderCreateInput!): ScoringSystemHeader!
  createContestPredictionScore(data: ContestPredictionScoreCreateInput!): ContestPredictionScore!
  createTeam(data: TeamCreateInput!): Team!
  createPhoto(data: PhotoCreateInput!): Photo!
  createDefaultScoringSystemDetail(data: DefaultScoringSystemDetailCreateInput!): DefaultScoringSystemDetail!
  createContestType(data: ContestTypeCreateInput!): ContestType!
  createInfluencer(data: InfluencerCreateInput!): Influencer!
  createContest(data: ContestCreateInput!): Contest!
  createFollower(data: FollowerCreateInput!): Follower!
  createContestUserType(data: ContestUserTypeCreateInput!): ContestUserType!
  createContestCreator(data: ContestCreatorCreateInput!): ContestCreator!
  createDefaultScoringSystemHeader(data: DefaultScoringSystemHeaderCreateInput!): DefaultScoringSystemHeader!
  createScoringType(data: ScoringTypeCreateInput!): ScoringType!
  createSeason(data: SeasonCreateInput!): Season!
  createUserStatus(data: UserStatusCreateInput!): UserStatus!
  createContestUser(data: ContestUserCreateInput!): ContestUser!
  createCountry(data: CountryCreateInput!): Country!
  createFandemSubscription(data: FandemSubscriptionCreateInput!): FandemSubscription!
  createFixture(data: FixtureCreateInput!): Fixture!
  createGameweek(data: GameweekCreateInput!): Gameweek!
  createContestOwner(data: ContestOwnerCreateInput!): ContestOwner!
  createContestInviter(data: ContestInviterCreateInput!): ContestInviter!
  createScoringSystemDetail(data: ScoringSystemDetailCreateInput!): ScoringSystemDetail!
  createUser(data: UserCreateInput!): User!
  createUserRole(data: UserRoleCreateInput!): UserRole!
  updateUserPhoto(data: UserPhotoUpdateInput!, where: UserPhotoWhereUniqueInput!): UserPhoto
  updateStatus(data: StatusUpdateInput!, where: StatusWhereUniqueInput!): Status
  updateUserFollowers(data: UserFollowersUpdateInput!, where: UserFollowersWhereUniqueInput!): UserFollowers
  updateUserInfluencers(data: UserInfluencersUpdateInput!, where: UserInfluencersWhereUniqueInput!): UserInfluencers
  updateUserAssignedRole(data: UserAssignedRoleUpdateInput!, where: UserAssignedRoleWhereUniqueInput!): UserAssignedRole
  updateActiveSubscriptions(data: ActiveSubscriptionsUpdateInput!, where: ActiveSubscriptionsWhereUniqueInput!): ActiveSubscriptions
  updateHomeTeamFixture(data: HomeTeamFixtureUpdateInput!, where: HomeTeamFixtureWhereUniqueInput!): HomeTeamFixture
  updateAwayTeamFixture(data: AwayTeamFixtureUpdateInput!, where: AwayTeamFixtureWhereUniqueInput!): AwayTeamFixture
  updateContestSlate(data: ContestSlateUpdateInput!, where: ContestSlateWhereUniqueInput!): ContestSlate
  updateContestSlateEntry(data: ContestSlateEntryUpdateInput!, where: ContestSlateEntryWhereUniqueInput!): ContestSlateEntry
  updateContestPrediction(data: ContestPredictionUpdateInput!, where: ContestPredictionWhereUniqueInput!): ContestPrediction
  updateScoringSystemHeader(data: ScoringSystemHeaderUpdateInput!, where: ScoringSystemHeaderWhereUniqueInput!): ScoringSystemHeader
  updateContestPredictionScore(data: ContestPredictionScoreUpdateInput!, where: ContestPredictionScoreWhereUniqueInput!): ContestPredictionScore
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updatePhoto(data: PhotoUpdateInput!, where: PhotoWhereUniqueInput!): Photo
  updateDefaultScoringSystemDetail(data: DefaultScoringSystemDetailUpdateInput!, where: DefaultScoringSystemDetailWhereUniqueInput!): DefaultScoringSystemDetail
  updateContestType(data: ContestTypeUpdateInput!, where: ContestTypeWhereUniqueInput!): ContestType
  updateInfluencer(data: InfluencerUpdateInput!, where: InfluencerWhereUniqueInput!): Influencer
  updateContest(data: ContestUpdateInput!, where: ContestWhereUniqueInput!): Contest
  updateFollower(data: FollowerUpdateInput!, where: FollowerWhereUniqueInput!): Follower
  updateContestUserType(data: ContestUserTypeUpdateInput!, where: ContestUserTypeWhereUniqueInput!): ContestUserType
  updateContestCreator(data: ContestCreatorUpdateInput!, where: ContestCreatorWhereUniqueInput!): ContestCreator
  updateDefaultScoringSystemHeader(data: DefaultScoringSystemHeaderUpdateInput!, where: DefaultScoringSystemHeaderWhereUniqueInput!): DefaultScoringSystemHeader
  updateScoringType(data: ScoringTypeUpdateInput!, where: ScoringTypeWhereUniqueInput!): ScoringType
  updateSeason(data: SeasonUpdateInput!, where: SeasonWhereUniqueInput!): Season
  updateUserStatus(data: UserStatusUpdateInput!, where: UserStatusWhereUniqueInput!): UserStatus
  updateContestUser(data: ContestUserUpdateInput!, where: ContestUserWhereUniqueInput!): ContestUser
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateFandemSubscription(data: FandemSubscriptionUpdateInput!, where: FandemSubscriptionWhereUniqueInput!): FandemSubscription
  updateFixture(data: FixtureUpdateInput!, where: FixtureWhereUniqueInput!): Fixture
  updateGameweek(data: GameweekUpdateInput!, where: GameweekWhereUniqueInput!): Gameweek
  updateContestOwner(data: ContestOwnerUpdateInput!, where: ContestOwnerWhereUniqueInput!): ContestOwner
  updateContestInviter(data: ContestInviterUpdateInput!, where: ContestInviterWhereUniqueInput!): ContestInviter
  updateScoringSystemDetail(data: ScoringSystemDetailUpdateInput!, where: ScoringSystemDetailWhereUniqueInput!): ScoringSystemDetail
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  deleteUserPhoto(where: UserPhotoWhereUniqueInput!): UserPhoto
  deleteStatus(where: StatusWhereUniqueInput!): Status
  deleteUserFollowers(where: UserFollowersWhereUniqueInput!): UserFollowers
  deleteUserInfluencers(where: UserInfluencersWhereUniqueInput!): UserInfluencers
  deleteUserAssignedRole(where: UserAssignedRoleWhereUniqueInput!): UserAssignedRole
  deleteActiveSubscriptions(where: ActiveSubscriptionsWhereUniqueInput!): ActiveSubscriptions
  deleteHomeTeamFixture(where: HomeTeamFixtureWhereUniqueInput!): HomeTeamFixture
  deleteAwayTeamFixture(where: AwayTeamFixtureWhereUniqueInput!): AwayTeamFixture
  deleteContestSlate(where: ContestSlateWhereUniqueInput!): ContestSlate
  deleteContestSlateEntry(where: ContestSlateEntryWhereUniqueInput!): ContestSlateEntry
  deleteContestPrediction(where: ContestPredictionWhereUniqueInput!): ContestPrediction
  deleteScoringSystemHeader(where: ScoringSystemHeaderWhereUniqueInput!): ScoringSystemHeader
  deleteContestPredictionScore(where: ContestPredictionScoreWhereUniqueInput!): ContestPredictionScore
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deleteDefaultScoringSystemDetail(where: DefaultScoringSystemDetailWhereUniqueInput!): DefaultScoringSystemDetail
  deleteContestType(where: ContestTypeWhereUniqueInput!): ContestType
  deleteInfluencer(where: InfluencerWhereUniqueInput!): Influencer
  deleteContest(where: ContestWhereUniqueInput!): Contest
  deleteFollower(where: FollowerWhereUniqueInput!): Follower
  deleteContestUserType(where: ContestUserTypeWhereUniqueInput!): ContestUserType
  deleteContestCreator(where: ContestCreatorWhereUniqueInput!): ContestCreator
  deleteDefaultScoringSystemHeader(where: DefaultScoringSystemHeaderWhereUniqueInput!): DefaultScoringSystemHeader
  deleteScoringType(where: ScoringTypeWhereUniqueInput!): ScoringType
  deleteSeason(where: SeasonWhereUniqueInput!): Season
  deleteUserStatus(where: UserStatusWhereUniqueInput!): UserStatus
  deleteContestUser(where: ContestUserWhereUniqueInput!): ContestUser
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteFandemSubscription(where: FandemSubscriptionWhereUniqueInput!): FandemSubscription
  deleteFixture(where: FixtureWhereUniqueInput!): Fixture
  deleteGameweek(where: GameweekWhereUniqueInput!): Gameweek
  deleteContestOwner(where: ContestOwnerWhereUniqueInput!): ContestOwner
  deleteContestInviter(where: ContestInviterWhereUniqueInput!): ContestInviter
  deleteScoringSystemDetail(where: ScoringSystemDetailWhereUniqueInput!): ScoringSystemDetail
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUserRole(where: UserRoleWhereUniqueInput!): UserRole
  upsertUserPhoto(where: UserPhotoWhereUniqueInput!, create: UserPhotoCreateInput!, update: UserPhotoUpdateInput!): UserPhoto!
  upsertStatus(where: StatusWhereUniqueInput!, create: StatusCreateInput!, update: StatusUpdateInput!): Status!
  upsertUserFollowers(where: UserFollowersWhereUniqueInput!, create: UserFollowersCreateInput!, update: UserFollowersUpdateInput!): UserFollowers!
  upsertUserInfluencers(where: UserInfluencersWhereUniqueInput!, create: UserInfluencersCreateInput!, update: UserInfluencersUpdateInput!): UserInfluencers!
  upsertUserAssignedRole(where: UserAssignedRoleWhereUniqueInput!, create: UserAssignedRoleCreateInput!, update: UserAssignedRoleUpdateInput!): UserAssignedRole!
  upsertActiveSubscriptions(where: ActiveSubscriptionsWhereUniqueInput!, create: ActiveSubscriptionsCreateInput!, update: ActiveSubscriptionsUpdateInput!): ActiveSubscriptions!
  upsertHomeTeamFixture(where: HomeTeamFixtureWhereUniqueInput!, create: HomeTeamFixtureCreateInput!, update: HomeTeamFixtureUpdateInput!): HomeTeamFixture!
  upsertAwayTeamFixture(where: AwayTeamFixtureWhereUniqueInput!, create: AwayTeamFixtureCreateInput!, update: AwayTeamFixtureUpdateInput!): AwayTeamFixture!
  upsertContestSlate(where: ContestSlateWhereUniqueInput!, create: ContestSlateCreateInput!, update: ContestSlateUpdateInput!): ContestSlate!
  upsertContestSlateEntry(where: ContestSlateEntryWhereUniqueInput!, create: ContestSlateEntryCreateInput!, update: ContestSlateEntryUpdateInput!): ContestSlateEntry!
  upsertContestPrediction(where: ContestPredictionWhereUniqueInput!, create: ContestPredictionCreateInput!, update: ContestPredictionUpdateInput!): ContestPrediction!
  upsertScoringSystemHeader(where: ScoringSystemHeaderWhereUniqueInput!, create: ScoringSystemHeaderCreateInput!, update: ScoringSystemHeaderUpdateInput!): ScoringSystemHeader!
  upsertContestPredictionScore(where: ContestPredictionScoreWhereUniqueInput!, create: ContestPredictionScoreCreateInput!, update: ContestPredictionScoreUpdateInput!): ContestPredictionScore!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  upsertPhoto(where: PhotoWhereUniqueInput!, create: PhotoCreateInput!, update: PhotoUpdateInput!): Photo!
  upsertDefaultScoringSystemDetail(where: DefaultScoringSystemDetailWhereUniqueInput!, create: DefaultScoringSystemDetailCreateInput!, update: DefaultScoringSystemDetailUpdateInput!): DefaultScoringSystemDetail!
  upsertContestType(where: ContestTypeWhereUniqueInput!, create: ContestTypeCreateInput!, update: ContestTypeUpdateInput!): ContestType!
  upsertInfluencer(where: InfluencerWhereUniqueInput!, create: InfluencerCreateInput!, update: InfluencerUpdateInput!): Influencer!
  upsertContest(where: ContestWhereUniqueInput!, create: ContestCreateInput!, update: ContestUpdateInput!): Contest!
  upsertFollower(where: FollowerWhereUniqueInput!, create: FollowerCreateInput!, update: FollowerUpdateInput!): Follower!
  upsertContestUserType(where: ContestUserTypeWhereUniqueInput!, create: ContestUserTypeCreateInput!, update: ContestUserTypeUpdateInput!): ContestUserType!
  upsertContestCreator(where: ContestCreatorWhereUniqueInput!, create: ContestCreatorCreateInput!, update: ContestCreatorUpdateInput!): ContestCreator!
  upsertDefaultScoringSystemHeader(where: DefaultScoringSystemHeaderWhereUniqueInput!, create: DefaultScoringSystemHeaderCreateInput!, update: DefaultScoringSystemHeaderUpdateInput!): DefaultScoringSystemHeader!
  upsertScoringType(where: ScoringTypeWhereUniqueInput!, create: ScoringTypeCreateInput!, update: ScoringTypeUpdateInput!): ScoringType!
  upsertSeason(where: SeasonWhereUniqueInput!, create: SeasonCreateInput!, update: SeasonUpdateInput!): Season!
  upsertUserStatus(where: UserStatusWhereUniqueInput!, create: UserStatusCreateInput!, update: UserStatusUpdateInput!): UserStatus!
  upsertContestUser(where: ContestUserWhereUniqueInput!, create: ContestUserCreateInput!, update: ContestUserUpdateInput!): ContestUser!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  upsertFandemSubscription(where: FandemSubscriptionWhereUniqueInput!, create: FandemSubscriptionCreateInput!, update: FandemSubscriptionUpdateInput!): FandemSubscription!
  upsertFixture(where: FixtureWhereUniqueInput!, create: FixtureCreateInput!, update: FixtureUpdateInput!): Fixture!
  upsertGameweek(where: GameweekWhereUniqueInput!, create: GameweekCreateInput!, update: GameweekUpdateInput!): Gameweek!
  upsertContestOwner(where: ContestOwnerWhereUniqueInput!, create: ContestOwnerCreateInput!, update: ContestOwnerUpdateInput!): ContestOwner!
  upsertContestInviter(where: ContestInviterWhereUniqueInput!, create: ContestInviterCreateInput!, update: ContestInviterUpdateInput!): ContestInviter!
  upsertScoringSystemDetail(where: ScoringSystemDetailWhereUniqueInput!, create: ScoringSystemDetailCreateInput!, update: ScoringSystemDetailUpdateInput!): ScoringSystemDetail!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertUserRole(where: UserRoleWhereUniqueInput!, create: UserRoleCreateInput!, update: UserRoleUpdateInput!): UserRole!
  updateManyUserPhotos(data: UserPhotoUpdateManyMutationInput!, where: UserPhotoWhereInput): BatchPayload!
  updateManyStatuses(data: StatusUpdateManyMutationInput!, where: StatusWhereInput): BatchPayload!
  updateManyActiveSubscriptionses(data: ActiveSubscriptionsUpdateManyMutationInput!, where: ActiveSubscriptionsWhereInput): BatchPayload!
  updateManyContestSlates(data: ContestSlateUpdateManyMutationInput!, where: ContestSlateWhereInput): BatchPayload!
  updateManyContestPredictions(data: ContestPredictionUpdateManyMutationInput!, where: ContestPredictionWhereInput): BatchPayload!
  updateManyScoringSystemHeaders(data: ScoringSystemHeaderUpdateManyMutationInput!, where: ScoringSystemHeaderWhereInput): BatchPayload!
  updateManyContestPredictionScores(data: ContestPredictionScoreUpdateManyMutationInput!, where: ContestPredictionScoreWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  updateManyPhotos(data: PhotoUpdateManyMutationInput!, where: PhotoWhereInput): BatchPayload!
  updateManyDefaultScoringSystemDetails(data: DefaultScoringSystemDetailUpdateManyMutationInput!, where: DefaultScoringSystemDetailWhereInput): BatchPayload!
  updateManyContestTypes(data: ContestTypeUpdateManyMutationInput!, where: ContestTypeWhereInput): BatchPayload!
  updateManyContests(data: ContestUpdateManyMutationInput!, where: ContestWhereInput): BatchPayload!
  updateManyFollowers(data: FollowerUpdateManyMutationInput!, where: FollowerWhereInput): BatchPayload!
  updateManyContestUserTypes(data: ContestUserTypeUpdateManyMutationInput!, where: ContestUserTypeWhereInput): BatchPayload!
  updateManyDefaultScoringSystemHeaders(data: DefaultScoringSystemHeaderUpdateManyMutationInput!, where: DefaultScoringSystemHeaderWhereInput): BatchPayload!
  updateManyScoringTypes(data: ScoringTypeUpdateManyMutationInput!, where: ScoringTypeWhereInput): BatchPayload!
  updateManySeasons(data: SeasonUpdateManyMutationInput!, where: SeasonWhereInput): BatchPayload!
  updateManyUserStatuses(data: UserStatusUpdateManyMutationInput!, where: UserStatusWhereInput): BatchPayload!
  updateManyContestUsers(data: ContestUserUpdateManyMutationInput!, where: ContestUserWhereInput): BatchPayload!
  updateManyCountries(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  updateManyFandemSubscriptions(data: FandemSubscriptionUpdateManyMutationInput!, where: FandemSubscriptionWhereInput): BatchPayload!
  updateManyFixtures(data: FixtureUpdateManyMutationInput!, where: FixtureWhereInput): BatchPayload!
  updateManyGameweeks(data: GameweekUpdateManyMutationInput!, where: GameweekWhereInput): BatchPayload!
  updateManyScoringSystemDetails(data: ScoringSystemDetailUpdateManyMutationInput!, where: ScoringSystemDetailWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyUserRoles(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  deleteManyUserPhotos(where: UserPhotoWhereInput): BatchPayload!
  deleteManyStatuses(where: StatusWhereInput): BatchPayload!
  deleteManyUserFollowerses(where: UserFollowersWhereInput): BatchPayload!
  deleteManyUserInfluencerses(where: UserInfluencersWhereInput): BatchPayload!
  deleteManyUserAssignedRoles(where: UserAssignedRoleWhereInput): BatchPayload!
  deleteManyActiveSubscriptionses(where: ActiveSubscriptionsWhereInput): BatchPayload!
  deleteManyHomeTeamFixtures(where: HomeTeamFixtureWhereInput): BatchPayload!
  deleteManyAwayTeamFixtures(where: AwayTeamFixtureWhereInput): BatchPayload!
  deleteManyContestSlates(where: ContestSlateWhereInput): BatchPayload!
  deleteManyContestSlateEntries(where: ContestSlateEntryWhereInput): BatchPayload!
  deleteManyContestPredictions(where: ContestPredictionWhereInput): BatchPayload!
  deleteManyScoringSystemHeaders(where: ScoringSystemHeaderWhereInput): BatchPayload!
  deleteManyContestPredictionScores(where: ContestPredictionScoreWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteManyPhotos(where: PhotoWhereInput): BatchPayload!
  deleteManyDefaultScoringSystemDetails(where: DefaultScoringSystemDetailWhereInput): BatchPayload!
  deleteManyContestTypes(where: ContestTypeWhereInput): BatchPayload!
  deleteManyInfluencers(where: InfluencerWhereInput): BatchPayload!
  deleteManyContests(where: ContestWhereInput): BatchPayload!
  deleteManyFollowers(where: FollowerWhereInput): BatchPayload!
  deleteManyContestUserTypes(where: ContestUserTypeWhereInput): BatchPayload!
  deleteManyContestCreators(where: ContestCreatorWhereInput): BatchPayload!
  deleteManyDefaultScoringSystemHeaders(where: DefaultScoringSystemHeaderWhereInput): BatchPayload!
  deleteManyScoringTypes(where: ScoringTypeWhereInput): BatchPayload!
  deleteManySeasons(where: SeasonWhereInput): BatchPayload!
  deleteManyUserStatuses(where: UserStatusWhereInput): BatchPayload!
  deleteManyContestUsers(where: ContestUserWhereInput): BatchPayload!
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  deleteManyFandemSubscriptions(where: FandemSubscriptionWhereInput): BatchPayload!
  deleteManyFixtures(where: FixtureWhereInput): BatchPayload!
  deleteManyGameweeks(where: GameweekWhereInput): BatchPayload!
  deleteManyContestOwners(where: ContestOwnerWhereInput): BatchPayload!
  deleteManyContestInviters(where: ContestInviterWhereInput): BatchPayload!
  deleteManyScoringSystemDetails(where: ScoringSystemDetailWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyUserRoles(where: UserRoleWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Photo implements Node {
  id: ID!
  image: String!
  largeImage: String
  smallImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PhotoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhotoEdge]!
  aggregate: AggregatePhoto!
}

input PhotoCreateInput {
  id: ID
  image: String!
  largeImage: String
  smallImage: String
}

input PhotoCreateOneInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

"""An edge in a connection."""
type PhotoEdge {
  """The item at the end of the edge."""
  node: Photo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhotoOrderByInput {
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  largeImage_ASC
  largeImage_DESC
  smallImage_ASC
  smallImage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PhotoPreviousValues {
  id: ID!
  image: String!
  largeImage: String
  smallImage: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PhotoSubscriptionPayload {
  mutation: MutationType!
  node: Photo
  updatedFields: [String!]
  previousValues: PhotoPreviousValues
}

input PhotoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhotoWhereInput
}

input PhotoUpdateDataInput {
  image: String
  largeImage: String
  smallImage: String
}

input PhotoUpdateInput {
  image: String
  largeImage: String
  smallImage: String
}

input PhotoUpdateManyMutationInput {
  image: String
  largeImage: String
  smallImage: String
}

input PhotoUpdateOneRequiredInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  update: PhotoUpdateDataInput
  upsert: PhotoUpsertNestedInput
}

input PhotoUpsertNestedInput {
  update: PhotoUpdateDataInput!
  create: PhotoCreateInput!
}

input PhotoWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  largeImage: String

  """All values that are not equal to given value."""
  largeImage_not: String

  """All values that are contained in given list."""
  largeImage_in: [String!]

  """All values that are not contained in given list."""
  largeImage_not_in: [String!]

  """All values less than the given value."""
  largeImage_lt: String

  """All values less than or equal the given value."""
  largeImage_lte: String

  """All values greater than the given value."""
  largeImage_gt: String

  """All values greater than or equal the given value."""
  largeImage_gte: String

  """All values containing the given string."""
  largeImage_contains: String

  """All values not containing the given string."""
  largeImage_not_contains: String

  """All values starting with the given string."""
  largeImage_starts_with: String

  """All values not starting with the given string."""
  largeImage_not_starts_with: String

  """All values ending with the given string."""
  largeImage_ends_with: String

  """All values not ending with the given string."""
  largeImage_not_ends_with: String
  smallImage: String

  """All values that are not equal to given value."""
  smallImage_not: String

  """All values that are contained in given list."""
  smallImage_in: [String!]

  """All values that are not contained in given list."""
  smallImage_not_in: [String!]

  """All values less than the given value."""
  smallImage_lt: String

  """All values less than or equal the given value."""
  smallImage_lte: String

  """All values greater than the given value."""
  smallImage_gt: String

  """All values greater than or equal the given value."""
  smallImage_gte: String

  """All values containing the given string."""
  smallImage_contains: String

  """All values not containing the given string."""
  smallImage_not_contains: String

  """All values starting with the given string."""
  smallImage_starts_with: String

  """All values not starting with the given string."""
  smallImage_not_starts_with: String

  """All values ending with the given string."""
  smallImage_ends_with: String

  """All values not ending with the given string."""
  smallImage_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input PhotoWhereUniqueInput {
  id: ID
}

enum PrismaDatabase {
  default
}

type Query {
  userPhotos(where: UserPhotoWhereInput, orderBy: UserPhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserPhoto]!
  statuses(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Status]!
  userFollowerses(where: UserFollowersWhereInput, orderBy: UserFollowersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserFollowers]!
  userInfluencerses(where: UserInfluencersWhereInput, orderBy: UserInfluencersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserInfluencers]!
  userAssignedRoles(where: UserAssignedRoleWhereInput, orderBy: UserAssignedRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAssignedRole]!
  activeSubscriptionses(where: ActiveSubscriptionsWhereInput, orderBy: ActiveSubscriptionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActiveSubscriptions]!
  homeTeamFixtures(where: HomeTeamFixtureWhereInput, orderBy: HomeTeamFixtureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HomeTeamFixture]!
  awayTeamFixtures(where: AwayTeamFixtureWhereInput, orderBy: AwayTeamFixtureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AwayTeamFixture]!
  contestSlates(where: ContestSlateWhereInput, orderBy: ContestSlateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestSlate]!
  contestSlateEntries(where: ContestSlateEntryWhereInput, orderBy: ContestSlateEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestSlateEntry]!
  contestPredictions(where: ContestPredictionWhereInput, orderBy: ContestPredictionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestPrediction]!
  scoringSystemHeaders(where: ScoringSystemHeaderWhereInput, orderBy: ScoringSystemHeaderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScoringSystemHeader]!
  contestPredictionScores(where: ContestPredictionScoreWhereInput, orderBy: ContestPredictionScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestPredictionScore]!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo]!
  defaultScoringSystemDetails(where: DefaultScoringSystemDetailWhereInput, orderBy: DefaultScoringSystemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DefaultScoringSystemDetail]!
  contestTypes(where: ContestTypeWhereInput, orderBy: ContestTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestType]!
  influencers(where: InfluencerWhereInput, orderBy: InfluencerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Influencer]!
  contests(where: ContestWhereInput, orderBy: ContestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contest]!
  followers(where: FollowerWhereInput, orderBy: FollowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follower]!
  contestUserTypes(where: ContestUserTypeWhereInput, orderBy: ContestUserTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestUserType]!
  contestCreators(where: ContestCreatorWhereInput, orderBy: ContestCreatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestCreator]!
  defaultScoringSystemHeaders(where: DefaultScoringSystemHeaderWhereInput, orderBy: DefaultScoringSystemHeaderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DefaultScoringSystemHeader]!
  scoringTypes(where: ScoringTypeWhereInput, orderBy: ScoringTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScoringType]!
  seasons(where: SeasonWhereInput, orderBy: SeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Season]!
  userStatuses(where: UserStatusWhereInput, orderBy: UserStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStatus]!
  contestUsers(where: ContestUserWhereInput, orderBy: ContestUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestUser]!
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  fandemSubscriptions(where: FandemSubscriptionWhereInput, orderBy: FandemSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FandemSubscription]!
  fixtures(where: FixtureWhereInput, orderBy: FixtureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Fixture]!
  gameweeks(where: GameweekWhereInput, orderBy: GameweekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gameweek]!
  contestOwners(where: ContestOwnerWhereInput, orderBy: ContestOwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestOwner]!
  contestInviters(where: ContestInviterWhereInput, orderBy: ContestInviterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestInviter]!
  scoringSystemDetails(where: ScoringSystemDetailWhereInput, orderBy: ScoringSystemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScoringSystemDetail]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  userRoles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole]!
  userPhoto(where: UserPhotoWhereUniqueInput!): UserPhoto
  status(where: StatusWhereUniqueInput!): Status
  userFollowers(where: UserFollowersWhereUniqueInput!): UserFollowers
  userInfluencers(where: UserInfluencersWhereUniqueInput!): UserInfluencers
  userAssignedRole(where: UserAssignedRoleWhereUniqueInput!): UserAssignedRole
  activeSubscriptions(where: ActiveSubscriptionsWhereUniqueInput!): ActiveSubscriptions
  homeTeamFixture(where: HomeTeamFixtureWhereUniqueInput!): HomeTeamFixture
  awayTeamFixture(where: AwayTeamFixtureWhereUniqueInput!): AwayTeamFixture
  contestSlate(where: ContestSlateWhereUniqueInput!): ContestSlate
  contestSlateEntry(where: ContestSlateEntryWhereUniqueInput!): ContestSlateEntry
  contestPrediction(where: ContestPredictionWhereUniqueInput!): ContestPrediction
  scoringSystemHeader(where: ScoringSystemHeaderWhereUniqueInput!): ScoringSystemHeader
  contestPredictionScore(where: ContestPredictionScoreWhereUniqueInput!): ContestPredictionScore
  team(where: TeamWhereUniqueInput!): Team
  photo(where: PhotoWhereUniqueInput!): Photo
  defaultScoringSystemDetail(where: DefaultScoringSystemDetailWhereUniqueInput!): DefaultScoringSystemDetail
  contestType(where: ContestTypeWhereUniqueInput!): ContestType
  influencer(where: InfluencerWhereUniqueInput!): Influencer
  contest(where: ContestWhereUniqueInput!): Contest
  follower(where: FollowerWhereUniqueInput!): Follower
  contestUserType(where: ContestUserTypeWhereUniqueInput!): ContestUserType
  contestCreator(where: ContestCreatorWhereUniqueInput!): ContestCreator
  defaultScoringSystemHeader(where: DefaultScoringSystemHeaderWhereUniqueInput!): DefaultScoringSystemHeader
  scoringType(where: ScoringTypeWhereUniqueInput!): ScoringType
  season(where: SeasonWhereUniqueInput!): Season
  userStatus(where: UserStatusWhereUniqueInput!): UserStatus
  contestUser(where: ContestUserWhereUniqueInput!): ContestUser
  country(where: CountryWhereUniqueInput!): Country
  fandemSubscription(where: FandemSubscriptionWhereUniqueInput!): FandemSubscription
  fixture(where: FixtureWhereUniqueInput!): Fixture
  gameweek(where: GameweekWhereUniqueInput!): Gameweek
  contestOwner(where: ContestOwnerWhereUniqueInput!): ContestOwner
  contestInviter(where: ContestInviterWhereUniqueInput!): ContestInviter
  scoringSystemDetail(where: ScoringSystemDetailWhereUniqueInput!): ScoringSystemDetail
  user(where: UserWhereUniqueInput!): User
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  userPhotosConnection(where: UserPhotoWhereInput, orderBy: UserPhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserPhotoConnection!
  statusesConnection(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatusConnection!
  userFollowersesConnection(where: UserFollowersWhereInput, orderBy: UserFollowersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserFollowersConnection!
  userInfluencersesConnection(where: UserInfluencersWhereInput, orderBy: UserInfluencersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserInfluencersConnection!
  userAssignedRolesConnection(where: UserAssignedRoleWhereInput, orderBy: UserAssignedRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserAssignedRoleConnection!
  activeSubscriptionsesConnection(where: ActiveSubscriptionsWhereInput, orderBy: ActiveSubscriptionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActiveSubscriptionsConnection!
  homeTeamFixturesConnection(where: HomeTeamFixtureWhereInput, orderBy: HomeTeamFixtureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HomeTeamFixtureConnection!
  awayTeamFixturesConnection(where: AwayTeamFixtureWhereInput, orderBy: AwayTeamFixtureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AwayTeamFixtureConnection!
  contestSlatesConnection(where: ContestSlateWhereInput, orderBy: ContestSlateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestSlateConnection!
  contestSlateEntriesConnection(where: ContestSlateEntryWhereInput, orderBy: ContestSlateEntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestSlateEntryConnection!
  contestPredictionsConnection(where: ContestPredictionWhereInput, orderBy: ContestPredictionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestPredictionConnection!
  scoringSystemHeadersConnection(where: ScoringSystemHeaderWhereInput, orderBy: ScoringSystemHeaderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScoringSystemHeaderConnection!
  contestPredictionScoresConnection(where: ContestPredictionScoreWhereInput, orderBy: ContestPredictionScoreOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestPredictionScoreConnection!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  photosConnection(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhotoConnection!
  defaultScoringSystemDetailsConnection(where: DefaultScoringSystemDetailWhereInput, orderBy: DefaultScoringSystemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DefaultScoringSystemDetailConnection!
  contestTypesConnection(where: ContestTypeWhereInput, orderBy: ContestTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestTypeConnection!
  influencersConnection(where: InfluencerWhereInput, orderBy: InfluencerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InfluencerConnection!
  contestsConnection(where: ContestWhereInput, orderBy: ContestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestConnection!
  followersConnection(where: FollowerWhereInput, orderBy: FollowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FollowerConnection!
  contestUserTypesConnection(where: ContestUserTypeWhereInput, orderBy: ContestUserTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestUserTypeConnection!
  contestCreatorsConnection(where: ContestCreatorWhereInput, orderBy: ContestCreatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestCreatorConnection!
  defaultScoringSystemHeadersConnection(where: DefaultScoringSystemHeaderWhereInput, orderBy: DefaultScoringSystemHeaderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DefaultScoringSystemHeaderConnection!
  scoringTypesConnection(where: ScoringTypeWhereInput, orderBy: ScoringTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScoringTypeConnection!
  seasonsConnection(where: SeasonWhereInput, orderBy: SeasonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SeasonConnection!
  userStatusesConnection(where: UserStatusWhereInput, orderBy: UserStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserStatusConnection!
  contestUsersConnection(where: ContestUserWhereInput, orderBy: ContestUserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestUserConnection!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  fandemSubscriptionsConnection(where: FandemSubscriptionWhereInput, orderBy: FandemSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FandemSubscriptionConnection!
  fixturesConnection(where: FixtureWhereInput, orderBy: FixtureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FixtureConnection!
  gameweeksConnection(where: GameweekWhereInput, orderBy: GameweekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GameweekConnection!
  contestOwnersConnection(where: ContestOwnerWhereInput, orderBy: ContestOwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestOwnerConnection!
  contestInvitersConnection(where: ContestInviterWhereInput, orderBy: ContestInviterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestInviterConnection!
  scoringSystemDetailsConnection(where: ScoringSystemDetailWhereInput, orderBy: ScoringSystemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScoringSystemDetailConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userRolesConnection(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserRoleConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type ScoringSystemDetail implements Node {
  id: ID!
  system: ScoringSystemHeader!
  inheritedFrom: DefaultScoringSystemDetail!
  name: String!
  description: String
  scoringType: ScoringType!
  isActive: Boolean!
  isDefault: Boolean!
  lastModifiedBy: User!
  startDate: DateTime!
  endDate: DateTime
  points: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ScoringSystemDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScoringSystemDetailEdge]!
  aggregate: AggregateScoringSystemDetail!
}

input ScoringSystemDetailCreateInput {
  id: ID
  name: String!
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime!
  endDate: DateTime
  points: Int!
  system: ScoringSystemHeaderCreateOneWithoutDetailInput!
  inheritedFrom: DefaultScoringSystemDetailCreateOneInput!
  scoringType: ScoringTypeCreateOneInput!
  lastModifiedBy: UserCreateOneInput!
}

input ScoringSystemDetailCreateManyWithoutSystemInput {
  create: [ScoringSystemDetailCreateWithoutSystemInput!]
  connect: [ScoringSystemDetailWhereUniqueInput!]
}

input ScoringSystemDetailCreateOneInput {
  create: ScoringSystemDetailCreateInput
  connect: ScoringSystemDetailWhereUniqueInput
}

input ScoringSystemDetailCreateWithoutSystemInput {
  id: ID
  name: String!
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime!
  endDate: DateTime
  points: Int!
  inheritedFrom: DefaultScoringSystemDetailCreateOneInput!
  scoringType: ScoringTypeCreateOneInput!
  lastModifiedBy: UserCreateOneInput!
}

"""An edge in a connection."""
type ScoringSystemDetailEdge {
  """The item at the end of the edge."""
  node: ScoringSystemDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScoringSystemDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  isActive_ASC
  isActive_DESC
  isDefault_ASC
  isDefault_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  points_ASC
  points_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ScoringSystemDetailPreviousValues {
  id: ID!
  name: String!
  description: String
  isActive: Boolean!
  isDefault: Boolean!
  startDate: DateTime!
  endDate: DateTime
  points: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ScoringSystemDetailScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoringSystemDetailScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoringSystemDetailScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoringSystemDetailScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isDefault: Boolean

  """All values that are not equal to given value."""
  isDefault_not: Boolean
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  points: Int

  """All values that are not equal to given value."""
  points_not: Int

  """All values that are contained in given list."""
  points_in: [Int!]

  """All values that are not contained in given list."""
  points_not_in: [Int!]

  """All values less than the given value."""
  points_lt: Int

  """All values less than or equal the given value."""
  points_lte: Int

  """All values greater than the given value."""
  points_gt: Int

  """All values greater than or equal the given value."""
  points_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type ScoringSystemDetailSubscriptionPayload {
  mutation: MutationType!
  node: ScoringSystemDetail
  updatedFields: [String!]
  previousValues: ScoringSystemDetailPreviousValues
}

input ScoringSystemDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoringSystemDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoringSystemDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoringSystemDetailSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScoringSystemDetailWhereInput
}

input ScoringSystemDetailUpdateDataInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
  system: ScoringSystemHeaderUpdateOneRequiredWithoutDetailInput
  inheritedFrom: DefaultScoringSystemDetailUpdateOneRequiredInput
  scoringType: ScoringTypeUpdateOneRequiredInput
  lastModifiedBy: UserUpdateOneRequiredInput
}

input ScoringSystemDetailUpdateInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
  system: ScoringSystemHeaderUpdateOneRequiredWithoutDetailInput
  inheritedFrom: DefaultScoringSystemDetailUpdateOneRequiredInput
  scoringType: ScoringTypeUpdateOneRequiredInput
  lastModifiedBy: UserUpdateOneRequiredInput
}

input ScoringSystemDetailUpdateManyDataInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
}

input ScoringSystemDetailUpdateManyMutationInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
}

input ScoringSystemDetailUpdateManyWithoutSystemInput {
  create: [ScoringSystemDetailCreateWithoutSystemInput!]
  connect: [ScoringSystemDetailWhereUniqueInput!]
  set: [ScoringSystemDetailWhereUniqueInput!]
  disconnect: [ScoringSystemDetailWhereUniqueInput!]
  delete: [ScoringSystemDetailWhereUniqueInput!]
  update: [ScoringSystemDetailUpdateWithWhereUniqueWithoutSystemInput!]
  updateMany: [ScoringSystemDetailUpdateManyWithWhereNestedInput!]
  deleteMany: [ScoringSystemDetailScalarWhereInput!]
  upsert: [ScoringSystemDetailUpsertWithWhereUniqueWithoutSystemInput!]
}

input ScoringSystemDetailUpdateManyWithWhereNestedInput {
  where: ScoringSystemDetailScalarWhereInput!
  data: ScoringSystemDetailUpdateManyDataInput!
}

input ScoringSystemDetailUpdateOneRequiredInput {
  create: ScoringSystemDetailCreateInput
  connect: ScoringSystemDetailWhereUniqueInput
  update: ScoringSystemDetailUpdateDataInput
  upsert: ScoringSystemDetailUpsertNestedInput
}

input ScoringSystemDetailUpdateWithoutSystemDataInput {
  name: String
  description: String
  isActive: Boolean
  isDefault: Boolean
  startDate: DateTime
  endDate: DateTime
  points: Int
  inheritedFrom: DefaultScoringSystemDetailUpdateOneRequiredInput
  scoringType: ScoringTypeUpdateOneRequiredInput
  lastModifiedBy: UserUpdateOneRequiredInput
}

input ScoringSystemDetailUpdateWithWhereUniqueWithoutSystemInput {
  where: ScoringSystemDetailWhereUniqueInput!
  data: ScoringSystemDetailUpdateWithoutSystemDataInput!
}

input ScoringSystemDetailUpsertNestedInput {
  update: ScoringSystemDetailUpdateDataInput!
  create: ScoringSystemDetailCreateInput!
}

input ScoringSystemDetailUpsertWithWhereUniqueWithoutSystemInput {
  where: ScoringSystemDetailWhereUniqueInput!
  update: ScoringSystemDetailUpdateWithoutSystemDataInput!
  create: ScoringSystemDetailCreateWithoutSystemInput!
}

input ScoringSystemDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoringSystemDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoringSystemDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoringSystemDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  isActive: Boolean

  """All values that are not equal to given value."""
  isActive_not: Boolean
  isDefault: Boolean

  """All values that are not equal to given value."""
  isDefault_not: Boolean
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  points: Int

  """All values that are not equal to given value."""
  points_not: Int

  """All values that are contained in given list."""
  points_in: [Int!]

  """All values that are not contained in given list."""
  points_not_in: [Int!]

  """All values less than the given value."""
  points_lt: Int

  """All values less than or equal the given value."""
  points_lte: Int

  """All values greater than the given value."""
  points_gt: Int

  """All values greater than or equal the given value."""
  points_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  system: ScoringSystemHeaderWhereInput
  inheritedFrom: DefaultScoringSystemDetailWhereInput
  scoringType: ScoringTypeWhereInput
  lastModifiedBy: UserWhereInput
}

input ScoringSystemDetailWhereUniqueInput {
  id: ID
}

type ScoringSystemHeader implements Node {
  id: ID!
  contest: Contest!
  inheritedFrom: DefaultScoringSystemHeader
  isCustom: Boolean!
  detail(where: ScoringSystemDetailWhereInput, orderBy: ScoringSystemDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ScoringSystemDetail!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ScoringSystemHeaderConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScoringSystemHeaderEdge]!
  aggregate: AggregateScoringSystemHeader!
}

input ScoringSystemHeaderCreateInput {
  id: ID
  isCustom: Boolean!
  contest: ContestCreateOneWithoutScoringSystemInput!
  inheritedFrom: DefaultScoringSystemHeaderCreateOneInput
  detail: ScoringSystemDetailCreateManyWithoutSystemInput
}

input ScoringSystemHeaderCreateOneWithoutContestInput {
  create: ScoringSystemHeaderCreateWithoutContestInput
  connect: ScoringSystemHeaderWhereUniqueInput
}

input ScoringSystemHeaderCreateOneWithoutDetailInput {
  create: ScoringSystemHeaderCreateWithoutDetailInput
  connect: ScoringSystemHeaderWhereUniqueInput
}

input ScoringSystemHeaderCreateWithoutContestInput {
  id: ID
  isCustom: Boolean!
  inheritedFrom: DefaultScoringSystemHeaderCreateOneInput
  detail: ScoringSystemDetailCreateManyWithoutSystemInput
}

input ScoringSystemHeaderCreateWithoutDetailInput {
  id: ID
  isCustom: Boolean!
  contest: ContestCreateOneWithoutScoringSystemInput!
  inheritedFrom: DefaultScoringSystemHeaderCreateOneInput
}

"""An edge in a connection."""
type ScoringSystemHeaderEdge {
  """The item at the end of the edge."""
  node: ScoringSystemHeader!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScoringSystemHeaderOrderByInput {
  id_ASC
  id_DESC
  isCustom_ASC
  isCustom_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ScoringSystemHeaderPreviousValues {
  id: ID!
  isCustom: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ScoringSystemHeaderSubscriptionPayload {
  mutation: MutationType!
  node: ScoringSystemHeader
  updatedFields: [String!]
  previousValues: ScoringSystemHeaderPreviousValues
}

input ScoringSystemHeaderSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoringSystemHeaderSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoringSystemHeaderSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoringSystemHeaderSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScoringSystemHeaderWhereInput
}

input ScoringSystemHeaderUpdateInput {
  isCustom: Boolean
  contest: ContestUpdateOneRequiredWithoutScoringSystemInput
  inheritedFrom: DefaultScoringSystemHeaderUpdateOneInput
  detail: ScoringSystemDetailUpdateManyWithoutSystemInput
}

input ScoringSystemHeaderUpdateManyMutationInput {
  isCustom: Boolean
}

input ScoringSystemHeaderUpdateOneRequiredWithoutContestInput {
  create: ScoringSystemHeaderCreateWithoutContestInput
  connect: ScoringSystemHeaderWhereUniqueInput
  update: ScoringSystemHeaderUpdateWithoutContestDataInput
  upsert: ScoringSystemHeaderUpsertWithoutContestInput
}

input ScoringSystemHeaderUpdateOneRequiredWithoutDetailInput {
  create: ScoringSystemHeaderCreateWithoutDetailInput
  connect: ScoringSystemHeaderWhereUniqueInput
  update: ScoringSystemHeaderUpdateWithoutDetailDataInput
  upsert: ScoringSystemHeaderUpsertWithoutDetailInput
}

input ScoringSystemHeaderUpdateWithoutContestDataInput {
  isCustom: Boolean
  inheritedFrom: DefaultScoringSystemHeaderUpdateOneInput
  detail: ScoringSystemDetailUpdateManyWithoutSystemInput
}

input ScoringSystemHeaderUpdateWithoutDetailDataInput {
  isCustom: Boolean
  contest: ContestUpdateOneRequiredWithoutScoringSystemInput
  inheritedFrom: DefaultScoringSystemHeaderUpdateOneInput
}

input ScoringSystemHeaderUpsertWithoutContestInput {
  update: ScoringSystemHeaderUpdateWithoutContestDataInput!
  create: ScoringSystemHeaderCreateWithoutContestInput!
}

input ScoringSystemHeaderUpsertWithoutDetailInput {
  update: ScoringSystemHeaderUpdateWithoutDetailDataInput!
  create: ScoringSystemHeaderCreateWithoutDetailInput!
}

input ScoringSystemHeaderWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoringSystemHeaderWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoringSystemHeaderWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoringSystemHeaderWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isCustom: Boolean

  """All values that are not equal to given value."""
  isCustom_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  contest: ContestWhereInput
  inheritedFrom: DefaultScoringSystemHeaderWhereInput
  detail_every: ScoringSystemDetailWhereInput
  detail_some: ScoringSystemDetailWhereInput
  detail_none: ScoringSystemDetailWhereInput
}

input ScoringSystemHeaderWhereUniqueInput {
  id: ID
}

type ScoringType implements Node {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ScoringTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScoringTypeEdge]!
  aggregate: AggregateScoringType!
}

input ScoringTypeCreateInput {
  id: ID
  name: String!
  description: String!
}

input ScoringTypeCreateOneInput {
  create: ScoringTypeCreateInput
  connect: ScoringTypeWhereUniqueInput
}

"""An edge in a connection."""
type ScoringTypeEdge {
  """The item at the end of the edge."""
  node: ScoringType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ScoringTypeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ScoringTypePreviousValues {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ScoringTypeSubscriptionPayload {
  mutation: MutationType!
  node: ScoringType
  updatedFields: [String!]
  previousValues: ScoringTypePreviousValues
}

input ScoringTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoringTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoringTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoringTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ScoringTypeWhereInput
}

input ScoringTypeUpdateDataInput {
  name: String
  description: String
}

input ScoringTypeUpdateInput {
  name: String
  description: String
}

input ScoringTypeUpdateManyMutationInput {
  name: String
  description: String
}

input ScoringTypeUpdateOneRequiredInput {
  create: ScoringTypeCreateInput
  connect: ScoringTypeWhereUniqueInput
  update: ScoringTypeUpdateDataInput
  upsert: ScoringTypeUpsertNestedInput
}

input ScoringTypeUpsertNestedInput {
  update: ScoringTypeUpdateDataInput!
  create: ScoringTypeCreateInput!
}

input ScoringTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [ScoringTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ScoringTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ScoringTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input ScoringTypeWhereUniqueInput {
  id: ID
}

type Season implements Node {
  id: ID!
  fplId: Int!
  label: String!
  competition: String!
  startYear: Int!
  endYear: Int!
  isCurrent: Boolean!
  isPrevious: Boolean!
  isNext: Boolean!
  events(where: GameweekWhereInput, orderBy: GameweekOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Gameweek!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SeasonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SeasonEdge]!
  aggregate: AggregateSeason!
}

input SeasonCreateInput {
  id: ID
  fplId: Int!
  label: String!
  competition: String!
  startYear: Int!
  endYear: Int!
  isCurrent: Boolean!
  isPrevious: Boolean!
  isNext: Boolean!
  events: GameweekCreateManyWithoutSeasonInput
}

input SeasonCreateOneInput {
  create: SeasonCreateInput
  connect: SeasonWhereUniqueInput
}

input SeasonCreateOneWithoutEventsInput {
  create: SeasonCreateWithoutEventsInput
  connect: SeasonWhereUniqueInput
}

input SeasonCreateWithoutEventsInput {
  id: ID
  fplId: Int!
  label: String!
  competition: String!
  startYear: Int!
  endYear: Int!
  isCurrent: Boolean!
  isPrevious: Boolean!
  isNext: Boolean!
}

"""An edge in a connection."""
type SeasonEdge {
  """The item at the end of the edge."""
  node: Season!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SeasonOrderByInput {
  id_ASC
  id_DESC
  fplId_ASC
  fplId_DESC
  label_ASC
  label_DESC
  competition_ASC
  competition_DESC
  startYear_ASC
  startYear_DESC
  endYear_ASC
  endYear_DESC
  isCurrent_ASC
  isCurrent_DESC
  isPrevious_ASC
  isPrevious_DESC
  isNext_ASC
  isNext_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SeasonPreviousValues {
  id: ID!
  fplId: Int!
  label: String!
  competition: String!
  startYear: Int!
  endYear: Int!
  isCurrent: Boolean!
  isPrevious: Boolean!
  isNext: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SeasonSubscriptionPayload {
  mutation: MutationType!
  node: Season
  updatedFields: [String!]
  previousValues: SeasonPreviousValues
}

input SeasonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SeasonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeasonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeasonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SeasonWhereInput
}

input SeasonUpdateDataInput {
  fplId: Int
  label: String
  competition: String
  startYear: Int
  endYear: Int
  isCurrent: Boolean
  isPrevious: Boolean
  isNext: Boolean
  events: GameweekUpdateManyWithoutSeasonInput
}

input SeasonUpdateInput {
  fplId: Int
  label: String
  competition: String
  startYear: Int
  endYear: Int
  isCurrent: Boolean
  isPrevious: Boolean
  isNext: Boolean
  events: GameweekUpdateManyWithoutSeasonInput
}

input SeasonUpdateManyMutationInput {
  fplId: Int
  label: String
  competition: String
  startYear: Int
  endYear: Int
  isCurrent: Boolean
  isPrevious: Boolean
  isNext: Boolean
}

input SeasonUpdateOneRequiredInput {
  create: SeasonCreateInput
  connect: SeasonWhereUniqueInput
  update: SeasonUpdateDataInput
  upsert: SeasonUpsertNestedInput
}

input SeasonUpdateOneRequiredWithoutEventsInput {
  create: SeasonCreateWithoutEventsInput
  connect: SeasonWhereUniqueInput
  update: SeasonUpdateWithoutEventsDataInput
  upsert: SeasonUpsertWithoutEventsInput
}

input SeasonUpdateWithoutEventsDataInput {
  fplId: Int
  label: String
  competition: String
  startYear: Int
  endYear: Int
  isCurrent: Boolean
  isPrevious: Boolean
  isNext: Boolean
}

input SeasonUpsertNestedInput {
  update: SeasonUpdateDataInput!
  create: SeasonCreateInput!
}

input SeasonUpsertWithoutEventsInput {
  update: SeasonUpdateWithoutEventsDataInput!
  create: SeasonCreateWithoutEventsInput!
}

input SeasonWhereInput {
  """Logical AND on all given filters."""
  AND: [SeasonWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeasonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeasonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  fplId: Int

  """All values that are not equal to given value."""
  fplId_not: Int

  """All values that are contained in given list."""
  fplId_in: [Int!]

  """All values that are not contained in given list."""
  fplId_not_in: [Int!]

  """All values less than the given value."""
  fplId_lt: Int

  """All values less than or equal the given value."""
  fplId_lte: Int

  """All values greater than the given value."""
  fplId_gt: Int

  """All values greater than or equal the given value."""
  fplId_gte: Int
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  competition: String

  """All values that are not equal to given value."""
  competition_not: String

  """All values that are contained in given list."""
  competition_in: [String!]

  """All values that are not contained in given list."""
  competition_not_in: [String!]

  """All values less than the given value."""
  competition_lt: String

  """All values less than or equal the given value."""
  competition_lte: String

  """All values greater than the given value."""
  competition_gt: String

  """All values greater than or equal the given value."""
  competition_gte: String

  """All values containing the given string."""
  competition_contains: String

  """All values not containing the given string."""
  competition_not_contains: String

  """All values starting with the given string."""
  competition_starts_with: String

  """All values not starting with the given string."""
  competition_not_starts_with: String

  """All values ending with the given string."""
  competition_ends_with: String

  """All values not ending with the given string."""
  competition_not_ends_with: String
  startYear: Int

  """All values that are not equal to given value."""
  startYear_not: Int

  """All values that are contained in given list."""
  startYear_in: [Int!]

  """All values that are not contained in given list."""
  startYear_not_in: [Int!]

  """All values less than the given value."""
  startYear_lt: Int

  """All values less than or equal the given value."""
  startYear_lte: Int

  """All values greater than the given value."""
  startYear_gt: Int

  """All values greater than or equal the given value."""
  startYear_gte: Int
  endYear: Int

  """All values that are not equal to given value."""
  endYear_not: Int

  """All values that are contained in given list."""
  endYear_in: [Int!]

  """All values that are not contained in given list."""
  endYear_not_in: [Int!]

  """All values less than the given value."""
  endYear_lt: Int

  """All values less than or equal the given value."""
  endYear_lte: Int

  """All values greater than the given value."""
  endYear_gt: Int

  """All values greater than or equal the given value."""
  endYear_gte: Int
  isCurrent: Boolean

  """All values that are not equal to given value."""
  isCurrent_not: Boolean
  isPrevious: Boolean

  """All values that are not equal to given value."""
  isPrevious_not: Boolean
  isNext: Boolean

  """All values that are not equal to given value."""
  isNext_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  events_every: GameweekWhereInput
  events_some: GameweekWhereInput
  events_none: GameweekWhereInput
}

input SeasonWhereUniqueInput {
  id: ID
  fplId: Int
}

type Status implements Node {
  id: ID!
  author: UserStatus
  content: String!
  likes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type StatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatusEdge]!
  aggregate: AggregateStatus!
}

input StatusCreateInput {
  id: ID
  content: String!
  author: UserStatusCreateOneWithoutStatusInput
  likes: UserCreateManyInput
}

input StatusCreateOneWithoutAuthorInput {
  create: StatusCreateWithoutAuthorInput
  connect: StatusWhereUniqueInput
}

input StatusCreateWithoutAuthorInput {
  id: ID
  content: String!
  likes: UserCreateManyInput
}

"""An edge in a connection."""
type StatusEdge {
  """The item at the end of the edge."""
  node: Status!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StatusOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StatusPreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StatusSubscriptionPayload {
  mutation: MutationType!
  node: Status
  updatedFields: [String!]
  previousValues: StatusPreviousValues
}

input StatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StatusWhereInput
}

input StatusUpdateInput {
  content: String
  author: UserStatusUpdateOneWithoutStatusInput
  likes: UserUpdateManyInput
}

input StatusUpdateManyMutationInput {
  content: String
}

input StatusUpdateOneWithoutAuthorInput {
  create: StatusCreateWithoutAuthorInput
  connect: StatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StatusUpdateWithoutAuthorDataInput
  upsert: StatusUpsertWithoutAuthorInput
}

input StatusUpdateWithoutAuthorDataInput {
  content: String
  likes: UserUpdateManyInput
}

input StatusUpsertWithoutAuthorInput {
  update: StatusUpdateWithoutAuthorDataInput!
  create: StatusCreateWithoutAuthorInput!
}

input StatusWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  author: UserStatusWhereInput
  likes_every: UserWhereInput
  likes_some: UserWhereInput
  likes_none: UserWhereInput
}

input StatusWhereUniqueInput {
  id: ID
}

type Subscription {
  userPhoto(where: UserPhotoSubscriptionWhereInput): UserPhotoSubscriptionPayload
  status(where: StatusSubscriptionWhereInput): StatusSubscriptionPayload
  userFollowers(where: UserFollowersSubscriptionWhereInput): UserFollowersSubscriptionPayload
  userInfluencers(where: UserInfluencersSubscriptionWhereInput): UserInfluencersSubscriptionPayload
  userAssignedRole(where: UserAssignedRoleSubscriptionWhereInput): UserAssignedRoleSubscriptionPayload
  activeSubscriptions(where: ActiveSubscriptionsSubscriptionWhereInput): ActiveSubscriptionsSubscriptionPayload
  homeTeamFixture(where: HomeTeamFixtureSubscriptionWhereInput): HomeTeamFixtureSubscriptionPayload
  awayTeamFixture(where: AwayTeamFixtureSubscriptionWhereInput): AwayTeamFixtureSubscriptionPayload
  contestSlate(where: ContestSlateSubscriptionWhereInput): ContestSlateSubscriptionPayload
  contestSlateEntry(where: ContestSlateEntrySubscriptionWhereInput): ContestSlateEntrySubscriptionPayload
  contestPrediction(where: ContestPredictionSubscriptionWhereInput): ContestPredictionSubscriptionPayload
  scoringSystemHeader(where: ScoringSystemHeaderSubscriptionWhereInput): ScoringSystemHeaderSubscriptionPayload
  contestPredictionScore(where: ContestPredictionScoreSubscriptionWhereInput): ContestPredictionScoreSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  photo(where: PhotoSubscriptionWhereInput): PhotoSubscriptionPayload
  defaultScoringSystemDetail(where: DefaultScoringSystemDetailSubscriptionWhereInput): DefaultScoringSystemDetailSubscriptionPayload
  contestType(where: ContestTypeSubscriptionWhereInput): ContestTypeSubscriptionPayload
  influencer(where: InfluencerSubscriptionWhereInput): InfluencerSubscriptionPayload
  contest(where: ContestSubscriptionWhereInput): ContestSubscriptionPayload
  follower(where: FollowerSubscriptionWhereInput): FollowerSubscriptionPayload
  contestUserType(where: ContestUserTypeSubscriptionWhereInput): ContestUserTypeSubscriptionPayload
  contestCreator(where: ContestCreatorSubscriptionWhereInput): ContestCreatorSubscriptionPayload
  defaultScoringSystemHeader(where: DefaultScoringSystemHeaderSubscriptionWhereInput): DefaultScoringSystemHeaderSubscriptionPayload
  scoringType(where: ScoringTypeSubscriptionWhereInput): ScoringTypeSubscriptionPayload
  season(where: SeasonSubscriptionWhereInput): SeasonSubscriptionPayload
  userStatus(where: UserStatusSubscriptionWhereInput): UserStatusSubscriptionPayload
  contestUser(where: ContestUserSubscriptionWhereInput): ContestUserSubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  fandemSubscription(where: FandemSubscriptionSubscriptionWhereInput): FandemSubscriptionSubscriptionPayload
  fixture(where: FixtureSubscriptionWhereInput): FixtureSubscriptionPayload
  gameweek(where: GameweekSubscriptionWhereInput): GameweekSubscriptionPayload
  contestOwner(where: ContestOwnerSubscriptionWhereInput): ContestOwnerSubscriptionPayload
  contestInviter(where: ContestInviterSubscriptionWhereInput): ContestInviterSubscriptionPayload
  scoringSystemDetail(where: ScoringSystemDetailSubscriptionWhereInput): ScoringSystemDetailSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userRole(where: UserRoleSubscriptionWhereInput): UserRoleSubscriptionPayload
}

type Team implements Node {
  id: ID!
  code: Int!
  season: Season!
  fplTeamId: Int!
  name: String!
  shortName: String!
  strength: Int!
  strengthAttackAway: Int!
  strengthAttackHome: Int!
  strengthDefenceAway: Int!
  strengthDefenceHome: Int!
  strengthOverallAway: Int!
  strengthOverallHome: Int!
  teamDivision: Int
  homeFixtures(where: HomeTeamFixtureWhereInput, orderBy: HomeTeamFixtureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HomeTeamFixture!]
  awayFixtures(where: AwayTeamFixtureWhereInput, orderBy: AwayTeamFixtureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AwayTeamFixture!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  id: ID
  code: Int!
  fplTeamId: Int!
  name: String!
  shortName: String!
  strength: Int!
  strengthAttackAway: Int!
  strengthAttackHome: Int!
  strengthDefenceAway: Int!
  strengthDefenceHome: Int!
  strengthOverallAway: Int!
  strengthOverallHome: Int!
  teamDivision: Int
  season: SeasonCreateOneInput!
  homeFixtures: HomeTeamFixtureCreateManyWithoutHomeTeamInput
  awayFixtures: AwayTeamFixtureCreateManyWithoutAwayTeamInput
}

input TeamCreateOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutAwayFixturesInput {
  create: TeamCreateWithoutAwayFixturesInput
  connect: TeamWhereUniqueInput
}

input TeamCreateOneWithoutHomeFixturesInput {
  create: TeamCreateWithoutHomeFixturesInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutAwayFixturesInput {
  id: ID
  code: Int!
  fplTeamId: Int!
  name: String!
  shortName: String!
  strength: Int!
  strengthAttackAway: Int!
  strengthAttackHome: Int!
  strengthDefenceAway: Int!
  strengthDefenceHome: Int!
  strengthOverallAway: Int!
  strengthOverallHome: Int!
  teamDivision: Int
  season: SeasonCreateOneInput!
  homeFixtures: HomeTeamFixtureCreateManyWithoutHomeTeamInput
}

input TeamCreateWithoutHomeFixturesInput {
  id: ID
  code: Int!
  fplTeamId: Int!
  name: String!
  shortName: String!
  strength: Int!
  strengthAttackAway: Int!
  strengthAttackHome: Int!
  strengthDefenceAway: Int!
  strengthDefenceHome: Int!
  strengthOverallAway: Int!
  strengthOverallHome: Int!
  teamDivision: Int
  season: SeasonCreateOneInput!
  awayFixtures: AwayTeamFixtureCreateManyWithoutAwayTeamInput
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge."""
  node: Team!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  fplTeamId_ASC
  fplTeamId_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
  strength_ASC
  strength_DESC
  strengthAttackAway_ASC
  strengthAttackAway_DESC
  strengthAttackHome_ASC
  strengthAttackHome_DESC
  strengthDefenceAway_ASC
  strengthDefenceAway_DESC
  strengthDefenceHome_ASC
  strengthDefenceHome_DESC
  strengthOverallAway_ASC
  strengthOverallAway_DESC
  strengthOverallHome_ASC
  strengthOverallHome_DESC
  teamDivision_ASC
  teamDivision_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamPreviousValues {
  id: ID!
  code: Int!
  fplTeamId: Int!
  name: String!
  shortName: String!
  strength: Int!
  strengthAttackAway: Int!
  strengthAttackHome: Int!
  strengthDefenceAway: Int!
  strengthDefenceHome: Int!
  strengthOverallAway: Int!
  strengthOverallHome: Int!
  teamDivision: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
}

input TeamUpdateDataInput {
  code: Int
  fplTeamId: Int
  name: String
  shortName: String
  strength: Int
  strengthAttackAway: Int
  strengthAttackHome: Int
  strengthDefenceAway: Int
  strengthDefenceHome: Int
  strengthOverallAway: Int
  strengthOverallHome: Int
  teamDivision: Int
  season: SeasonUpdateOneRequiredInput
  homeFixtures: HomeTeamFixtureUpdateManyWithoutHomeTeamInput
  awayFixtures: AwayTeamFixtureUpdateManyWithoutAwayTeamInput
}

input TeamUpdateInput {
  code: Int
  fplTeamId: Int
  name: String
  shortName: String
  strength: Int
  strengthAttackAway: Int
  strengthAttackHome: Int
  strengthDefenceAway: Int
  strengthDefenceHome: Int
  strengthOverallAway: Int
  strengthOverallHome: Int
  teamDivision: Int
  season: SeasonUpdateOneRequiredInput
  homeFixtures: HomeTeamFixtureUpdateManyWithoutHomeTeamInput
  awayFixtures: AwayTeamFixtureUpdateManyWithoutAwayTeamInput
}

input TeamUpdateManyMutationInput {
  code: Int
  fplTeamId: Int
  name: String
  shortName: String
  strength: Int
  strengthAttackAway: Int
  strengthAttackHome: Int
  strengthDefenceAway: Int
  strengthDefenceHome: Int
  strengthOverallAway: Int
  strengthOverallHome: Int
  teamDivision: Int
}

input TeamUpdateOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamUpdateDataInput
  upsert: TeamUpsertNestedInput
}

input TeamUpdateOneRequiredWithoutAwayFixturesInput {
  create: TeamCreateWithoutAwayFixturesInput
  connect: TeamWhereUniqueInput
  update: TeamUpdateWithoutAwayFixturesDataInput
  upsert: TeamUpsertWithoutAwayFixturesInput
}

input TeamUpdateOneRequiredWithoutHomeFixturesInput {
  create: TeamCreateWithoutHomeFixturesInput
  connect: TeamWhereUniqueInput
  update: TeamUpdateWithoutHomeFixturesDataInput
  upsert: TeamUpsertWithoutHomeFixturesInput
}

input TeamUpdateWithoutAwayFixturesDataInput {
  code: Int
  fplTeamId: Int
  name: String
  shortName: String
  strength: Int
  strengthAttackAway: Int
  strengthAttackHome: Int
  strengthDefenceAway: Int
  strengthDefenceHome: Int
  strengthOverallAway: Int
  strengthOverallHome: Int
  teamDivision: Int
  season: SeasonUpdateOneRequiredInput
  homeFixtures: HomeTeamFixtureUpdateManyWithoutHomeTeamInput
}

input TeamUpdateWithoutHomeFixturesDataInput {
  code: Int
  fplTeamId: Int
  name: String
  shortName: String
  strength: Int
  strengthAttackAway: Int
  strengthAttackHome: Int
  strengthDefenceAway: Int
  strengthDefenceHome: Int
  strengthOverallAway: Int
  strengthOverallHome: Int
  teamDivision: Int
  season: SeasonUpdateOneRequiredInput
  awayFixtures: AwayTeamFixtureUpdateManyWithoutAwayTeamInput
}

input TeamUpsertNestedInput {
  update: TeamUpdateDataInput!
  create: TeamCreateInput!
}

input TeamUpsertWithoutAwayFixturesInput {
  update: TeamUpdateWithoutAwayFixturesDataInput!
  create: TeamCreateWithoutAwayFixturesInput!
}

input TeamUpsertWithoutHomeFixturesInput {
  update: TeamUpdateWithoutHomeFixturesDataInput!
  create: TeamCreateWithoutHomeFixturesInput!
}

input TeamWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: Int

  """All values that are not equal to given value."""
  code_not: Int

  """All values that are contained in given list."""
  code_in: [Int!]

  """All values that are not contained in given list."""
  code_not_in: [Int!]

  """All values less than the given value."""
  code_lt: Int

  """All values less than or equal the given value."""
  code_lte: Int

  """All values greater than the given value."""
  code_gt: Int

  """All values greater than or equal the given value."""
  code_gte: Int
  fplTeamId: Int

  """All values that are not equal to given value."""
  fplTeamId_not: Int

  """All values that are contained in given list."""
  fplTeamId_in: [Int!]

  """All values that are not contained in given list."""
  fplTeamId_not_in: [Int!]

  """All values less than the given value."""
  fplTeamId_lt: Int

  """All values less than or equal the given value."""
  fplTeamId_lte: Int

  """All values greater than the given value."""
  fplTeamId_gt: Int

  """All values greater than or equal the given value."""
  fplTeamId_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shortName: String

  """All values that are not equal to given value."""
  shortName_not: String

  """All values that are contained in given list."""
  shortName_in: [String!]

  """All values that are not contained in given list."""
  shortName_not_in: [String!]

  """All values less than the given value."""
  shortName_lt: String

  """All values less than or equal the given value."""
  shortName_lte: String

  """All values greater than the given value."""
  shortName_gt: String

  """All values greater than or equal the given value."""
  shortName_gte: String

  """All values containing the given string."""
  shortName_contains: String

  """All values not containing the given string."""
  shortName_not_contains: String

  """All values starting with the given string."""
  shortName_starts_with: String

  """All values not starting with the given string."""
  shortName_not_starts_with: String

  """All values ending with the given string."""
  shortName_ends_with: String

  """All values not ending with the given string."""
  shortName_not_ends_with: String
  strength: Int

  """All values that are not equal to given value."""
  strength_not: Int

  """All values that are contained in given list."""
  strength_in: [Int!]

  """All values that are not contained in given list."""
  strength_not_in: [Int!]

  """All values less than the given value."""
  strength_lt: Int

  """All values less than or equal the given value."""
  strength_lte: Int

  """All values greater than the given value."""
  strength_gt: Int

  """All values greater than or equal the given value."""
  strength_gte: Int
  strengthAttackAway: Int

  """All values that are not equal to given value."""
  strengthAttackAway_not: Int

  """All values that are contained in given list."""
  strengthAttackAway_in: [Int!]

  """All values that are not contained in given list."""
  strengthAttackAway_not_in: [Int!]

  """All values less than the given value."""
  strengthAttackAway_lt: Int

  """All values less than or equal the given value."""
  strengthAttackAway_lte: Int

  """All values greater than the given value."""
  strengthAttackAway_gt: Int

  """All values greater than or equal the given value."""
  strengthAttackAway_gte: Int
  strengthAttackHome: Int

  """All values that are not equal to given value."""
  strengthAttackHome_not: Int

  """All values that are contained in given list."""
  strengthAttackHome_in: [Int!]

  """All values that are not contained in given list."""
  strengthAttackHome_not_in: [Int!]

  """All values less than the given value."""
  strengthAttackHome_lt: Int

  """All values less than or equal the given value."""
  strengthAttackHome_lte: Int

  """All values greater than the given value."""
  strengthAttackHome_gt: Int

  """All values greater than or equal the given value."""
  strengthAttackHome_gte: Int
  strengthDefenceAway: Int

  """All values that are not equal to given value."""
  strengthDefenceAway_not: Int

  """All values that are contained in given list."""
  strengthDefenceAway_in: [Int!]

  """All values that are not contained in given list."""
  strengthDefenceAway_not_in: [Int!]

  """All values less than the given value."""
  strengthDefenceAway_lt: Int

  """All values less than or equal the given value."""
  strengthDefenceAway_lte: Int

  """All values greater than the given value."""
  strengthDefenceAway_gt: Int

  """All values greater than or equal the given value."""
  strengthDefenceAway_gte: Int
  strengthDefenceHome: Int

  """All values that are not equal to given value."""
  strengthDefenceHome_not: Int

  """All values that are contained in given list."""
  strengthDefenceHome_in: [Int!]

  """All values that are not contained in given list."""
  strengthDefenceHome_not_in: [Int!]

  """All values less than the given value."""
  strengthDefenceHome_lt: Int

  """All values less than or equal the given value."""
  strengthDefenceHome_lte: Int

  """All values greater than the given value."""
  strengthDefenceHome_gt: Int

  """All values greater than or equal the given value."""
  strengthDefenceHome_gte: Int
  strengthOverallAway: Int

  """All values that are not equal to given value."""
  strengthOverallAway_not: Int

  """All values that are contained in given list."""
  strengthOverallAway_in: [Int!]

  """All values that are not contained in given list."""
  strengthOverallAway_not_in: [Int!]

  """All values less than the given value."""
  strengthOverallAway_lt: Int

  """All values less than or equal the given value."""
  strengthOverallAway_lte: Int

  """All values greater than the given value."""
  strengthOverallAway_gt: Int

  """All values greater than or equal the given value."""
  strengthOverallAway_gte: Int
  strengthOverallHome: Int

  """All values that are not equal to given value."""
  strengthOverallHome_not: Int

  """All values that are contained in given list."""
  strengthOverallHome_in: [Int!]

  """All values that are not contained in given list."""
  strengthOverallHome_not_in: [Int!]

  """All values less than the given value."""
  strengthOverallHome_lt: Int

  """All values less than or equal the given value."""
  strengthOverallHome_lte: Int

  """All values greater than the given value."""
  strengthOverallHome_gt: Int

  """All values greater than or equal the given value."""
  strengthOverallHome_gte: Int
  teamDivision: Int

  """All values that are not equal to given value."""
  teamDivision_not: Int

  """All values that are contained in given list."""
  teamDivision_in: [Int!]

  """All values that are not contained in given list."""
  teamDivision_not_in: [Int!]

  """All values less than the given value."""
  teamDivision_lt: Int

  """All values less than or equal the given value."""
  teamDivision_lte: Int

  """All values greater than the given value."""
  teamDivision_gt: Int

  """All values greater than or equal the given value."""
  teamDivision_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  season: SeasonWhereInput
  homeFixtures_every: HomeTeamFixtureWhereInput
  homeFixtures_some: HomeTeamFixtureWhereInput
  homeFixtures_none: HomeTeamFixtureWhereInput
  awayFixtures_every: AwayTeamFixtureWhereInput
  awayFixtures_some: AwayTeamFixtureWhereInput
  awayFixtures_none: AwayTeamFixtureWhereInput
}

input TeamWhereUniqueInput {
  id: ID
  code: Int
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  countryCode: String
  phoneNumber: String
  favoriteTeam: Team
  country: Country
  displayName: String!
  isPrivate: Boolean!
  password: String!
  photos(where: UserPhotoWhereInput, orderBy: UserPhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserPhoto!]
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean!
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  subscriptions(where: FandemSubscriptionWhereInput, orderBy: FandemSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FandemSubscription!]
  userRoles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole!]
  status(where: UserStatusWhereInput, orderBy: UserStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStatus!]
  followers: UserFollowers
  influencers: UserInfluencers
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserAssignedRole implements Node {
  id: ID!
  user: User!
  userRole: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserAssignedRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserAssignedRoleEdge]!
  aggregate: AggregateUserAssignedRole!
}

input UserAssignedRoleCreateInput {
  id: ID
  user: UserCreateOneInput!
  userRole: UserRoleCreateOneInput!
}

"""An edge in a connection."""
type UserAssignedRoleEdge {
  """The item at the end of the edge."""
  node: UserAssignedRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserAssignedRoleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserAssignedRolePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserAssignedRoleSubscriptionPayload {
  mutation: MutationType!
  node: UserAssignedRole
  updatedFields: [String!]
  previousValues: UserAssignedRolePreviousValues
}

input UserAssignedRoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAssignedRoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAssignedRoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAssignedRoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserAssignedRoleWhereInput
}

input UserAssignedRoleUpdateInput {
  user: UserUpdateOneRequiredInput
  userRole: UserRoleUpdateOneRequiredInput
}

input UserAssignedRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAssignedRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAssignedRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAssignedRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  userRole: UserRoleWhereInput
}

input UserAssignedRoleWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  countryCode: String
  phoneNumber: String
  displayName: String!
  isPrivate: Boolean
  password: String!
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamCreateOneInput
  country: CountryCreateOneInput
  photos: UserPhotoCreateManyWithoutUserInput
  subscriptions: FandemSubscriptionCreateManyInput
  userRoles: UserRoleCreateManyInput
  status: UserStatusCreateManyInput
  followers: UserFollowersCreateOneWithoutUserInput
  influencers: UserInfluencersCreateOneWithoutUserInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInfluencersInput {
  create: UserCreateWithoutInfluencersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPhotosInput {
  create: UserCreateWithoutPhotosInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFollowersInput {
  id: ID
  email: String!
  name: String!
  countryCode: String
  phoneNumber: String
  displayName: String!
  isPrivate: Boolean
  password: String!
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamCreateOneInput
  country: CountryCreateOneInput
  photos: UserPhotoCreateManyWithoutUserInput
  subscriptions: FandemSubscriptionCreateManyInput
  userRoles: UserRoleCreateManyInput
  status: UserStatusCreateManyInput
  influencers: UserInfluencersCreateOneWithoutUserInput
}

input UserCreateWithoutInfluencersInput {
  id: ID
  email: String!
  name: String!
  countryCode: String
  phoneNumber: String
  displayName: String!
  isPrivate: Boolean
  password: String!
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamCreateOneInput
  country: CountryCreateOneInput
  photos: UserPhotoCreateManyWithoutUserInput
  subscriptions: FandemSubscriptionCreateManyInput
  userRoles: UserRoleCreateManyInput
  status: UserStatusCreateManyInput
  followers: UserFollowersCreateOneWithoutUserInput
}

input UserCreateWithoutPhotosInput {
  id: ID
  email: String!
  name: String!
  countryCode: String
  phoneNumber: String
  displayName: String!
  isPrivate: Boolean
  password: String!
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamCreateOneInput
  country: CountryCreateOneInput
  subscriptions: FandemSubscriptionCreateManyInput
  userRoles: UserRoleCreateManyInput
  status: UserStatusCreateManyInput
  followers: UserFollowersCreateOneWithoutUserInput
  influencers: UserInfluencersCreateOneWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

type UserFollowers implements Node {
  id: ID!
  followers(where: FollowerWhereInput, orderBy: FollowerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follower!]
  user: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserFollowersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserFollowersEdge]!
  aggregate: AggregateUserFollowers!
}

input UserFollowersCreateInput {
  id: ID
  followers: FollowerCreateManyInput
  user: UserCreateOneWithoutFollowersInput!
}

input UserFollowersCreateOneWithoutUserInput {
  create: UserFollowersCreateWithoutUserInput
  connect: UserFollowersWhereUniqueInput
}

input UserFollowersCreateWithoutUserInput {
  id: ID
  followers: FollowerCreateManyInput
}

"""An edge in a connection."""
type UserFollowersEdge {
  """The item at the end of the edge."""
  node: UserFollowers!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserFollowersOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserFollowersPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserFollowersSubscriptionPayload {
  mutation: MutationType!
  node: UserFollowers
  updatedFields: [String!]
  previousValues: UserFollowersPreviousValues
}

input UserFollowersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserFollowersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserFollowersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserFollowersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserFollowersWhereInput
}

input UserFollowersUpdateInput {
  followers: FollowerUpdateManyInput
  user: UserUpdateOneRequiredWithoutFollowersInput
}

input UserFollowersUpdateOneWithoutUserInput {
  create: UserFollowersCreateWithoutUserInput
  connect: UserFollowersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserFollowersUpdateWithoutUserDataInput
  upsert: UserFollowersUpsertWithoutUserInput
}

input UserFollowersUpdateWithoutUserDataInput {
  followers: FollowerUpdateManyInput
}

input UserFollowersUpsertWithoutUserInput {
  update: UserFollowersUpdateWithoutUserDataInput!
  create: UserFollowersCreateWithoutUserInput!
}

input UserFollowersWhereInput {
  """Logical AND on all given filters."""
  AND: [UserFollowersWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserFollowersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserFollowersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  followers_every: FollowerWhereInput
  followers_some: FollowerWhereInput
  followers_none: FollowerWhereInput
  user: UserWhereInput
}

input UserFollowersWhereUniqueInput {
  id: ID
}

type UserInfluencers implements Node {
  id: ID!
  user: User!
  influencers(where: InfluencerWhereInput, orderBy: InfluencerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Influencer!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserInfluencersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserInfluencersEdge]!
  aggregate: AggregateUserInfluencers!
}

input UserInfluencersCreateInput {
  id: ID
  user: UserCreateOneWithoutInfluencersInput!
  influencers: InfluencerCreateManyInput
}

input UserInfluencersCreateOneWithoutUserInput {
  create: UserInfluencersCreateWithoutUserInput
  connect: UserInfluencersWhereUniqueInput
}

input UserInfluencersCreateWithoutUserInput {
  id: ID
  influencers: InfluencerCreateManyInput
}

"""An edge in a connection."""
type UserInfluencersEdge {
  """The item at the end of the edge."""
  node: UserInfluencers!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserInfluencersOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserInfluencersPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserInfluencersSubscriptionPayload {
  mutation: MutationType!
  node: UserInfluencers
  updatedFields: [String!]
  previousValues: UserInfluencersPreviousValues
}

input UserInfluencersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserInfluencersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserInfluencersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserInfluencersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserInfluencersWhereInput
}

input UserInfluencersUpdateInput {
  user: UserUpdateOneRequiredWithoutInfluencersInput
  influencers: InfluencerUpdateManyInput
}

input UserInfluencersUpdateOneWithoutUserInput {
  create: UserInfluencersCreateWithoutUserInput
  connect: UserInfluencersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserInfluencersUpdateWithoutUserDataInput
  upsert: UserInfluencersUpsertWithoutUserInput
}

input UserInfluencersUpdateWithoutUserDataInput {
  influencers: InfluencerUpdateManyInput
}

input UserInfluencersUpsertWithoutUserInput {
  update: UserInfluencersUpdateWithoutUserDataInput!
  create: UserInfluencersCreateWithoutUserInput!
}

input UserInfluencersWhereInput {
  """Logical AND on all given filters."""
  AND: [UserInfluencersWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserInfluencersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserInfluencersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  influencers_every: InfluencerWhereInput
  influencers_some: InfluencerWhereInput
  influencers_none: InfluencerWhereInput
}

input UserInfluencersWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  countryCode_ASC
  countryCode_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  displayName_ASC
  displayName_DESC
  isPrivate_ASC
  isPrivate_DESC
  password_ASC
  password_DESC
  emailValidationToken_ASC
  emailValidationToken_DESC
  emailValidationTokenExpiry_ASC
  emailValidationTokenExpiry_DESC
  emailValidated_ASC
  emailValidated_DESC
  emailValidationDate_ASC
  emailValidationDate_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPhoto implements Node {
  id: ID!
  user: User!
  photo: Photo!
  isProfile: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserPhotoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserPhotoEdge]!
  aggregate: AggregateUserPhoto!
}

input UserPhotoCreateInput {
  id: ID
  isProfile: Boolean
  user: UserCreateOneWithoutPhotosInput!
  photo: PhotoCreateOneInput!
}

input UserPhotoCreateManyWithoutUserInput {
  create: [UserPhotoCreateWithoutUserInput!]
  connect: [UserPhotoWhereUniqueInput!]
}

input UserPhotoCreateWithoutUserInput {
  id: ID
  isProfile: Boolean
  photo: PhotoCreateOneInput!
}

"""An edge in a connection."""
type UserPhotoEdge {
  """The item at the end of the edge."""
  node: UserPhoto!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserPhotoOrderByInput {
  id_ASC
  id_DESC
  isProfile_ASC
  isProfile_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPhotoPreviousValues {
  id: ID!
  isProfile: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserPhotoScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserPhotoScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserPhotoScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserPhotoScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isProfile: Boolean

  """All values that are not equal to given value."""
  isProfile_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserPhotoSubscriptionPayload {
  mutation: MutationType!
  node: UserPhoto
  updatedFields: [String!]
  previousValues: UserPhotoPreviousValues
}

input UserPhotoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserPhotoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserPhotoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserPhotoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserPhotoWhereInput
}

input UserPhotoUpdateInput {
  isProfile: Boolean
  user: UserUpdateOneRequiredWithoutPhotosInput
  photo: PhotoUpdateOneRequiredInput
}

input UserPhotoUpdateManyDataInput {
  isProfile: Boolean
}

input UserPhotoUpdateManyMutationInput {
  isProfile: Boolean
}

input UserPhotoUpdateManyWithoutUserInput {
  create: [UserPhotoCreateWithoutUserInput!]
  connect: [UserPhotoWhereUniqueInput!]
  set: [UserPhotoWhereUniqueInput!]
  disconnect: [UserPhotoWhereUniqueInput!]
  delete: [UserPhotoWhereUniqueInput!]
  update: [UserPhotoUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserPhotoUpdateManyWithWhereNestedInput!]
  deleteMany: [UserPhotoScalarWhereInput!]
  upsert: [UserPhotoUpsertWithWhereUniqueWithoutUserInput!]
}

input UserPhotoUpdateManyWithWhereNestedInput {
  where: UserPhotoScalarWhereInput!
  data: UserPhotoUpdateManyDataInput!
}

input UserPhotoUpdateWithoutUserDataInput {
  isProfile: Boolean
  photo: PhotoUpdateOneRequiredInput
}

input UserPhotoUpdateWithWhereUniqueWithoutUserInput {
  where: UserPhotoWhereUniqueInput!
  data: UserPhotoUpdateWithoutUserDataInput!
}

input UserPhotoUpsertWithWhereUniqueWithoutUserInput {
  where: UserPhotoWhereUniqueInput!
  update: UserPhotoUpdateWithoutUserDataInput!
  create: UserPhotoCreateWithoutUserInput!
}

input UserPhotoWhereInput {
  """Logical AND on all given filters."""
  AND: [UserPhotoWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserPhotoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserPhotoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isProfile: Boolean

  """All values that are not equal to given value."""
  isProfile_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user: UserWhereInput
  photo: PhotoWhereInput
}

input UserPhotoWhereUniqueInput {
  id: ID
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  countryCode: String
  phoneNumber: String
  displayName: String!
  isPrivate: Boolean!
  password: String!
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean!
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserRole implements Node {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserRoleEdge]!
  aggregate: AggregateUserRole!
}

input UserRoleCreateInput {
  id: ID
  name: String!
  description: String!
}

input UserRoleCreateManyInput {
  create: [UserRoleCreateInput!]
  connect: [UserRoleWhereUniqueInput!]
}

input UserRoleCreateOneInput {
  create: UserRoleCreateInput
  connect: UserRoleWhereUniqueInput
}

"""An edge in a connection."""
type UserRoleEdge {
  """The item at the end of the edge."""
  node: UserRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserRoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserRolePreviousValues {
  id: ID!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserRoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserRoleSubscriptionPayload {
  mutation: MutationType!
  node: UserRole
  updatedFields: [String!]
  previousValues: UserRolePreviousValues
}

input UserRoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserRoleWhereInput
}

input UserRoleUpdateDataInput {
  name: String
  description: String
}

input UserRoleUpdateInput {
  name: String
  description: String
}

input UserRoleUpdateManyDataInput {
  name: String
  description: String
}

input UserRoleUpdateManyInput {
  create: [UserRoleCreateInput!]
  connect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  delete: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  upsert: [UserRoleUpsertWithWhereUniqueNestedInput!]
}

input UserRoleUpdateManyMutationInput {
  name: String
  description: String
}

input UserRoleUpdateManyWithWhereNestedInput {
  where: UserRoleScalarWhereInput!
  data: UserRoleUpdateManyDataInput!
}

input UserRoleUpdateOneRequiredInput {
  create: UserRoleCreateInput
  connect: UserRoleWhereUniqueInput
  update: UserRoleUpdateDataInput
  upsert: UserRoleUpsertNestedInput
}

input UserRoleUpdateWithWhereUniqueNestedInput {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateDataInput!
}

input UserRoleUpsertNestedInput {
  update: UserRoleUpdateDataInput!
  create: UserRoleCreateInput!
}

input UserRoleUpsertWithWhereUniqueNestedInput {
  where: UserRoleWhereUniqueInput!
  update: UserRoleUpdateDataInput!
  create: UserRoleCreateInput!
}

input UserRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

input UserRoleWhereUniqueInput {
  id: ID
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  countryCode: String

  """All values that are not equal to given value."""
  countryCode_not: String

  """All values that are contained in given list."""
  countryCode_in: [String!]

  """All values that are not contained in given list."""
  countryCode_not_in: [String!]

  """All values less than the given value."""
  countryCode_lt: String

  """All values less than or equal the given value."""
  countryCode_lte: String

  """All values greater than the given value."""
  countryCode_gt: String

  """All values greater than or equal the given value."""
  countryCode_gte: String

  """All values containing the given string."""
  countryCode_contains: String

  """All values not containing the given string."""
  countryCode_not_contains: String

  """All values starting with the given string."""
  countryCode_starts_with: String

  """All values not starting with the given string."""
  countryCode_not_starts_with: String

  """All values ending with the given string."""
  countryCode_ends_with: String

  """All values not ending with the given string."""
  countryCode_not_ends_with: String
  phoneNumber: String

  """All values that are not equal to given value."""
  phoneNumber_not: String

  """All values that are contained in given list."""
  phoneNumber_in: [String!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [String!]

  """All values less than the given value."""
  phoneNumber_lt: String

  """All values less than or equal the given value."""
  phoneNumber_lte: String

  """All values greater than the given value."""
  phoneNumber_gt: String

  """All values greater than or equal the given value."""
  phoneNumber_gte: String

  """All values containing the given string."""
  phoneNumber_contains: String

  """All values not containing the given string."""
  phoneNumber_not_contains: String

  """All values starting with the given string."""
  phoneNumber_starts_with: String

  """All values not starting with the given string."""
  phoneNumber_not_starts_with: String

  """All values ending with the given string."""
  phoneNumber_ends_with: String

  """All values not ending with the given string."""
  phoneNumber_not_ends_with: String
  displayName: String

  """All values that are not equal to given value."""
  displayName_not: String

  """All values that are contained in given list."""
  displayName_in: [String!]

  """All values that are not contained in given list."""
  displayName_not_in: [String!]

  """All values less than the given value."""
  displayName_lt: String

  """All values less than or equal the given value."""
  displayName_lte: String

  """All values greater than the given value."""
  displayName_gt: String

  """All values greater than or equal the given value."""
  displayName_gte: String

  """All values containing the given string."""
  displayName_contains: String

  """All values not containing the given string."""
  displayName_not_contains: String

  """All values starting with the given string."""
  displayName_starts_with: String

  """All values not starting with the given string."""
  displayName_not_starts_with: String

  """All values ending with the given string."""
  displayName_ends_with: String

  """All values not ending with the given string."""
  displayName_not_ends_with: String
  isPrivate: Boolean

  """All values that are not equal to given value."""
  isPrivate_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  emailValidationToken: String

  """All values that are not equal to given value."""
  emailValidationToken_not: String

  """All values that are contained in given list."""
  emailValidationToken_in: [String!]

  """All values that are not contained in given list."""
  emailValidationToken_not_in: [String!]

  """All values less than the given value."""
  emailValidationToken_lt: String

  """All values less than or equal the given value."""
  emailValidationToken_lte: String

  """All values greater than the given value."""
  emailValidationToken_gt: String

  """All values greater than or equal the given value."""
  emailValidationToken_gte: String

  """All values containing the given string."""
  emailValidationToken_contains: String

  """All values not containing the given string."""
  emailValidationToken_not_contains: String

  """All values starting with the given string."""
  emailValidationToken_starts_with: String

  """All values not starting with the given string."""
  emailValidationToken_not_starts_with: String

  """All values ending with the given string."""
  emailValidationToken_ends_with: String

  """All values not ending with the given string."""
  emailValidationToken_not_ends_with: String
  emailValidationTokenExpiry: Float

  """All values that are not equal to given value."""
  emailValidationTokenExpiry_not: Float

  """All values that are contained in given list."""
  emailValidationTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  emailValidationTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  emailValidationTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  emailValidationTokenExpiry_lte: Float

  """All values greater than the given value."""
  emailValidationTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  emailValidationTokenExpiry_gte: Float
  emailValidated: Boolean

  """All values that are not equal to given value."""
  emailValidated_not: Boolean
  emailValidationDate: DateTime

  """All values that are not equal to given value."""
  emailValidationDate_not: DateTime

  """All values that are contained in given list."""
  emailValidationDate_in: [DateTime!]

  """All values that are not contained in given list."""
  emailValidationDate_not_in: [DateTime!]

  """All values less than the given value."""
  emailValidationDate_lt: DateTime

  """All values less than or equal the given value."""
  emailValidationDate_lte: DateTime

  """All values greater than the given value."""
  emailValidationDate_gt: DateTime

  """All values greater than or equal the given value."""
  emailValidationDate_gte: DateTime
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserStatus implements Node {
  id: ID!
  status: Status
  currentStatus: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserStatusEdge]!
  aggregate: AggregateUserStatus!
}

input UserStatusCreateInput {
  id: ID
  currentStatus: Boolean
  status: StatusCreateOneWithoutAuthorInput
}

input UserStatusCreateManyInput {
  create: [UserStatusCreateInput!]
  connect: [UserStatusWhereUniqueInput!]
}

input UserStatusCreateOneWithoutStatusInput {
  create: UserStatusCreateWithoutStatusInput
  connect: UserStatusWhereUniqueInput
}

input UserStatusCreateWithoutStatusInput {
  id: ID
  currentStatus: Boolean
}

"""An edge in a connection."""
type UserStatusEdge {
  """The item at the end of the edge."""
  node: UserStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserStatusOrderByInput {
  id_ASC
  id_DESC
  currentStatus_ASC
  currentStatus_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserStatusPreviousValues {
  id: ID!
  currentStatus: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserStatusScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStatusScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStatusScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStatusScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  currentStatus: Boolean

  """All values that are not equal to given value."""
  currentStatus_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type UserStatusSubscriptionPayload {
  mutation: MutationType!
  node: UserStatus
  updatedFields: [String!]
  previousValues: UserStatusPreviousValues
}

input UserStatusSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStatusSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStatusSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStatusSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserStatusWhereInput
}

input UserStatusUpdateDataInput {
  currentStatus: Boolean
  status: StatusUpdateOneWithoutAuthorInput
}

input UserStatusUpdateInput {
  currentStatus: Boolean
  status: StatusUpdateOneWithoutAuthorInput
}

input UserStatusUpdateManyDataInput {
  currentStatus: Boolean
}

input UserStatusUpdateManyInput {
  create: [UserStatusCreateInput!]
  connect: [UserStatusWhereUniqueInput!]
  set: [UserStatusWhereUniqueInput!]
  disconnect: [UserStatusWhereUniqueInput!]
  delete: [UserStatusWhereUniqueInput!]
  update: [UserStatusUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserStatusUpdateManyWithWhereNestedInput!]
  deleteMany: [UserStatusScalarWhereInput!]
  upsert: [UserStatusUpsertWithWhereUniqueNestedInput!]
}

input UserStatusUpdateManyMutationInput {
  currentStatus: Boolean
}

input UserStatusUpdateManyWithWhereNestedInput {
  where: UserStatusScalarWhereInput!
  data: UserStatusUpdateManyDataInput!
}

input UserStatusUpdateOneWithoutStatusInput {
  create: UserStatusCreateWithoutStatusInput
  connect: UserStatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserStatusUpdateWithoutStatusDataInput
  upsert: UserStatusUpsertWithoutStatusInput
}

input UserStatusUpdateWithoutStatusDataInput {
  currentStatus: Boolean
}

input UserStatusUpdateWithWhereUniqueNestedInput {
  where: UserStatusWhereUniqueInput!
  data: UserStatusUpdateDataInput!
}

input UserStatusUpsertWithoutStatusInput {
  update: UserStatusUpdateWithoutStatusDataInput!
  create: UserStatusCreateWithoutStatusInput!
}

input UserStatusUpsertWithWhereUniqueNestedInput {
  where: UserStatusWhereUniqueInput!
  update: UserStatusUpdateDataInput!
  create: UserStatusCreateInput!
}

input UserStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  currentStatus: Boolean

  """All values that are not equal to given value."""
  currentStatus_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  status: StatusWhereInput
}

input UserStatusWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamUpdateOneInput
  country: CountryUpdateOneInput
  photos: UserPhotoUpdateManyWithoutUserInput
  subscriptions: FandemSubscriptionUpdateManyInput
  userRoles: UserRoleUpdateManyInput
  status: UserStatusUpdateManyInput
  followers: UserFollowersUpdateOneWithoutUserInput
  influencers: UserInfluencersUpdateOneWithoutUserInput
}

input UserUpdateInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamUpdateOneInput
  country: CountryUpdateOneInput
  photos: UserPhotoUpdateManyWithoutUserInput
  subscriptions: FandemSubscriptionUpdateManyInput
  userRoles: UserRoleUpdateManyInput
  status: UserStatusUpdateManyInput
  followers: UserFollowersUpdateOneWithoutUserInput
  influencers: UserInfluencersUpdateOneWithoutUserInput
}

input UserUpdateManyDataInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFollowersDataInput
  upsert: UserUpsertWithoutFollowersInput
}

input UserUpdateOneRequiredWithoutInfluencersInput {
  create: UserCreateWithoutInfluencersInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutInfluencersDataInput
  upsert: UserUpsertWithoutInfluencersInput
}

input UserUpdateOneRequiredWithoutPhotosInput {
  create: UserCreateWithoutPhotosInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutPhotosDataInput
  upsert: UserUpsertWithoutPhotosInput
}

input UserUpdateWithoutFollowersDataInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamUpdateOneInput
  country: CountryUpdateOneInput
  photos: UserPhotoUpdateManyWithoutUserInput
  subscriptions: FandemSubscriptionUpdateManyInput
  userRoles: UserRoleUpdateManyInput
  status: UserStatusUpdateManyInput
  influencers: UserInfluencersUpdateOneWithoutUserInput
}

input UserUpdateWithoutInfluencersDataInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamUpdateOneInput
  country: CountryUpdateOneInput
  photos: UserPhotoUpdateManyWithoutUserInput
  subscriptions: FandemSubscriptionUpdateManyInput
  userRoles: UserRoleUpdateManyInput
  status: UserStatusUpdateManyInput
  followers: UserFollowersUpdateOneWithoutUserInput
}

input UserUpdateWithoutPhotosDataInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamUpdateOneInput
  country: CountryUpdateOneInput
  subscriptions: FandemSubscriptionUpdateManyInput
  userRoles: UserRoleUpdateManyInput
  status: UserStatusUpdateManyInput
  followers: UserFollowersUpdateOneWithoutUserInput
  influencers: UserInfluencersUpdateOneWithoutUserInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutFollowersInput {
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithoutInfluencersInput {
  update: UserUpdateWithoutInfluencersDataInput!
  create: UserCreateWithoutInfluencersInput!
}

input UserUpsertWithoutPhotosInput {
  update: UserUpdateWithoutPhotosDataInput!
  create: UserCreateWithoutPhotosInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  countryCode: String

  """All values that are not equal to given value."""
  countryCode_not: String

  """All values that are contained in given list."""
  countryCode_in: [String!]

  """All values that are not contained in given list."""
  countryCode_not_in: [String!]

  """All values less than the given value."""
  countryCode_lt: String

  """All values less than or equal the given value."""
  countryCode_lte: String

  """All values greater than the given value."""
  countryCode_gt: String

  """All values greater than or equal the given value."""
  countryCode_gte: String

  """All values containing the given string."""
  countryCode_contains: String

  """All values not containing the given string."""
  countryCode_not_contains: String

  """All values starting with the given string."""
  countryCode_starts_with: String

  """All values not starting with the given string."""
  countryCode_not_starts_with: String

  """All values ending with the given string."""
  countryCode_ends_with: String

  """All values not ending with the given string."""
  countryCode_not_ends_with: String
  phoneNumber: String

  """All values that are not equal to given value."""
  phoneNumber_not: String

  """All values that are contained in given list."""
  phoneNumber_in: [String!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [String!]

  """All values less than the given value."""
  phoneNumber_lt: String

  """All values less than or equal the given value."""
  phoneNumber_lte: String

  """All values greater than the given value."""
  phoneNumber_gt: String

  """All values greater than or equal the given value."""
  phoneNumber_gte: String

  """All values containing the given string."""
  phoneNumber_contains: String

  """All values not containing the given string."""
  phoneNumber_not_contains: String

  """All values starting with the given string."""
  phoneNumber_starts_with: String

  """All values not starting with the given string."""
  phoneNumber_not_starts_with: String

  """All values ending with the given string."""
  phoneNumber_ends_with: String

  """All values not ending with the given string."""
  phoneNumber_not_ends_with: String
  displayName: String

  """All values that are not equal to given value."""
  displayName_not: String

  """All values that are contained in given list."""
  displayName_in: [String!]

  """All values that are not contained in given list."""
  displayName_not_in: [String!]

  """All values less than the given value."""
  displayName_lt: String

  """All values less than or equal the given value."""
  displayName_lte: String

  """All values greater than the given value."""
  displayName_gt: String

  """All values greater than or equal the given value."""
  displayName_gte: String

  """All values containing the given string."""
  displayName_contains: String

  """All values not containing the given string."""
  displayName_not_contains: String

  """All values starting with the given string."""
  displayName_starts_with: String

  """All values not starting with the given string."""
  displayName_not_starts_with: String

  """All values ending with the given string."""
  displayName_ends_with: String

  """All values not ending with the given string."""
  displayName_not_ends_with: String
  isPrivate: Boolean

  """All values that are not equal to given value."""
  isPrivate_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  emailValidationToken: String

  """All values that are not equal to given value."""
  emailValidationToken_not: String

  """All values that are contained in given list."""
  emailValidationToken_in: [String!]

  """All values that are not contained in given list."""
  emailValidationToken_not_in: [String!]

  """All values less than the given value."""
  emailValidationToken_lt: String

  """All values less than or equal the given value."""
  emailValidationToken_lte: String

  """All values greater than the given value."""
  emailValidationToken_gt: String

  """All values greater than or equal the given value."""
  emailValidationToken_gte: String

  """All values containing the given string."""
  emailValidationToken_contains: String

  """All values not containing the given string."""
  emailValidationToken_not_contains: String

  """All values starting with the given string."""
  emailValidationToken_starts_with: String

  """All values not starting with the given string."""
  emailValidationToken_not_starts_with: String

  """All values ending with the given string."""
  emailValidationToken_ends_with: String

  """All values not ending with the given string."""
  emailValidationToken_not_ends_with: String
  emailValidationTokenExpiry: Float

  """All values that are not equal to given value."""
  emailValidationTokenExpiry_not: Float

  """All values that are contained in given list."""
  emailValidationTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  emailValidationTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  emailValidationTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  emailValidationTokenExpiry_lte: Float

  """All values greater than the given value."""
  emailValidationTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  emailValidationTokenExpiry_gte: Float
  emailValidated: Boolean

  """All values that are not equal to given value."""
  emailValidated_not: Boolean
  emailValidationDate: DateTime

  """All values that are not equal to given value."""
  emailValidationDate_not: DateTime

  """All values that are contained in given list."""
  emailValidationDate_in: [DateTime!]

  """All values that are not contained in given list."""
  emailValidationDate_not_in: [DateTime!]

  """All values less than the given value."""
  emailValidationDate_lt: DateTime

  """All values less than or equal the given value."""
  emailValidationDate_lte: DateTime

  """All values greater than the given value."""
  emailValidationDate_gt: DateTime

  """All values greater than or equal the given value."""
  emailValidationDate_gte: DateTime
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  favoriteTeam: TeamWhereInput
  country: CountryWhereInput
  photos_every: UserPhotoWhereInput
  photos_some: UserPhotoWhereInput
  photos_none: UserPhotoWhereInput
  subscriptions_every: FandemSubscriptionWhereInput
  subscriptions_some: FandemSubscriptionWhereInput
  subscriptions_none: FandemSubscriptionWhereInput
  userRoles_every: UserRoleWhereInput
  userRoles_some: UserRoleWhereInput
  userRoles_none: UserRoleWhereInput
  status_every: UserStatusWhereInput
  status_some: UserStatusWhereInput
  status_none: UserStatusWhereInput
  followers: UserFollowersWhereInput
  influencers: UserInfluencersWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  displayName: String
}
