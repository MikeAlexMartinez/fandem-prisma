# source: http://localhost:6464
# timestamp: Mon Apr 22 2019 09:12:05 GMT+0100 (BST)

type ActiveSubscriptions implements Node {
  id: ID!
  user: User!
  subscription: UserRole!
  startDate: DateTime!
  endDate: DateTime!
}

"""A connection to a list of items."""
type ActiveSubscriptionsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActiveSubscriptionsEdge]!
  aggregate: AggregateActiveSubscriptions!
}

input ActiveSubscriptionsCreateInput {
  startDate: DateTime!
  endDate: DateTime!
  user: UserCreateOneInput!
  subscription: UserRoleCreateOneInput!
}

"""An edge in a connection."""
type ActiveSubscriptionsEdge {
  """The item at the end of the edge."""
  node: ActiveSubscriptions!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActiveSubscriptionsOrderByInput {
  id_ASC
  id_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input ActiveSubscriptionsUpdateInput {
  startDate: DateTime
  endDate: DateTime
  user: UserUpdateOneRequiredInput
  subscription: UserRoleUpdateOneRequiredInput
}

input ActiveSubscriptionsUpdateManyMutationInput {
  startDate: DateTime
  endDate: DateTime
}

input ActiveSubscriptionsWhereInput {
  """Logical AND on all given filters."""
  AND: [ActiveSubscriptionsWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActiveSubscriptionsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActiveSubscriptionsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  user: UserWhereInput
  subscription: UserRoleWhereInput
}

input ActiveSubscriptionsWhereUniqueInput {
  id: ID
}

type AggregateActiveSubscriptions {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateStatus {
  count: Int!
}

type AggregateSubscription {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserAssignedRole {
  count: Int!
}

type AggregateUserRole {
  count: Int!
}

type AggregateUserStatus {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Country implements Node {
  id: ID!
  iso: String!
  name: String!
  code: String!
}

"""A connection to a list of items."""
type CountryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  iso: String!
  name: String!
  code: String!
}

input CountryCreateOneInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
}

"""An edge in a connection."""
type CountryEdge {
  """The item at the end of the edge."""
  node: Country!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  iso_ASC
  iso_DESC
  name_ASC
  name_DESC
  code_ASC
  code_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input CountryUpdateDataInput {
  iso: String
  name: String
  code: String
}

input CountryUpdateInput {
  iso: String
  name: String
  code: String
}

input CountryUpdateManyMutationInput {
  iso: String
  name: String
  code: String
}

input CountryUpdateOneInput {
  create: CountryCreateInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CountryUpdateDataInput
  upsert: CountryUpsertNestedInput
}

input CountryUpsertNestedInput {
  update: CountryUpdateDataInput!
  create: CountryCreateInput!
}

input CountryWhereInput {
  """Logical AND on all given filters."""
  AND: [CountryWhereInput!]

  """Logical OR on all given filters."""
  OR: [CountryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CountryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  iso: String

  """All values that are not equal to given value."""
  iso_not: String

  """All values that are contained in given list."""
  iso_in: [String!]

  """All values that are not contained in given list."""
  iso_not_in: [String!]

  """All values less than the given value."""
  iso_lt: String

  """All values less than or equal the given value."""
  iso_lte: String

  """All values greater than the given value."""
  iso_gt: String

  """All values greater than or equal the given value."""
  iso_gte: String

  """All values containing the given string."""
  iso_contains: String

  """All values not containing the given string."""
  iso_not_contains: String

  """All values starting with the given string."""
  iso_starts_with: String

  """All values not starting with the given string."""
  iso_not_starts_with: String

  """All values ending with the given string."""
  iso_ends_with: String

  """All values not ending with the given string."""
  iso_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  code: String

  """All values that are not equal to given value."""
  code_not: String

  """All values that are contained in given list."""
  code_in: [String!]

  """All values that are not contained in given list."""
  code_not_in: [String!]

  """All values less than the given value."""
  code_lt: String

  """All values less than or equal the given value."""
  code_lte: String

  """All values greater than the given value."""
  code_gt: String

  """All values greater than or equal the given value."""
  code_gte: String

  """All values containing the given string."""
  code_contains: String

  """All values not containing the given string."""
  code_not_contains: String

  """All values starting with the given string."""
  code_starts_with: String

  """All values not starting with the given string."""
  code_not_starts_with: String

  """All values ending with the given string."""
  code_ends_with: String

  """All values not ending with the given string."""
  code_not_ends_with: String
}

input CountryWhereUniqueInput {
  id: ID
}

scalar DateTime

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createStatus(data: StatusCreateInput!): Status!
  createUserStatus(data: UserStatusCreateInput!): UserStatus!
  createUserAssignedRole(data: UserAssignedRoleCreateInput!): UserAssignedRole!
  createActiveSubscriptions(data: ActiveSubscriptionsCreateInput!): ActiveSubscriptions!
  createSubscription(data: SubscriptionCreateInput!): Subscription!
  createCountry(data: CountryCreateInput!): Country!
  createUser(data: UserCreateInput!): User!
  createUserRole(data: UserRoleCreateInput!): UserRole!
  createTeam(data: TeamCreateInput!): Team!
  updateStatus(data: StatusUpdateInput!, where: StatusWhereUniqueInput!): Status
  updateUserStatus(data: UserStatusUpdateInput!, where: UserStatusWhereUniqueInput!): UserStatus
  updateUserAssignedRole(data: UserAssignedRoleUpdateInput!, where: UserAssignedRoleWhereUniqueInput!): UserAssignedRole
  updateActiveSubscriptions(data: ActiveSubscriptionsUpdateInput!, where: ActiveSubscriptionsWhereUniqueInput!): ActiveSubscriptions
  updateSubscription(data: SubscriptionUpdateInput!, where: SubscriptionWhereUniqueInput!): Subscription
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateUserRole(data: UserRoleUpdateInput!, where: UserRoleWhereUniqueInput!): UserRole
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  deleteStatus(where: StatusWhereUniqueInput!): Status
  deleteUserStatus(where: UserStatusWhereUniqueInput!): UserStatus
  deleteUserAssignedRole(where: UserAssignedRoleWhereUniqueInput!): UserAssignedRole
  deleteActiveSubscriptions(where: ActiveSubscriptionsWhereUniqueInput!): ActiveSubscriptions
  deleteSubscription(where: SubscriptionWhereUniqueInput!): Subscription
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUserRole(where: UserRoleWhereUniqueInput!): UserRole
  deleteTeam(where: TeamWhereUniqueInput!): Team
  upsertStatus(where: StatusWhereUniqueInput!, create: StatusCreateInput!, update: StatusUpdateInput!): Status!
  upsertUserStatus(where: UserStatusWhereUniqueInput!, create: UserStatusCreateInput!, update: UserStatusUpdateInput!): UserStatus!
  upsertUserAssignedRole(where: UserAssignedRoleWhereUniqueInput!, create: UserAssignedRoleCreateInput!, update: UserAssignedRoleUpdateInput!): UserAssignedRole!
  upsertActiveSubscriptions(where: ActiveSubscriptionsWhereUniqueInput!, create: ActiveSubscriptionsCreateInput!, update: ActiveSubscriptionsUpdateInput!): ActiveSubscriptions!
  upsertSubscription(where: SubscriptionWhereUniqueInput!, create: SubscriptionCreateInput!, update: SubscriptionUpdateInput!): Subscription!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertUserRole(where: UserRoleWhereUniqueInput!, create: UserRoleCreateInput!, update: UserRoleUpdateInput!): UserRole!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  updateManyStatuses(data: StatusUpdateManyMutationInput!, where: StatusWhereInput): BatchPayload!
  updateManyUserStatuses(data: UserStatusUpdateManyMutationInput!, where: UserStatusWhereInput): BatchPayload!
  updateManyActiveSubscriptionses(data: ActiveSubscriptionsUpdateManyMutationInput!, where: ActiveSubscriptionsWhereInput): BatchPayload!
  updateManySubscriptions(data: SubscriptionUpdateManyMutationInput!, where: SubscriptionWhereInput): BatchPayload!
  updateManyCountries(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyUserRoles(data: UserRoleUpdateManyMutationInput!, where: UserRoleWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  deleteManyStatuses(where: StatusWhereInput): BatchPayload!
  deleteManyUserStatuses(where: UserStatusWhereInput): BatchPayload!
  deleteManyUserAssignedRoles(where: UserAssignedRoleWhereInput): BatchPayload!
  deleteManyActiveSubscriptionses(where: ActiveSubscriptionsWhereInput): BatchPayload!
  deleteManySubscriptions(where: SubscriptionWhereInput): BatchPayload!
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyUserRoles(where: UserRoleWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Query {
  statuses(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Status]!
  userStatuses(where: UserStatusWhereInput, orderBy: UserStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStatus]!
  userAssignedRoles(where: UserAssignedRoleWhereInput, orderBy: UserAssignedRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserAssignedRole]!
  activeSubscriptionses(where: ActiveSubscriptionsWhereInput, orderBy: ActiveSubscriptionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActiveSubscriptions]!
  subscriptions(where: SubscriptionWhereInput, orderBy: SubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subscription]!
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  userRoles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole]!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  status(where: StatusWhereUniqueInput!): Status
  userStatus(where: UserStatusWhereUniqueInput!): UserStatus
  userAssignedRole(where: UserAssignedRoleWhereUniqueInput!): UserAssignedRole
  activeSubscriptions(where: ActiveSubscriptionsWhereUniqueInput!): ActiveSubscriptions
  subscription(where: SubscriptionWhereUniqueInput!): Subscription
  country(where: CountryWhereUniqueInput!): Country
  user(where: UserWhereUniqueInput!): User
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  team(where: TeamWhereUniqueInput!): Team
  statusesConnection(where: StatusWhereInput, orderBy: StatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatusConnection!
  userStatusesConnection(where: UserStatusWhereInput, orderBy: UserStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserStatusConnection!
  userAssignedRolesConnection(where: UserAssignedRoleWhereInput, orderBy: UserAssignedRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserAssignedRoleConnection!
  activeSubscriptionsesConnection(where: ActiveSubscriptionsWhereInput, orderBy: ActiveSubscriptionsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActiveSubscriptionsConnection!
  subscriptionsConnection(where: SubscriptionWhereInput, orderBy: SubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubscriptionConnection!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userRolesConnection(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserRoleConnection!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Status implements Node {
  id: ID!
  author: UserStatus
  content: String!
  likes(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type StatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatusEdge]!
  aggregate: AggregateStatus!
}

input StatusCreateInput {
  content: String!
  author: UserStatusCreateOneWithoutStatusInput
  likes: UserCreateManyInput
}

input StatusCreateOneWithoutAuthorInput {
  create: StatusCreateWithoutAuthorInput
  connect: StatusWhereUniqueInput
}

input StatusCreateWithoutAuthorInput {
  content: String!
  likes: UserCreateManyInput
}

"""An edge in a connection."""
type StatusEdge {
  """The item at the end of the edge."""
  node: Status!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StatusOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input StatusUpdateInput {
  content: String
  author: UserStatusUpdateOneWithoutStatusInput
  likes: UserUpdateManyInput
}

input StatusUpdateManyMutationInput {
  content: String
}

input StatusUpdateOneWithoutAuthorInput {
  create: StatusCreateWithoutAuthorInput
  connect: StatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StatusUpdateWithoutAuthorDataInput
  upsert: StatusUpsertWithoutAuthorInput
}

input StatusUpdateWithoutAuthorDataInput {
  content: String
  likes: UserUpdateManyInput
}

input StatusUpsertWithoutAuthorInput {
  update: StatusUpdateWithoutAuthorDataInput!
  create: StatusCreateWithoutAuthorInput!
}

input StatusWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  author: UserStatusWhereInput
  likes_every: UserWhereInput
  likes_some: UserWhereInput
  likes_none: UserWhereInput
}

input StatusWhereUniqueInput {
  id: ID
}

type Subscription implements Node {
  id: ID!
  name: String!
  description: String!
}

"""A connection to a list of items."""
type SubscriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SubscriptionEdge]!
  aggregate: AggregateSubscription!
}

input SubscriptionCreateInput {
  name: String!
  description: String!
}

input SubscriptionCreateManyInput {
  create: [SubscriptionCreateInput!]
  connect: [SubscriptionWhereUniqueInput!]
}

"""An edge in a connection."""
type SubscriptionEdge {
  """The item at the end of the edge."""
  node: Subscription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SubscriptionOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input SubscriptionScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SubscriptionScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubscriptionScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubscriptionScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input SubscriptionUpdateDataInput {
  name: String
  description: String
}

input SubscriptionUpdateInput {
  name: String
  description: String
}

input SubscriptionUpdateManyDataInput {
  name: String
  description: String
}

input SubscriptionUpdateManyInput {
  create: [SubscriptionCreateInput!]
  connect: [SubscriptionWhereUniqueInput!]
  set: [SubscriptionWhereUniqueInput!]
  disconnect: [SubscriptionWhereUniqueInput!]
  delete: [SubscriptionWhereUniqueInput!]
  update: [SubscriptionUpdateWithWhereUniqueNestedInput!]
  updateMany: [SubscriptionUpdateManyWithWhereNestedInput!]
  deleteMany: [SubscriptionScalarWhereInput!]
  upsert: [SubscriptionUpsertWithWhereUniqueNestedInput!]
}

input SubscriptionUpdateManyMutationInput {
  name: String
  description: String
}

input SubscriptionUpdateManyWithWhereNestedInput {
  where: SubscriptionScalarWhereInput!
  data: SubscriptionUpdateManyDataInput!
}

input SubscriptionUpdateWithWhereUniqueNestedInput {
  where: SubscriptionWhereUniqueInput!
  data: SubscriptionUpdateDataInput!
}

input SubscriptionUpsertWithWhereUniqueNestedInput {
  where: SubscriptionWhereUniqueInput!
  update: SubscriptionUpdateDataInput!
  create: SubscriptionCreateInput!
}

input SubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SubscriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input SubscriptionWhereUniqueInput {
  id: ID
}

type Team implements Node {
  id: ID!
  code: Int!
  fplTeamId: Int!
  name: String!
  shortName: String!
  strength: Int!
  strengthAttackAway: Int!
  strengthAttackHome: Int!
  strengthDefenceAway: Int!
  strengthDefenceHome: Int!
  strengthOverallAway: Int!
  strengthOverallHome: Int!
  teamDivision: Int!
}

"""A connection to a list of items."""
type TeamConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  code: Int!
  fplTeamId: Int!
  name: String!
  shortName: String!
  strength: Int!
  strengthAttackAway: Int!
  strengthAttackHome: Int!
  strengthDefenceAway: Int!
  strengthDefenceHome: Int!
  strengthOverallAway: Int!
  strengthOverallHome: Int!
  teamDivision: Int!
}

input TeamCreateOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

"""An edge in a connection."""
type TeamEdge {
  """The item at the end of the edge."""
  node: Team!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  code_ASC
  code_DESC
  fplTeamId_ASC
  fplTeamId_DESC
  name_ASC
  name_DESC
  shortName_ASC
  shortName_DESC
  strength_ASC
  strength_DESC
  strengthAttackAway_ASC
  strengthAttackAway_DESC
  strengthAttackHome_ASC
  strengthAttackHome_DESC
  strengthDefenceAway_ASC
  strengthDefenceAway_DESC
  strengthDefenceHome_ASC
  strengthDefenceHome_DESC
  strengthOverallAway_ASC
  strengthOverallAway_DESC
  strengthOverallHome_ASC
  strengthOverallHome_DESC
  teamDivision_ASC
  teamDivision_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input TeamUpdateDataInput {
  code: Int
  fplTeamId: Int
  name: String
  shortName: String
  strength: Int
  strengthAttackAway: Int
  strengthAttackHome: Int
  strengthDefenceAway: Int
  strengthDefenceHome: Int
  strengthOverallAway: Int
  strengthOverallHome: Int
  teamDivision: Int
}

input TeamUpdateInput {
  code: Int
  fplTeamId: Int
  name: String
  shortName: String
  strength: Int
  strengthAttackAway: Int
  strengthAttackHome: Int
  strengthDefenceAway: Int
  strengthDefenceHome: Int
  strengthOverallAway: Int
  strengthOverallHome: Int
  teamDivision: Int
}

input TeamUpdateManyMutationInput {
  code: Int
  fplTeamId: Int
  name: String
  shortName: String
  strength: Int
  strengthAttackAway: Int
  strengthAttackHome: Int
  strengthDefenceAway: Int
  strengthDefenceHome: Int
  strengthOverallAway: Int
  strengthOverallHome: Int
  teamDivision: Int
}

input TeamUpdateOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: TeamUpdateDataInput
  upsert: TeamUpsertNestedInput
}

input TeamUpsertNestedInput {
  update: TeamUpdateDataInput!
  create: TeamCreateInput!
}

input TeamWhereInput {
  """Logical AND on all given filters."""
  AND: [TeamWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeamWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeamWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  code: Int

  """All values that are not equal to given value."""
  code_not: Int

  """All values that are contained in given list."""
  code_in: [Int!]

  """All values that are not contained in given list."""
  code_not_in: [Int!]

  """All values less than the given value."""
  code_lt: Int

  """All values less than or equal the given value."""
  code_lte: Int

  """All values greater than the given value."""
  code_gt: Int

  """All values greater than or equal the given value."""
  code_gte: Int
  fplTeamId: Int

  """All values that are not equal to given value."""
  fplTeamId_not: Int

  """All values that are contained in given list."""
  fplTeamId_in: [Int!]

  """All values that are not contained in given list."""
  fplTeamId_not_in: [Int!]

  """All values less than the given value."""
  fplTeamId_lt: Int

  """All values less than or equal the given value."""
  fplTeamId_lte: Int

  """All values greater than the given value."""
  fplTeamId_gt: Int

  """All values greater than or equal the given value."""
  fplTeamId_gte: Int
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  shortName: String

  """All values that are not equal to given value."""
  shortName_not: String

  """All values that are contained in given list."""
  shortName_in: [String!]

  """All values that are not contained in given list."""
  shortName_not_in: [String!]

  """All values less than the given value."""
  shortName_lt: String

  """All values less than or equal the given value."""
  shortName_lte: String

  """All values greater than the given value."""
  shortName_gt: String

  """All values greater than or equal the given value."""
  shortName_gte: String

  """All values containing the given string."""
  shortName_contains: String

  """All values not containing the given string."""
  shortName_not_contains: String

  """All values starting with the given string."""
  shortName_starts_with: String

  """All values not starting with the given string."""
  shortName_not_starts_with: String

  """All values ending with the given string."""
  shortName_ends_with: String

  """All values not ending with the given string."""
  shortName_not_ends_with: String
  strength: Int

  """All values that are not equal to given value."""
  strength_not: Int

  """All values that are contained in given list."""
  strength_in: [Int!]

  """All values that are not contained in given list."""
  strength_not_in: [Int!]

  """All values less than the given value."""
  strength_lt: Int

  """All values less than or equal the given value."""
  strength_lte: Int

  """All values greater than the given value."""
  strength_gt: Int

  """All values greater than or equal the given value."""
  strength_gte: Int
  strengthAttackAway: Int

  """All values that are not equal to given value."""
  strengthAttackAway_not: Int

  """All values that are contained in given list."""
  strengthAttackAway_in: [Int!]

  """All values that are not contained in given list."""
  strengthAttackAway_not_in: [Int!]

  """All values less than the given value."""
  strengthAttackAway_lt: Int

  """All values less than or equal the given value."""
  strengthAttackAway_lte: Int

  """All values greater than the given value."""
  strengthAttackAway_gt: Int

  """All values greater than or equal the given value."""
  strengthAttackAway_gte: Int
  strengthAttackHome: Int

  """All values that are not equal to given value."""
  strengthAttackHome_not: Int

  """All values that are contained in given list."""
  strengthAttackHome_in: [Int!]

  """All values that are not contained in given list."""
  strengthAttackHome_not_in: [Int!]

  """All values less than the given value."""
  strengthAttackHome_lt: Int

  """All values less than or equal the given value."""
  strengthAttackHome_lte: Int

  """All values greater than the given value."""
  strengthAttackHome_gt: Int

  """All values greater than or equal the given value."""
  strengthAttackHome_gte: Int
  strengthDefenceAway: Int

  """All values that are not equal to given value."""
  strengthDefenceAway_not: Int

  """All values that are contained in given list."""
  strengthDefenceAway_in: [Int!]

  """All values that are not contained in given list."""
  strengthDefenceAway_not_in: [Int!]

  """All values less than the given value."""
  strengthDefenceAway_lt: Int

  """All values less than or equal the given value."""
  strengthDefenceAway_lte: Int

  """All values greater than the given value."""
  strengthDefenceAway_gt: Int

  """All values greater than or equal the given value."""
  strengthDefenceAway_gte: Int
  strengthDefenceHome: Int

  """All values that are not equal to given value."""
  strengthDefenceHome_not: Int

  """All values that are contained in given list."""
  strengthDefenceHome_in: [Int!]

  """All values that are not contained in given list."""
  strengthDefenceHome_not_in: [Int!]

  """All values less than the given value."""
  strengthDefenceHome_lt: Int

  """All values less than or equal the given value."""
  strengthDefenceHome_lte: Int

  """All values greater than the given value."""
  strengthDefenceHome_gt: Int

  """All values greater than or equal the given value."""
  strengthDefenceHome_gte: Int
  strengthOverallAway: Int

  """All values that are not equal to given value."""
  strengthOverallAway_not: Int

  """All values that are contained in given list."""
  strengthOverallAway_in: [Int!]

  """All values that are not contained in given list."""
  strengthOverallAway_not_in: [Int!]

  """All values less than the given value."""
  strengthOverallAway_lt: Int

  """All values less than or equal the given value."""
  strengthOverallAway_lte: Int

  """All values greater than the given value."""
  strengthOverallAway_gt: Int

  """All values greater than or equal the given value."""
  strengthOverallAway_gte: Int
  strengthOverallHome: Int

  """All values that are not equal to given value."""
  strengthOverallHome_not: Int

  """All values that are contained in given list."""
  strengthOverallHome_in: [Int!]

  """All values that are not contained in given list."""
  strengthOverallHome_not_in: [Int!]

  """All values less than the given value."""
  strengthOverallHome_lt: Int

  """All values less than or equal the given value."""
  strengthOverallHome_lte: Int

  """All values greater than the given value."""
  strengthOverallHome_gt: Int

  """All values greater than or equal the given value."""
  strengthOverallHome_gte: Int
  teamDivision: Int

  """All values that are not equal to given value."""
  teamDivision_not: Int

  """All values that are contained in given list."""
  teamDivision_in: [Int!]

  """All values that are not contained in given list."""
  teamDivision_not_in: [Int!]

  """All values less than the given value."""
  teamDivision_lt: Int

  """All values less than or equal the given value."""
  teamDivision_lte: Int

  """All values greater than the given value."""
  teamDivision_gt: Int

  """All values greater than or equal the given value."""
  teamDivision_gte: Int
}

input TeamWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
  countryCode: String
  phoneNumber: String
  favoriteTeam: Team
  country: Country
  displayName: String!
  isPrivate: Boolean!
  password: String
  profilePicture: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean!
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  subscriptions(where: SubscriptionWhereInput, orderBy: SubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Subscription!]
  userRoles(where: UserRoleWhereInput, orderBy: UserRoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRole!]
  status(where: UserStatusWhereInput, orderBy: UserStatusOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserStatus!]
}

type UserAssignedRole implements Node {
  id: ID!
  user: User!
  userRole: UserRole!
}

"""A connection to a list of items."""
type UserAssignedRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserAssignedRoleEdge]!
  aggregate: AggregateUserAssignedRole!
}

input UserAssignedRoleCreateInput {
  user: UserCreateOneInput!
  userRole: UserRoleCreateOneInput!
}

"""An edge in a connection."""
type UserAssignedRoleEdge {
  """The item at the end of the edge."""
  node: UserAssignedRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserAssignedRoleOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input UserAssignedRoleUpdateInput {
  user: UserUpdateOneRequiredInput
  userRole: UserRoleUpdateOneRequiredInput
}

input UserAssignedRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [UserAssignedRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserAssignedRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserAssignedRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user: UserWhereInput
  userRole: UserRoleWhereInput
}

input UserAssignedRoleWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  name: String!
  countryCode: String
  phoneNumber: String
  displayName: String!
  isPrivate: Boolean
  password: String
  profilePicture: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamCreateOneInput
  country: CountryCreateOneInput
  subscriptions: SubscriptionCreateManyInput
  userRoles: UserRoleCreateManyInput
  status: UserStatusCreateManyWithoutAuthorInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutStatusInput {
  create: UserCreateWithoutStatusInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStatusInput {
  email: String!
  name: String!
  countryCode: String
  phoneNumber: String
  displayName: String!
  isPrivate: Boolean
  password: String
  profilePicture: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamCreateOneInput
  country: CountryCreateOneInput
  subscriptions: SubscriptionCreateManyInput
  userRoles: UserRoleCreateManyInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  countryCode_ASC
  countryCode_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  displayName_ASC
  displayName_DESC
  isPrivate_ASC
  isPrivate_DESC
  password_ASC
  password_DESC
  profilePicture_ASC
  profilePicture_DESC
  emailValidationToken_ASC
  emailValidationToken_DESC
  emailValidationTokenExpiry_ASC
  emailValidationTokenExpiry_DESC
  emailValidated_ASC
  emailValidated_DESC
  emailValidationDate_ASC
  emailValidationDate_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserRole implements Node {
  id: ID!
  name: String!
  description: String!
}

"""A connection to a list of items."""
type UserRoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserRoleEdge]!
  aggregate: AggregateUserRole!
}

input UserRoleCreateInput {
  name: String!
  description: String!
}

input UserRoleCreateManyInput {
  create: [UserRoleCreateInput!]
  connect: [UserRoleWhereUniqueInput!]
}

input UserRoleCreateOneInput {
  create: UserRoleCreateInput
  connect: UserRoleWhereUniqueInput
}

"""An edge in a connection."""
type UserRoleEdge {
  """The item at the end of the edge."""
  node: UserRole!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserRoleOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input UserRoleScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input UserRoleUpdateDataInput {
  name: String
  description: String
}

input UserRoleUpdateInput {
  name: String
  description: String
}

input UserRoleUpdateManyDataInput {
  name: String
  description: String
}

input UserRoleUpdateManyInput {
  create: [UserRoleCreateInput!]
  connect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  delete: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserRoleUpdateManyWithWhereNestedInput!]
  deleteMany: [UserRoleScalarWhereInput!]
  upsert: [UserRoleUpsertWithWhereUniqueNestedInput!]
}

input UserRoleUpdateManyMutationInput {
  name: String
  description: String
}

input UserRoleUpdateManyWithWhereNestedInput {
  where: UserRoleScalarWhereInput!
  data: UserRoleUpdateManyDataInput!
}

input UserRoleUpdateOneRequiredInput {
  create: UserRoleCreateInput
  connect: UserRoleWhereUniqueInput
  update: UserRoleUpdateDataInput
  upsert: UserRoleUpsertNestedInput
}

input UserRoleUpdateWithWhereUniqueNestedInput {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateDataInput!
}

input UserRoleUpsertNestedInput {
  update: UserRoleUpdateDataInput!
  create: UserRoleCreateInput!
}

input UserRoleUpsertWithWhereUniqueNestedInput {
  where: UserRoleWhereUniqueInput!
  update: UserRoleUpdateDataInput!
  create: UserRoleCreateInput!
}

input UserRoleWhereInput {
  """Logical AND on all given filters."""
  AND: [UserRoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserRoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserRoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

input UserRoleWhereUniqueInput {
  id: ID
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  countryCode: String

  """All values that are not equal to given value."""
  countryCode_not: String

  """All values that are contained in given list."""
  countryCode_in: [String!]

  """All values that are not contained in given list."""
  countryCode_not_in: [String!]

  """All values less than the given value."""
  countryCode_lt: String

  """All values less than or equal the given value."""
  countryCode_lte: String

  """All values greater than the given value."""
  countryCode_gt: String

  """All values greater than or equal the given value."""
  countryCode_gte: String

  """All values containing the given string."""
  countryCode_contains: String

  """All values not containing the given string."""
  countryCode_not_contains: String

  """All values starting with the given string."""
  countryCode_starts_with: String

  """All values not starting with the given string."""
  countryCode_not_starts_with: String

  """All values ending with the given string."""
  countryCode_ends_with: String

  """All values not ending with the given string."""
  countryCode_not_ends_with: String
  phoneNumber: String

  """All values that are not equal to given value."""
  phoneNumber_not: String

  """All values that are contained in given list."""
  phoneNumber_in: [String!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [String!]

  """All values less than the given value."""
  phoneNumber_lt: String

  """All values less than or equal the given value."""
  phoneNumber_lte: String

  """All values greater than the given value."""
  phoneNumber_gt: String

  """All values greater than or equal the given value."""
  phoneNumber_gte: String

  """All values containing the given string."""
  phoneNumber_contains: String

  """All values not containing the given string."""
  phoneNumber_not_contains: String

  """All values starting with the given string."""
  phoneNumber_starts_with: String

  """All values not starting with the given string."""
  phoneNumber_not_starts_with: String

  """All values ending with the given string."""
  phoneNumber_ends_with: String

  """All values not ending with the given string."""
  phoneNumber_not_ends_with: String
  displayName: String

  """All values that are not equal to given value."""
  displayName_not: String

  """All values that are contained in given list."""
  displayName_in: [String!]

  """All values that are not contained in given list."""
  displayName_not_in: [String!]

  """All values less than the given value."""
  displayName_lt: String

  """All values less than or equal the given value."""
  displayName_lte: String

  """All values greater than the given value."""
  displayName_gt: String

  """All values greater than or equal the given value."""
  displayName_gte: String

  """All values containing the given string."""
  displayName_contains: String

  """All values not containing the given string."""
  displayName_not_contains: String

  """All values starting with the given string."""
  displayName_starts_with: String

  """All values not starting with the given string."""
  displayName_not_starts_with: String

  """All values ending with the given string."""
  displayName_ends_with: String

  """All values not ending with the given string."""
  displayName_not_ends_with: String
  isPrivate: Boolean

  """All values that are not equal to given value."""
  isPrivate_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  profilePicture: String

  """All values that are not equal to given value."""
  profilePicture_not: String

  """All values that are contained in given list."""
  profilePicture_in: [String!]

  """All values that are not contained in given list."""
  profilePicture_not_in: [String!]

  """All values less than the given value."""
  profilePicture_lt: String

  """All values less than or equal the given value."""
  profilePicture_lte: String

  """All values greater than the given value."""
  profilePicture_gt: String

  """All values greater than or equal the given value."""
  profilePicture_gte: String

  """All values containing the given string."""
  profilePicture_contains: String

  """All values not containing the given string."""
  profilePicture_not_contains: String

  """All values starting with the given string."""
  profilePicture_starts_with: String

  """All values not starting with the given string."""
  profilePicture_not_starts_with: String

  """All values ending with the given string."""
  profilePicture_ends_with: String

  """All values not ending with the given string."""
  profilePicture_not_ends_with: String
  emailValidationToken: String

  """All values that are not equal to given value."""
  emailValidationToken_not: String

  """All values that are contained in given list."""
  emailValidationToken_in: [String!]

  """All values that are not contained in given list."""
  emailValidationToken_not_in: [String!]

  """All values less than the given value."""
  emailValidationToken_lt: String

  """All values less than or equal the given value."""
  emailValidationToken_lte: String

  """All values greater than the given value."""
  emailValidationToken_gt: String

  """All values greater than or equal the given value."""
  emailValidationToken_gte: String

  """All values containing the given string."""
  emailValidationToken_contains: String

  """All values not containing the given string."""
  emailValidationToken_not_contains: String

  """All values starting with the given string."""
  emailValidationToken_starts_with: String

  """All values not starting with the given string."""
  emailValidationToken_not_starts_with: String

  """All values ending with the given string."""
  emailValidationToken_ends_with: String

  """All values not ending with the given string."""
  emailValidationToken_not_ends_with: String
  emailValidationTokenExpiry: Float

  """All values that are not equal to given value."""
  emailValidationTokenExpiry_not: Float

  """All values that are contained in given list."""
  emailValidationTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  emailValidationTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  emailValidationTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  emailValidationTokenExpiry_lte: Float

  """All values greater than the given value."""
  emailValidationTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  emailValidationTokenExpiry_gte: Float
  emailValidated: Boolean

  """All values that are not equal to given value."""
  emailValidated_not: Boolean
  emailValidationDate: DateTime

  """All values that are not equal to given value."""
  emailValidationDate_not: DateTime

  """All values that are contained in given list."""
  emailValidationDate_in: [DateTime!]

  """All values that are not contained in given list."""
  emailValidationDate_not_in: [DateTime!]

  """All values less than the given value."""
  emailValidationDate_lt: DateTime

  """All values less than or equal the given value."""
  emailValidationDate_lte: DateTime

  """All values greater than the given value."""
  emailValidationDate_gt: DateTime

  """All values greater than or equal the given value."""
  emailValidationDate_gte: DateTime
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
}

type UserStatus implements Node {
  id: ID!
  author: User!
  status: Status
  currentStatus: Boolean
}

"""A connection to a list of items."""
type UserStatusConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserStatusEdge]!
  aggregate: AggregateUserStatus!
}

input UserStatusCreateInput {
  currentStatus: Boolean
  author: UserCreateOneWithoutStatusInput!
  status: StatusCreateOneWithoutAuthorInput
}

input UserStatusCreateManyWithoutAuthorInput {
  create: [UserStatusCreateWithoutAuthorInput!]
  connect: [UserStatusWhereUniqueInput!]
}

input UserStatusCreateOneWithoutStatusInput {
  create: UserStatusCreateWithoutStatusInput
  connect: UserStatusWhereUniqueInput
}

input UserStatusCreateWithoutAuthorInput {
  currentStatus: Boolean
  status: StatusCreateOneWithoutAuthorInput
}

input UserStatusCreateWithoutStatusInput {
  currentStatus: Boolean
  author: UserCreateOneWithoutStatusInput!
}

"""An edge in a connection."""
type UserStatusEdge {
  """The item at the end of the edge."""
  node: UserStatus!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserStatusOrderByInput {
  id_ASC
  id_DESC
  currentStatus_ASC
  currentStatus_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

input UserStatusScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStatusScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStatusScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStatusScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  currentStatus: Boolean

  """All values that are not equal to given value."""
  currentStatus_not: Boolean
}

input UserStatusUpdateInput {
  currentStatus: Boolean
  author: UserUpdateOneRequiredWithoutStatusInput
  status: StatusUpdateOneWithoutAuthorInput
}

input UserStatusUpdateManyDataInput {
  currentStatus: Boolean
}

input UserStatusUpdateManyMutationInput {
  currentStatus: Boolean
}

input UserStatusUpdateManyWithoutAuthorInput {
  create: [UserStatusCreateWithoutAuthorInput!]
  connect: [UserStatusWhereUniqueInput!]
  set: [UserStatusWhereUniqueInput!]
  disconnect: [UserStatusWhereUniqueInput!]
  delete: [UserStatusWhereUniqueInput!]
  update: [UserStatusUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [UserStatusUpdateManyWithWhereNestedInput!]
  deleteMany: [UserStatusScalarWhereInput!]
  upsert: [UserStatusUpsertWithWhereUniqueWithoutAuthorInput!]
}

input UserStatusUpdateManyWithWhereNestedInput {
  where: UserStatusScalarWhereInput!
  data: UserStatusUpdateManyDataInput!
}

input UserStatusUpdateOneWithoutStatusInput {
  create: UserStatusCreateWithoutStatusInput
  connect: UserStatusWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserStatusUpdateWithoutStatusDataInput
  upsert: UserStatusUpsertWithoutStatusInput
}

input UserStatusUpdateWithoutAuthorDataInput {
  currentStatus: Boolean
  status: StatusUpdateOneWithoutAuthorInput
}

input UserStatusUpdateWithoutStatusDataInput {
  currentStatus: Boolean
  author: UserUpdateOneRequiredWithoutStatusInput
}

input UserStatusUpdateWithWhereUniqueWithoutAuthorInput {
  where: UserStatusWhereUniqueInput!
  data: UserStatusUpdateWithoutAuthorDataInput!
}

input UserStatusUpsertWithoutStatusInput {
  update: UserStatusUpdateWithoutStatusDataInput!
  create: UserStatusCreateWithoutStatusInput!
}

input UserStatusUpsertWithWhereUniqueWithoutAuthorInput {
  where: UserStatusWhereUniqueInput!
  update: UserStatusUpdateWithoutAuthorDataInput!
  create: UserStatusCreateWithoutAuthorInput!
}

input UserStatusWhereInput {
  """Logical AND on all given filters."""
  AND: [UserStatusWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserStatusWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserStatusWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  currentStatus: Boolean

  """All values that are not equal to given value."""
  currentStatus_not: Boolean
  author: UserWhereInput
  status: StatusWhereInput
}

input UserStatusWhereUniqueInput {
  id: ID
}

input UserUpdateDataInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  profilePicture: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamUpdateOneInput
  country: CountryUpdateOneInput
  subscriptions: SubscriptionUpdateManyInput
  userRoles: UserRoleUpdateManyInput
  status: UserStatusUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  profilePicture: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamUpdateOneInput
  country: CountryUpdateOneInput
  subscriptions: SubscriptionUpdateManyInput
  userRoles: UserRoleUpdateManyInput
  status: UserStatusUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  profilePicture: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  profilePicture: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutStatusInput {
  create: UserCreateWithoutStatusInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutStatusDataInput
  upsert: UserUpsertWithoutStatusInput
}

input UserUpdateWithoutStatusDataInput {
  email: String
  name: String
  countryCode: String
  phoneNumber: String
  displayName: String
  isPrivate: Boolean
  password: String
  profilePicture: String
  emailValidationToken: String
  emailValidationTokenExpiry: Float
  emailValidated: Boolean
  emailValidationDate: DateTime
  resetToken: String
  resetTokenExpiry: Float
  favoriteTeam: TeamUpdateOneInput
  country: CountryUpdateOneInput
  subscriptions: SubscriptionUpdateManyInput
  userRoles: UserRoleUpdateManyInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutStatusInput {
  update: UserUpdateWithoutStatusDataInput!
  create: UserCreateWithoutStatusInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  countryCode: String

  """All values that are not equal to given value."""
  countryCode_not: String

  """All values that are contained in given list."""
  countryCode_in: [String!]

  """All values that are not contained in given list."""
  countryCode_not_in: [String!]

  """All values less than the given value."""
  countryCode_lt: String

  """All values less than or equal the given value."""
  countryCode_lte: String

  """All values greater than the given value."""
  countryCode_gt: String

  """All values greater than or equal the given value."""
  countryCode_gte: String

  """All values containing the given string."""
  countryCode_contains: String

  """All values not containing the given string."""
  countryCode_not_contains: String

  """All values starting with the given string."""
  countryCode_starts_with: String

  """All values not starting with the given string."""
  countryCode_not_starts_with: String

  """All values ending with the given string."""
  countryCode_ends_with: String

  """All values not ending with the given string."""
  countryCode_not_ends_with: String
  phoneNumber: String

  """All values that are not equal to given value."""
  phoneNumber_not: String

  """All values that are contained in given list."""
  phoneNumber_in: [String!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [String!]

  """All values less than the given value."""
  phoneNumber_lt: String

  """All values less than or equal the given value."""
  phoneNumber_lte: String

  """All values greater than the given value."""
  phoneNumber_gt: String

  """All values greater than or equal the given value."""
  phoneNumber_gte: String

  """All values containing the given string."""
  phoneNumber_contains: String

  """All values not containing the given string."""
  phoneNumber_not_contains: String

  """All values starting with the given string."""
  phoneNumber_starts_with: String

  """All values not starting with the given string."""
  phoneNumber_not_starts_with: String

  """All values ending with the given string."""
  phoneNumber_ends_with: String

  """All values not ending with the given string."""
  phoneNumber_not_ends_with: String
  displayName: String

  """All values that are not equal to given value."""
  displayName_not: String

  """All values that are contained in given list."""
  displayName_in: [String!]

  """All values that are not contained in given list."""
  displayName_not_in: [String!]

  """All values less than the given value."""
  displayName_lt: String

  """All values less than or equal the given value."""
  displayName_lte: String

  """All values greater than the given value."""
  displayName_gt: String

  """All values greater than or equal the given value."""
  displayName_gte: String

  """All values containing the given string."""
  displayName_contains: String

  """All values not containing the given string."""
  displayName_not_contains: String

  """All values starting with the given string."""
  displayName_starts_with: String

  """All values not starting with the given string."""
  displayName_not_starts_with: String

  """All values ending with the given string."""
  displayName_ends_with: String

  """All values not ending with the given string."""
  displayName_not_ends_with: String
  isPrivate: Boolean

  """All values that are not equal to given value."""
  isPrivate_not: Boolean
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  profilePicture: String

  """All values that are not equal to given value."""
  profilePicture_not: String

  """All values that are contained in given list."""
  profilePicture_in: [String!]

  """All values that are not contained in given list."""
  profilePicture_not_in: [String!]

  """All values less than the given value."""
  profilePicture_lt: String

  """All values less than or equal the given value."""
  profilePicture_lte: String

  """All values greater than the given value."""
  profilePicture_gt: String

  """All values greater than or equal the given value."""
  profilePicture_gte: String

  """All values containing the given string."""
  profilePicture_contains: String

  """All values not containing the given string."""
  profilePicture_not_contains: String

  """All values starting with the given string."""
  profilePicture_starts_with: String

  """All values not starting with the given string."""
  profilePicture_not_starts_with: String

  """All values ending with the given string."""
  profilePicture_ends_with: String

  """All values not ending with the given string."""
  profilePicture_not_ends_with: String
  emailValidationToken: String

  """All values that are not equal to given value."""
  emailValidationToken_not: String

  """All values that are contained in given list."""
  emailValidationToken_in: [String!]

  """All values that are not contained in given list."""
  emailValidationToken_not_in: [String!]

  """All values less than the given value."""
  emailValidationToken_lt: String

  """All values less than or equal the given value."""
  emailValidationToken_lte: String

  """All values greater than the given value."""
  emailValidationToken_gt: String

  """All values greater than or equal the given value."""
  emailValidationToken_gte: String

  """All values containing the given string."""
  emailValidationToken_contains: String

  """All values not containing the given string."""
  emailValidationToken_not_contains: String

  """All values starting with the given string."""
  emailValidationToken_starts_with: String

  """All values not starting with the given string."""
  emailValidationToken_not_starts_with: String

  """All values ending with the given string."""
  emailValidationToken_ends_with: String

  """All values not ending with the given string."""
  emailValidationToken_not_ends_with: String
  emailValidationTokenExpiry: Float

  """All values that are not equal to given value."""
  emailValidationTokenExpiry_not: Float

  """All values that are contained in given list."""
  emailValidationTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  emailValidationTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  emailValidationTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  emailValidationTokenExpiry_lte: Float

  """All values greater than the given value."""
  emailValidationTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  emailValidationTokenExpiry_gte: Float
  emailValidated: Boolean

  """All values that are not equal to given value."""
  emailValidated_not: Boolean
  emailValidationDate: DateTime

  """All values that are not equal to given value."""
  emailValidationDate_not: DateTime

  """All values that are contained in given list."""
  emailValidationDate_in: [DateTime!]

  """All values that are not contained in given list."""
  emailValidationDate_not_in: [DateTime!]

  """All values less than the given value."""
  emailValidationDate_lt: DateTime

  """All values less than or equal the given value."""
  emailValidationDate_lte: DateTime

  """All values greater than the given value."""
  emailValidationDate_gt: DateTime

  """All values greater than or equal the given value."""
  emailValidationDate_gte: DateTime
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  favoriteTeam: TeamWhereInput
  country: CountryWhereInput
  subscriptions_every: SubscriptionWhereInput
  subscriptions_some: SubscriptionWhereInput
  subscriptions_none: SubscriptionWhereInput
  userRoles_every: UserRoleWhereInput
  userRoles_some: UserRoleWhereInput
  userRoles_none: UserRoleWhereInput
  status_every: UserStatusWhereInput
  status_some: UserStatusWhereInput
  status_none: UserStatusWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
  displayName: String
}
